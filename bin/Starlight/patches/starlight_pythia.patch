diff -ruN ./include/reportingUtils.h ../starlight_v326_patch/include/reportingUtils.h
--- ./include/reportingUtils.h	2023-12-16 00:45:24.000000001 +0100
+++ ../starlight_v326_patch/include/reportingUtils.h	2023-12-16 00:45:34.000000001 +0100
@@ -61,7 +61,7 @@
 	return prettyFunction;
 }
 
-#define printErr  std::cerr << "!!! " << __PRETTY_FUNCTION__ << " [" << __FILE__ << ":" << __LINE__ << "]: ERROR: "   << std::flush
+#define printErro std::cerr << "!!! " << __PRETTY_FUNCTION__ << " [" << __FILE__ << ":" << __LINE__ << "]: ERROR: "   << std::flush
 #define printWarn std::cerr << ">>> " << __PRETTY_FUNCTION__ << " [" << __FILE__ << ":" << __LINE__ << "]: "<<std::endl<<"Warning: " << std::flush 
 #define printInfo std::cout << ">>> " << getClassMethod__(__PRETTY_FUNCTION__) << "(): Info: "  << std::flush
 
diff -ruN ./src/starlight.cpp ../starlight_v326_patch/src/starlight.cpp
--- ./src/starlight.cpp	2023-12-16 00:45:24.000000001 +0100
+++ ../starlight_v326_patch/src/starlight.cpp	2023-12-16 00:45:34.000000001 +0100
@@ -114,16 +114,16 @@
 
 	// Do some sanity checks of the input parameters here.
         if( _inputParameters->beam1Z() > _inputParameters->beam1A() ){
-	  printErr << endl << "A must be >= Z; A beam1 = "<<_inputParameters->beam1A()<<", Z beam1 = "<<_inputParameters->beam1Z()<<". Terminating."<<endl ;
+	  printErro << endl << "A must be >= Z; A beam1 = "<<_inputParameters->beam1A()<<", Z beam1 = "<<_inputParameters->beam1Z()<<". Terminating."<<endl ;
 	  return false;
 	}
         if( _inputParameters->beam2Z() > _inputParameters->beam2A() ){
-	  printErr << endl << "A must be >= Z; A beam2 = "<<_inputParameters->beam2A()<<", Z beam2 = "<<_inputParameters->beam2Z()<<". Terminating."<<endl ;
+	  printErro << endl << "A must be >= Z; A beam2 = "<<_inputParameters->beam2A()<<", Z beam2 = "<<_inputParameters->beam2Z()<<". Terminating."<<endl ;
 	  return false;
 	}
 	if( _inputParameters->interactionType() == PHOTONPOMERONINCOHERENT && _inputParameters->beam1A() == 1 &&
 	    _inputParameters->beam1Z() == 1 && _inputParameters->beam2A() == 1 && _inputParameters->beam2Z() ){
-          printErr << endl << " Do not use PROD_MODE = 4 for pp collisions. Use PROD_MODE = 2 or 3 instead. Terminating."<<endl;
+          printErro << endl << " Do not use PROD_MODE = 4 for pp collisions. Use PROD_MODE = 2 or 3 instead. Terminating."<<endl;
 	  return false; 
 	}
 
@@ -216,7 +216,7 @@
 starlight::produceEvent()
 {
 	if (!_isInitialised) {
-		printErr << "trying to generate event but Starlight is not initialised. aborting." << endl;
+		printErro << "trying to generate event but Starlight is not initialised. aborting." << endl;
 		exit(-1);
 	}
 	double gamma1 = _inputParameters->beam1LorentzGamma();
@@ -322,7 +322,7 @@
 #ifdef ENABLE_PYTHIA
 			// PythiaOutput = true;
  		        cout<<"Pythia is enabled!"<<endl;
-// 			return true;
+ 			return true;
 #else
 			printWarn << "Starlight is not compiled against Pythia8; "
 			          << "jetset event channel cannot be used." << endl;
