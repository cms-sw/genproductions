#!/bin/bash

[ "${SCRAM_RUNTIME_TYPE}" != "BUILD" ] || exit 0
[ $(uname -m) = "x86_64" ] || exit 0
#No need to overirde LD_LIBRARY_PATH if SCRAM_TARGET is not set or set to "default"
if  [ "${SCRAM_TARGET}" = "" ] ; then
  SCRAM_TARGET="$(${SCRAM} tool info self | grep '^SCRAM_TARGET=' | sed 's|.*=||')"
fi
if [ "${SCRAM_TARGET}" = "" ] || [ "${SCRAM_TARGET}" = "default" ] ; then exit 0 ; fi

nocona=""
core2="nocona ${nocona}"
nehalem="core2 ${core2}"
westmere="nehalem ${nehalem}"
bonnell="core2 ${core2}"
silvermont="westmere bonnell ${westmere} ${bonnell}"
sandybridge="westmere ${westmere}"
ivybridge="sandybridge ${sandybridge}"
haswell="bonnell ivybridge ${bonnell} ${ivybridge}"
skylake="silvermont haswell ${silvermont} ${haswell}"
skylake_avx512="skylake ${skylake}"
cascadelake="skylake-avx512 ${skylake_avx512}"
cannonlake="skylake ${skylake}"
icelake_client="cascadelake cannonlake ${cascadelake} ${cannonlake}"
icelake_server="icelake-client ${icelake_client}"
tigerlake="icelake-server ${icelake_server}"
goldmont="silvermont ${silvermont}"
cooperlake="cascadelake ${cascadelake}"
sapphirerapids="cooperlake ${cooperlake}"
broadwell="silvermont haswell ${silvermont} ${haswell}"
goldmont_plus="goldmont ${goldmont}"
knl="silvermont haswell ${silvermont} ${haswell}"
knm="knl ${knl}"
alderlake="skylake ${skylake}"
tremont="goldmont-plus ${goldmont_plus}"

if [ "${SCRAM}" = "" ] ; then SCRAM=scram ; fi
LD_ENV=$(${SCRAM} tool info gcc-cxxcompiler | grep '^LD_LIBRARY_PATH='):${LD_LIBRARY_PATH}
PATH_ENV=$(${SCRAM} tool info gcc-cxxcompiler | grep '^PATH='):${PATH}
eval "export $LD_ENV; export $PATH_ENV"
NATIVE_ARCH=$(gcc -march=native -Q --help=target | grep -- '^ *-march=' | sed 's|.*=\s*||')
SUPPORTED_ARCHS="$(${SCRAM} tool info self | grep '^SCRAM_TARGETS+=' | sed 's|.*=||')"
[ "${NATIVE_ARCH}" = "" ] && exit 0
[ "${SUPPORTED_ARCHS}" = "" ] && exit 0

SEL_TARGET="${SCRAM_TARGET}"
if [ "${SCRAM_TARGET}" = "auto" ] ; then SEL_TARGET="${NATIVE_ARCH}" ; fi
MATCHED_TARGET=""
for t in ${SEL_TARGET} $(eval echo \$$(echo ${SEL_TARGET} | tr - _ )) ; do
  if [ $(echo " ${SUPPORTED_ARCHS} " | grep " ${t} " | wc -l) -eq 1 ] ; then
    if [ "${SCRAM_TARGET}" != "auto" ] ; then
      if [ "${SCRAM_TARGET}" != "${t}" ] ; then
        echo "WARNING: Target ${SCRAM_TARGET} requested but best match found is ${t} from the available supported targets '${SUPPORTED_ARCHS}'." 1>&2
      fi
    fi
    MATCHED_TARGET=$t
    break
  fi
done
if [ "${MATCHED_TARGET}" = "" ] ; then
  echo "WARNING: Native target ${NATIVE_ARCH} does not match any of the supported targets '${SUPPORTED_ARCHS}'. Using default target." 1>&2
  exit 0
fi

echo "IMPORTANT: Setting CMSSW environment to use '${MATCHED_TARGET}' target." 1>&2
for d in $(${SCRAM} tool tag self LIBDIR) ; do
  v=""
  case $d in
    ${LOCALTOP}/* ) v=$d ;;
    * ) if [ -d $d/${MATCHED_TARGET} ] ; then v=$d ; fi ;;
  esac
  if [ $v ] ; then
    echo "RUNTIME:path:replace:LD_LIBRARY_PATH=$d=$d/${MATCHED_TARGET}:$d"
  fi
done
