      SUBROUTINE MP_COMPUTE_LOOP_COEFS(PS,ANSDP)
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities for the point in phase space P(0:3,NEXTERNAL)
C     and external lines W(0:6,NEXTERNAL)
C     
C     Process: g g > w- t b~ QED=1 QCD=2 [ virt = QCD ] WEIGHTED=10
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      CHARACTER*64 PARAMFILENAME
      PARAMETER ( PARAMFILENAME='MadLoopParams.dat')
      INTEGER NBORNAMPS
      PARAMETER (NBORNAMPS=8)
      INTEGER    NLOOPS, NLOOPGROUPS, NCTAMPS
      PARAMETER (NLOOPS=162, NLOOPGROUPS=77, NCTAMPS=252)
      INTEGER    NCOLORROWS
      PARAMETER (NCOLORROWS=414)
      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=5)
      INTEGER    NWAVEFUNCS,NLOOPWAVEFUNCS
      PARAMETER (NWAVEFUNCS=28,NLOOPWAVEFUNCS=300)
      INTEGER MAXLWFSIZE
      PARAMETER (MAXLWFSIZE=4)
      INTEGER LOOPMAXCOEFS, VERTEXMAXCOEFS
      PARAMETER (LOOPMAXCOEFS=70, VERTEXMAXCOEFS=5)
      INTEGER    NCOMB
      PARAMETER (NCOMB=48)
      REAL*16    ZERO
      PARAMETER (ZERO=0E0_16)
      COMPLEX*32 IMAG1
      PARAMETER (IMAG1=(0E0_16,1E0_16))
C     
C     ARGUMENTS 
C     
      REAL*16 PS(0:3,NEXTERNAL)
      REAL*8 ANSDP(3)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,K,H,DUMMY
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      REAL*16 P(0:3,NEXTERNAL)
      DATA IC/NEXTERNAL*1/
      REAL*16 ANS(3)
      COMPLEX*32 COEFS(MAXLWFSIZE,0:VERTEXMAXCOEFS-1,MAXLWFSIZE)
      COMPLEX*32 CFTOT
C     
C     GLOBAL VARIABLES
C     
      INCLUDE 'mp_coupl_same_name.inc'

      LOGICAL CHECKPHASE, HELDOUBLECHECKED
      COMMON/INIT/CHECKPHASE, HELDOUBLECHECKED

      INTEGER HELOFFSET
      INTEGER GOODHEL(NCOMB)
      LOGICAL GOODAMP(NLOOPGROUPS)
      COMMON/FILTERS/GOODAMP,GOODHEL,HELOFFSET

      INTEGER HELPICKED
      COMMON/HELCHOICE/HELPICKED

      COMPLEX*32 AMP(NBORNAMPS)
      COMMON/MP_AMPS/AMP
      COMPLEX*32 W(20,NWAVEFUNCS)
      COMMON/MP_W/W

      COMPLEX*16 DPW(20,NWAVEFUNCS)
      COMMON/W/DPW

      COMPLEX*32 WL(MAXLWFSIZE,0:LOOPMAXCOEFS-1,MAXLWFSIZE,0:NLOOPWAVEF
     $ UNCS)
      COMPLEX*32 PL(0:3,0:NLOOPWAVEFUNCS)
      COMMON/MP_WL/WL,PL

      COMPLEX*32 LOOPCOEFS(0:LOOPMAXCOEFS-1,NLOOPS)
      COMMON/MP_LCOEFS/LOOPCOEFS

      COMPLEX*32 AMPL(3,NCTAMPS)
      COMMON/MP_AMPL/AMPL

      INTEGER CF_D(NCOLORROWS,NBORNAMPS)
      INTEGER CF_N(NCOLORROWS,NBORNAMPS)
      COMMON/CF/CF_D,CF_N

      INTEGER HELC(NEXTERNAL,NCOMB)
      COMMON/HELCONFIGS/HELC

      LOGICAL MP_DONE_ONCE
      COMMON/MP_DONE_ONCE/MP_DONE_ONCE

C     ----------
C     BEGIN CODE
C     ----------

C     To be on the safe side, we always update the MP params here.
C     It can be redundant as this routine can be called a couple of
C      times for the same PS point during the stability checks.
C     But it is really not time consuming and I would rather be safe.
      CALL MP_UPDATE_AS_PARAM()

      MP_DONE_ONCE = .TRUE.

C     AS A SAFETY MEASURE WE FIRST COPY HERE THE PS POINT
      DO I=1,NEXTERNAL
        DO J=0,3
          P(J,I)=PS(J,I)
        ENDDO
      ENDDO

      DO I=0,3
        PL(I,0)=(ZERO,ZERO)
      ENDDO
      DO I=1,MAXLWFSIZE
        DO J=0,LOOPMAXCOEFS-1
          DO K=1,MAXLWFSIZE
            IF(I.EQ.K.AND.J.EQ.0) THEN
              WL(I,J,K,0)=(1.0E0_16,ZERO)
            ELSE
              WL(I,J,K,0)=(ZERO,ZERO)
            ENDIF
          ENDDO
        ENDDO
      ENDDO

      DO K=1, 3
        DO I=1,NCTAMPS
          AMPL(K,I)=(ZERO,ZERO)
        ENDDO
      ENDDO

      DO I=1,NLOOPS
        DO J=0,LOOPMAXCOEFS-1
          LOOPCOEFS(J,I)=(ZERO,ZERO)
        ENDDO
      ENDDO

      DO K=1,3
        ANSDP(K)=0.0D0
        ANS(K)=ZERO
      ENDDO

      DO H=1,NCOMB
        IF ((HELPICKED.EQ.H).OR.((HELPICKED.EQ.-1).AND.(CHECKPHASE.OR.(
     $   .NOT.HELDOUBLECHECKED).OR.(GOODHEL(H).GT.-HELOFFSET.AND.GOODHE
     $   L(H).NE.0)))) THEN
          DO I=1,NEXTERNAL
            NHEL(I)=HELC(I,H)
          ENDDO
          CALL MP_HELAS_CALLS_AMPB_1(P,NHEL,H,IC)
          IF (.NOT.CHECKPHASE.AND.HELDOUBLECHECKED.AND.HELPICKED.EQ.
     $     -1) THEN
            DUMMY=GOODHEL(H)
          ELSE
            DUMMY=1
          ENDIF
          DO I=1,NCTAMPS
            DO J=1,NBORNAMPS
              CFTOT=CMPLX(CF_N(I,J)/REAL(ABS(CF_D(I,J)),KIND=16)
     $         ,0.0E0_16,KIND=16)
              IF(CF_D(I,J).LT.0) CFTOT=CFTOT*IMAG1
              DO K=1,3
                ANS(K)=ANS(K)+DUMMY*2.0E0_16*REAL(CFTOT*AMPL(K,I)
     $           *CONJG(AMP(J)),KIND=16)
              ENDDO
            ENDDO
          ENDDO
          CALL MP_COEF_CONSTRUCTION_1(P,NHEL,H,IC)
        ENDIF
      ENDDO

C     Copy the qp wfs to the dp ones as they are used to setup the CT
C      calls.
      DO I=1,NWAVEFUNCS
        DO J=1,MAXLWFSIZE+4
          DPW(J,I)=W(J,I)
        ENDDO
      ENDDO

      DO I=1,3
        ANSDP(I)=ANS(I)
      ENDDO

      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,2),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,7),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,8),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,13),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,14),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,19),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,20),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,135),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,136),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,157),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,158),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,151),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,152),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,153),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,154),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,155),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,1),2,LOOPCOEFS(0,156),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,4),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,5),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,6),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,9),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,10),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,11),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,12),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,15),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,16),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,17),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,18),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,21),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,22),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,23),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,24),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,137),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,138),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,159),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,160),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,161),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,3),3,LOOPCOEFS(0,162),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,25),1,LOOPCOEFS(0,47),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,25),1,LOOPCOEFS(0,73),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,26),2,LOOPCOEFS(0,29),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,28),2,LOOPCOEFS(0,87),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,28),2,LOOPCOEFS(0,88),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,28),2,LOOPCOEFS(0,89),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,30),2,LOOPCOEFS(0,50),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,30),2,LOOPCOEFS(0,76),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,33),2,LOOPCOEFS(0,39),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,33),2,LOOPCOEFS(0,69),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,34),3,LOOPCOEFS(0,96),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,34),3,LOOPCOEFS(0,97),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,34),3,LOOPCOEFS(0,98),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,35),1,LOOPCOEFS(0,74),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,37),2,LOOPCOEFS(0,79),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,42),2,LOOPCOEFS(0,83),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,43),1,LOOPCOEFS(0,48),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,53),2,LOOPCOEFS(0,63),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,58),3,LOOPCOEFS(0,60),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,58),3,LOOPCOEFS(0,61),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,58),3,LOOPCOEFS(0,65),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,72),2,LOOPCOEFS(0,84),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,99),2,LOOPCOEFS(0,101),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,100),1,LOOPCOEFS(0,106),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,100),1,LOOPCOEFS(0,122),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,103),2,LOOPCOEFS(0,132),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,103),2,LOOPCOEFS(0,133),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,103),2,LOOPCOEFS(0,134),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,104),1,LOOPCOEFS(0,107),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,109),1,LOOPCOEFS(0,123),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,110),2,LOOPCOEFS(0,126),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,111),2,LOOPCOEFS(0,128),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,113),2,LOOPCOEFS(0,121),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,114),3,LOOPCOEFS(0,115),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,114),3,LOOPCOEFS(0,117),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,114),3,LOOPCOEFS(0,118),3)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,125),2,LOOPCOEFS(0,129),2)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,139),1,LOOPCOEFS(0,140),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,139),1,LOOPCOEFS(0,141),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,139),1,LOOPCOEFS(0,142),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,139),1,LOOPCOEFS(0,143),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,139),1,LOOPCOEFS(0,144),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,145),1,LOOPCOEFS(0,146),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,145),1,LOOPCOEFS(0,147),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,145),1,LOOPCOEFS(0,148),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,145),1,LOOPCOEFS(0,149),1)
      CALL MP_ADD_COEFS(LOOPCOEFS(0,145),1,LOOPCOEFS(0,150),1)

      END

