CXXMODULES_DIR:=$(SCRAMSTORENAME_INCLUDE)/$(SCRAM_ARCH)/cxxmodules
CXXMODULES_DIR_RELPAH:=$(shell $(CMD_echo) $(CXXMODULES_DIR) | $(CMD_sed) 's|[a-zA-Z0-9_-]*|..|g')
MODULEMAP_EXT:=modulemap
MODULEMAP_FILE:=module.$(MODULEMAP_EXT)
DEPENDENCY_ORDER_FUNCTION_ROOTPCMS:=SetRootPCMSRules
EXTRA_TOP_LEVEL_BUILD_RULES+=ExtraPCMsRules
MODULEMAP_BASE_DIR:=$(strip $(if $(strip $(RELEASETOP)),$(RELEASETOP),$(FULL_RELEASE_FOR_A_PATCH)))

Tool_DirectDependencyPCMS=$(foreach l,$(foreach u,$($(1)_LOC_USE),$($(u))),$(if $(strip $(filter 0,$($(l)_CXXMODULES))),$(foreach p,$($(l)_LCGDICTS) $($(l)_ROOTDICTS),-m $(l)_$(p)r_rdict.pcm))) \
                       $(foreach u,$($(1)_LOC_USE_ALL),$(foreach p,$($(u)_EX_FLAGS_PCMS),-m lib$(p)_rdict.pcm))

define generate_full_modulemap
 $(CMD_echo) ">> Generating ModuleMap $@" &&\
 $(CMD_mkdir) -p  $(@D) &&\
 $(CMD_rm) -f $@ &&\
 for m in $$($(CMD_find) $(CXXMODULES_DIR) -name '*.$(MODULEMAP_EXT)') ; do \
   $(CMD_cat) $$m >> $@;\
 done ;\
 $(CMD_touch) $@
endef

define ExtraPCMsRules
.PHONY: cxxmodules
ifneq ($(strip $(ALL_MODULEMAPS)),)
ifneq ($(strip $(CMSSW_CLING_MODULEMAP_FILE)),)
export CLING_MODULEMAP_FILES:=$(LOCALTOP)/$(CXXMODULES_DIR)/$(MODULEMAP_FILE):$(subst $(space),$(colon),$(filter-out $(CMSSW_CLING_MODULEMAP_FILE),$(subst $(colon),$(space),$(CLING_MODULEMAP_FILES))))
endif
$(CXXMODULES_DIR)/$(MODULEMAP_FILE): $(ALL_MODULEMAPS)
	@if [ -e $(MODULEMAP_BASE_DIR)/$(CXXMODULES_DIR) ] ; then \
	  for m in $$$$($(CMD_find) $(MODULEMAP_BASE_DIR)/$(CXXMODULES_DIR) -name '*.$(MODULEMAP_EXT)') ; do \
	    LOC_MAP=$$$$($(CMD_echo) $$$$m | $(CMD_sed) -e 's|$(MODULEMAP_BASE_DIR)/||') &&\
	    [ ! -e $$$$LOC_MAP ] || continue ;\
	    $(CMD_sed) -e 's|"$(CXXMODULES_DIR_RELPAH)/src/|"$(MODULEMAP_BASE_DIR)/src/|' $$$$m > $$$$LOC_MAP;\
	    $(CMD_touch) -t $(OLD_TIMESTAMP) $$$$LOC_MAP;\
	  done ;\
	fi
	@$$(call generate_full_modulemap)
cxxmodules: $(filter lib/$(SCRAM_ARCH)/$(patsubst /%,%,$(subst src,,$(THISDIR)))%,$(ALL_PCMS))
	@:
else
.PHONY: $(CXXMODULES_DIR)/$(MODULEMAP_FILE)
$(CXXMODULES_DIR)/$(MODULEMAP_FILE):
	@:
cxxmodules:
	@:
endif
endef

define SetRootPCMSRules
$(WORKINGDIR)/rootpcms/$1: $(foreach l,$($(1)_LOC_USE) $($(1)_LOC_FLAGS_USE_SOURCE_ONLY),$(WORKINGDIR)/rootpcms/$($l))
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
endef

define lcg_included_headers
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_echo) ">> Searching already included headers in $<" &&\
  $(CMD_grep) '"$($(1)_PROD_PACKAGE)/interface/' $< | $(CMD_grep) '^ *#include *"' | $(CMD_sed) 's|.*include *"||;s|".*||' | $(CMD_sort) | $(CMD_uniq) > $@
endef

define lcg_ignored_headers
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $@ && $(CMD_touch) $@ &&\
  $(CMD_echo) $($(1)_LOC_FLAGS_IGNORE_MODULE_FILE) | $(CMD_tr) ' ' '\n' | $(CMD_xargs) -i $(CMD_echo) '.*/{}' >> $@
endef

define lcg_all_headers
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_echo) ">> Searching all header under $($(1)_PROD_PACKAGE)/interface" &&\
  if [ -e $(SCRAM_SOURCEDIR)/$($(1)_PROD_PACKAGE)/interface ] ; then \
    $(CMD_find) $(SCRAM_SOURCEDIR)/$($(1)_PROD_PACKAGE)/interface -maxdepth 1 -name '*.h' | $(CMD_sed) 's|^$(SCRAM_SOURCEDIR)/||' > $@ ;\
  else \
    $(CMD_touch) $@ ;\
  fi
endef

define lcg_full_header
  $(CMD_cp) -P $< $@ && $(CMD_echo) ">> Adding remaining headers in $<" &&\
  $(CMD_grep) -v -f $(@D)/$(2)r.ignore -f $(@D)/$(2)r.included $(@D)/$(2)r.all | $(CMD_sort) | $(CMD_xargs) -i $(CMD_echo) '#include "{}"' >> $@
endef

#LCG Module map
define generate_modulemap
  $(CMD_echo) ">> Generated modulemap for $($(1)_PROD_PACKAGE)" &&\
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) "module \"$(1)\" {" > $@ &&\
  $(CMD_echo) "  requires cplusplus" >> $@ &&\
  for inc in `$(CMD_grep) '"$($(1)_PROD_PACKAGE)/interface/' $< | $(CMD_grep) -v -f $(3)/$(2)r.ignore | $(CMD_grep) '^ *# *include *"' | $(CMD_sed) 's|.*include *"||;s|".*||' | $(CMD_sort) | $(CMD_uniq)`; do \
    hdr=`$(CMD_echo) $$inc | $(CMD_sed) 's|.*/||'` ;\
    $(CMD_echo) "  module \"$$hdr\" { header \"$(CXXMODULES_DIR_RELPAH)/$(SCRAM_SOURCEDIR)/$$inc\" export * }" >> $@ ;\
  done &&\
  $(CMD_echo) "  link \"$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $($(1)_EXTRA_LIBS)\" " >> $@ &&\
  $(CMD_echo) "  export *" >> $@ &&\
  $(CMD_echo) "}" >> $@
endef

define generate_classes_all_h
  [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) Generating $@&&\
  $(CMD_cat) $? > $@
endef

define generate_classes_all_def_xml
  [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) Generating $@ &&\
  $(CMD_echo) '<lcgdict>' > $@.tmp &&\
  $(CMD_cat) $? | sed 's|<lcgdict>||i;s|</lcgdict>||i' >> $@.tmp &&\
  $(CMD_echo) '</lcgdict>' >> $@.tmp &&\
  $(CMD_mv) $@.tmp $@
endef

define generate_lcgdict_cxxmodule1
  $(startlog_$(2))[ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $@ &&\
  $(CMD_echo) ">> Building CXX Module LCG reflex dict from header file $(patsubst $(LOCALTOP)/%,%,$4)" &&\
  $(VERB_ECHO)                $(ROOTCLING) -reflex -f $@ -s $(@D)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $($(5)_GENREFLEX_ARGS) $(call Tool_DirectDependencyPCMS,$1) $(GENREFLEX_CPPFLAGS) -moduleMapFile=$(LOCALTOP)/$(CXXMODULES_DIR)/$(MODULEMAP_FILE) $(call Tool_ROOTCLING_ARGS,$1) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS) $(4) $(3) &&\
  (($(SCRAM_GENREFLEX_PREFIX) $(ROOTCLING) -reflex -f $@ -s $(@D)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $($(5)_GENREFLEX_ARGS) $(call Tool_DirectDependencyPCMS,$1) $(GENREFLEX_CPPFLAGS) -moduleMapFile=$(LOCALTOP)/$(CXXMODULES_DIR)/$(MODULEMAP_FILE) $(call Tool_ROOTCLING_ARGS,$1) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS) $(4) $(3) &&\
    if [ -f $(@D)/_Builtin_intrinsics.pcm ] ; then \
      mv $(@D)/_Builtin_intrinsics.pcm $(6)/;\
    fi &&\
    if [ `$(CMD_ls) $(@D)/*.pcm | $(CMD_grep) -v '/$(1).pcm' | wc -l` -gt 0 ] ; then \
      $(CMD_echo) "*** ERROR:$1: Generated PCM for other packages" ; $(CMD_ls) $(@D)/*.pcm | $(CMD_grep) -v '/$(1).pcm' ; \
    fi &&\
    $(CMD_touch) -r $@ $(@D)/$(1).pcm && $(CMD_mv) $(@D)/$(1).pcm $(6)/) || ($(CMD_rm) -f $@ && exit 1)) \
  $(endlog_$(2))
endef

define pcm_header_rules1
$(1)_GENREFLEX_ARGS := -cxxmodule $($(1)_GENREFLEX_ARGS)
ifneq ($(strip $(words $2)),1)
$1_lcg_header:=$($(1)_objdir)/$(LCGDICT_SUBDIR)/$(1)_all.h
$1_lcg_def_xml:=$($(1)_objdir)/$(LCGDICT_SUBDIR)/$(1)_all_def.xml
$1_LCGDICTS:=x
$($(1)_objdir)/$(LCGDICT_SUBDIR)/$(1)_all.h: $2 $($(1)_config)
	@$$(call generate_classes_all_h,$1,$2)
$($(1)_objdir)/$(LCGDICT_SUBDIR)/$(1)_all_def.xml: $3 $($(1)_config)
	@$$(call generate_classes_all_def_xml,$1,$3)
endif
endef

define pcm_build_rules1
DEPENDENCY_ORDER_VARIABLES+=ROOTPCMS
$(1)_pcm_name:=$(1).pcm
$(2)r_header:=$($(1)_objdir)/$(6)/$(2)r.h
ALL_MODULEMAPS+=$(CXXMODULES_DIR)/$(1).$(MODULEMAP_EXT)
$(CXXMODULES_DIR)/$(1).$(MODULEMAP_EXT): $($(1)_objdir)/$(6)/$(2)r.h
	@$$(call generate_modulemap,$1,$2,$($(1)_objdir)/$(6))
$($(1)_objdir)/$(6)/$(2)r.cc: $($(1)_objdir)/$(6)/$(2)r.h | $(CXXMODULES_DIR)/$(MODULEMAP_FILE)
$($(1)_objdir)/$(6)/$(2)r.included: $3 $($(1)_config)
	@$$(call lcg_included_headers,$1)
$($(1)_objdir)/$(6)/$(2)r.ignore: $($(1)_config)
	@$$(call lcg_ignored_headers,$1)
$($(1)_objdir)/$(6)/$(2)r.all: $(wildcard $(SCRAM_SOURCEDIR)/$($(1)_PROD_PACKAGE)/interface) $($(1)_config)
	@$$(call lcg_all_headers,$1)
$($(1)_objdir)/$(6)/$(2)r.h: $3 $($(1)_objdir)/$(6)/$(2)r.included $($(1)_objdir)/$(6)/$(2)r.all $($(1)_objdir)/$(6)/$(2)r.ignore
	@$$(call lcg_full_header,$1,$2)
endef

-include $(SCRAM_CONFIGDIR)/SCRAM/GMake/CXXModules.mk
