      DOUBLE PRECISION FUNCTION DSIG(PP,WGT,IMODE)
C     ****************************************************
C     
C     Generated by MadGraph5_aMC@NLO v. 2.9.18, 2023-12-08
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Process: u u > e+ e- u u QCD=0 QED<=4 $ t t~ h @1
C     Process: u u > mu+ mu- u u QCD=0 QED<=4 $ t t~ h @1
C     Process: c c > e+ e- c c QCD=0 QED<=4 $ t t~ h @1
C     Process: c c > mu+ mu- c c QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d > e+ e- d d QCD=0 QED<=4 $ t t~ h @1
C     Process: d d > mu+ mu- d d QCD=0 QED<=4 $ t t~ h @1
C     Process: s s > e+ e- s s QCD=0 QED<=4 $ t t~ h @1
C     Process: s s > mu+ mu- s s QCD=0 QED<=4 $ t t~ h @1
C     Process: b b > e+ e- b b QCD=0 QED<=4 $ t t~ h @1
C     Process: b b > mu+ mu- b b QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ u~ > e+ e- u~ u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ u~ > mu+ mu- u~ u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ c~ > e+ e- c~ c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ c~ > mu+ mu- c~ c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ d~ > e+ e- d~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ d~ > mu+ mu- d~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ s~ > e+ e- s~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ s~ > mu+ mu- s~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b~ b~ > e+ e- b~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b~ b~ > mu+ mu- b~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > e+ e- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > mu+ mu- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > e+ e- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > mu+ mu- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > e+ e- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > mu+ mu- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > e+ e- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > mu+ mu- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > e+ e- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > mu+ mu- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > e+ e- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > mu+ mu- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > e+ e- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > mu+ mu- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > e+ e- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > mu+ mu- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > e+ e- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > mu+ mu- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > e+ e- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > mu+ mu- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > e+ e- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > mu+ mu- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > e+ e- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > mu+ mu- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > e+ e- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > mu+ mu- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > e+ e- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > mu+ mu- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > e+ e- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > mu+ mu- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > e+ e- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > mu+ mu- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > e+ e- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > mu+ mu- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > e+ e- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > mu+ mu- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > e+ e- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > mu+ mu- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > e+ e- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > mu+ mu- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > e+ e- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > mu+ mu- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > e+ e- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > mu+ mu- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > e+ e- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > mu+ mu- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > e+ e- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > mu+ mu- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c > e+ e- u c QCD=0 QED<=4 $ t t~ h @1
C     Process: u c > mu+ mu- u c QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s > e+ e- d s QCD=0 QED<=4 $ t t~ h @1
C     Process: d s > mu+ mu- d s QCD=0 QED<=4 $ t t~ h @1
C     Process: d b > e+ e- d b QCD=0 QED<=4 $ t t~ h @1
C     Process: d b > mu+ mu- d b QCD=0 QED<=4 $ t t~ h @1
C     Process: s b > e+ e- s b QCD=0 QED<=4 $ t t~ h @1
C     Process: s b > mu+ mu- s b QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > e+ e- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > mu+ mu- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > e+ e- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > mu+ mu- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > e+ e- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > mu+ mu- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > e+ e- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > mu+ mu- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ c~ > e+ e- u~ c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ c~ > mu+ mu- u~ c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ s~ > e+ e- d~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ s~ > mu+ mu- d~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b~ > e+ e- d~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b~ > mu+ mu- d~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b~ > e+ e- s~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b~ > mu+ mu- s~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > e+ e- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > mu+ mu- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > e+ e- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > mu+ mu- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > e+ e- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > mu+ mu- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > e+ e- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > mu+ mu- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > e+ e- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > mu+ mu- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > e+ e- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > mu+ mu- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > e+ e- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > mu+ mu- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > e+ e- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > mu+ mu- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > e+ e- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > mu+ mu- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > e+ e- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: u d > mu+ mu- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > e+ e- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > mu+ mu- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > e+ e- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > mu+ mu- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > e+ e- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > mu+ mu- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > e+ e- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: u s > mu+ mu- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > e+ e- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > mu+ mu- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- s s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > e+ e- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u u~ > mu+ mu- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- s d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- s b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u c~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > e+ e- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > mu+ mu- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > e+ e- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > mu+ mu- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > e+ e- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > mu+ mu- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > e+ e- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > mu+ mu- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > e+ e- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > mu+ mu- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > e+ e- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > mu+ mu- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > e+ e- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > mu+ mu- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > e+ e- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > mu+ mu- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > e+ e- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u d~ > mu+ mu- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > e+ e- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c s~ > mu+ mu- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > e+ e- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > e+ e- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > mu+ mu- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > mu+ mu- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > e+ e- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > mu+ mu- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > e+ e- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > mu+ mu- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > e+ e- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u s~ > mu+ mu- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > e+ e- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > mu+ mu- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > e+ e- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > mu+ mu- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > e+ e- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > mu+ mu- u s QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > e+ e- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > mu+ mu- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > e+ e- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > mu+ mu- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > e+ e- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > mu+ mu- c s QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > e+ e- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: u b > mu+ mu- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > e+ e- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > e+ e- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > mu+ mu- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > mu+ mu- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > e+ e- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > mu+ mu- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > e+ e- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > mu+ mu- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > e+ e- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u b~ > mu+ mu- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > e+ e- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > mu+ mu- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > e+ e- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > mu+ mu- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > e+ e- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > mu+ mu- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > e+ e- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > mu+ mu- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > e+ e- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: c d > mu+ mu- c b QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > e+ e- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > mu+ mu- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > e+ e- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: c s > mu+ mu- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- d d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- d s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- b s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > e+ e- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c u~ > mu+ mu- b b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- d b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > e+ e- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c c~ > mu+ mu- b d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > e+ e- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > e+ e- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > mu+ mu- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > mu+ mu- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > e+ e- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > mu+ mu- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > e+ e- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > mu+ mu- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > e+ e- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c d~ > mu+ mu- c b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > e+ e- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > mu+ mu- u d QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > e+ e- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > mu+ mu- u b QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > e+ e- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c b > mu+ mu- c d QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > e+ e- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > e+ e- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > mu+ mu- u d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > mu+ mu- c s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > e+ e- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > mu+ mu- u s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > e+ e- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > mu+ mu- u b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > e+ e- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c b~ > mu+ mu- c d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > e+ e- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > mu+ mu- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > e+ e- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > mu+ mu- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > e+ e- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > mu+ mu- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > e+ e- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > mu+ mu- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > e+ e- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > mu+ mu- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > e+ e- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > mu+ mu- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > e+ e- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > mu+ mu- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > e+ e- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > mu+ mu- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > e+ e- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d u~ > mu+ mu- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > e+ e- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s c~ > mu+ mu- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > e+ e- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > e+ e- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > mu+ mu- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > mu+ mu- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > e+ e- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > mu+ mu- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > e+ e- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > mu+ mu- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > e+ e- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d c~ > mu+ mu- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d d~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d s~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d b~ > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > e+ e- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > e+ e- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > mu+ mu- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > mu+ mu- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > e+ e- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > mu+ mu- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > e+ e- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > mu+ mu- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > e+ e- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s u~ > mu+ mu- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s s~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s d~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s b~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > e+ e- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > mu+ mu- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > e+ e- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > mu+ mu- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > e+ e- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > mu+ mu- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > e+ e- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > mu+ mu- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > e+ e- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > mu+ mu- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > e+ e- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > mu+ mu- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > e+ e- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > mu+ mu- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > e+ e- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ d~ > mu+ mu- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > e+ e- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > mu+ mu- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > e+ e- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > mu+ mu- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > e+ e- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > mu+ mu- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > e+ e- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ s~ > mu+ mu- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > e+ e- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > mu+ mu- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > e+ e- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > e+ e- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > mu+ mu- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > mu+ mu- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > e+ e- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > mu+ mu- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > e+ e- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > mu+ mu- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > e+ e- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b > mu+ mu- b c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > e+ e- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > mu+ mu- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > e+ e- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > mu+ mu- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > e+ e- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > mu+ mu- u~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > e+ e- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > mu+ mu- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > e+ e- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > mu+ mu- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > e+ e- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > mu+ mu- c~ s~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > e+ e- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: u~ b~ > mu+ mu- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > e+ e- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > mu+ mu- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > e+ e- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > mu+ mu- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > e+ e- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > mu+ mu- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > e+ e- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > mu+ mu- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > e+ e- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ d~ > mu+ mu- c~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > e+ e- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > mu+ mu- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > e+ e- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ s~ > mu+ mu- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > e+ e- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > e+ e- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > mu+ mu- d u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > mu+ mu- s c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > e+ e- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > mu+ mu- d c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > e+ e- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > mu+ mu- s u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > e+ e- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b > mu+ mu- b u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > e+ e- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > mu+ mu- u~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > e+ e- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > mu+ mu- u~ b~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > e+ e- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: c~ b~ > mu+ mu- c~ d~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > e+ e- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: d~ b > mu+ mu- c c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > e+ e- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > mu+ mu- u u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: s~ b > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- u c~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > e+ e- c u~ QCD=0 QED<=4 $ t t~ h @1
C     Process: b b~ > mu+ mu- c u~ QCD=0 QED<=4 $ t t~ h @1
C     
C     RETURNS DIFFERENTIAL CROSS SECTION 
C     FOR MULTIPLE PROCESSES IN PROCESS GROUP
C     Input:
C     pp    4 momentum of external particles
C     wgt   weight from Monte Carlo
C     imode 0 run, 1 init, 2 reweight,
C     3 finalize, 4 only PDFs
C     Output:
C     Amplitude squared and summed
C     ****************************************************
      USE DISCRETESAMPLER
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      REAL*8     PI
      PARAMETER (PI=3.1415926D0)
C     
C     ARGUMENTS 
C     
      DOUBLE PRECISION PP(0:3,NEXTERNAL), WGT
      INTEGER IMODE
C     
C     LOCAL VARIABLES 
C     
      INTEGER LMAPPED
      INTEGER I,J,K,LUN,ICONF,IMIRROR,NPROC
      SAVE NPROC
      INTEGER SYMCONF(0:LMAXCONFIGS)
      SAVE SYMCONF
      DOUBLE PRECISION SUMPROB,TOTWGT,R,XDUM
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER PERMS(NEXTERNAL,LMAXCONFIGS)
      INCLUDE 'symperms.inc'
      LOGICAL MIRRORPROCS(MAXSPROC)
      INCLUDE 'mirrorprocs.inc'
C     SELPROC is vector of selection weights for the subprocesses
C     SUMWGT is vector of total weight for the subprocesses
C     NUMEVTS is vector of event calls for the subprocesses
      DOUBLE PRECISION SELPROC(2, MAXSPROC,LMAXCONFIGS)
      DOUBLE PRECISION SUMWGT(2, MAXSPROC,LMAXCONFIGS)
      INTEGER NUMEVTS(2, MAXSPROC,LMAXCONFIGS)
      INTEGER LARGEDIM
      PARAMETER (LARGEDIM=2*MAXSPROC*LMAXCONFIGS)
      DATA SELPROC/LARGEDIM*0D0/
      DATA SUMWGT/LARGEDIM*0D0/
      DATA NUMEVTS/LARGEDIM*0/
      SAVE SELPROC,SUMWGT,NUMEVTS
      REAL*8 MC_GROUPED_PROC_JACOBIAN
      INTEGER GROUPED_MC_GRID_STATUS
C     
C     EXTERNAL FUNCTIONS
C     
      INTEGER NEXTUNOPEN
      DOUBLE PRECISION DSIGPROC
      EXTERNAL NEXTUNOPEN,DSIGPROC
C     
C     GLOBAL VARIABLES
C     
      INTEGER NB_SPIN_STATE(2)
      DATA  NB_SPIN_STATE /2,2/
      COMMON /NB_HEL_STATE/ NB_SPIN_STATE

      INCLUDE 'coupl.inc'
      INCLUDE 'run.inc'
C     ICONFIG has this config number
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
C     IPROC has the present process number
      INTEGER IPROC
      COMMON/TO_MIRROR/IMIRROR, IPROC
C     CM_RAP has parton-parton system rapidity
      DOUBLE PRECISION CM_RAP
      LOGICAL SET_CM_RAP
      COMMON/TO_CM_RAP/SET_CM_RAP,CM_RAP
C     Keep track of whether cuts already calculated for this event
      LOGICAL CUTSDONE,CUTSPASSED
      COMMON/TO_CUTSDONE/CUTSDONE,CUTSPASSED
C     To be able to control when the matrix<i> subroutine can add
C      entries to the grid for the MC over helicity configuration
      LOGICAL ALLOW_HELICITY_GRID_ENTRIES
      DATA ALLOW_HELICITY_GRID_ENTRIES/.TRUE./
      COMMON/TO_ALLOW_HELICITY_GRID_ENTRIES/ALLOW_HELICITY_GRID_ENTRIES
C     To limit the number of calls to switchmom, use in DSIGPROC the
C      cached variable last_iconfig. It is in this subroutine as well
C      so that we can set it to -1 to ignore caching (to prevent
C      undesired effect if this subroutine is called from elsewhere
C      and to 0 to reset the cache.
      INTEGER LAST_ICONF
      DATA LAST_ICONF/-1/
      COMMON/TO_LAST_ICONF/LAST_ICONF

      LOGICAL INIT_MODE
      COMMON /TO_DETERMINE_ZERO_HEL/INIT_MODE
C     ----------
C     BEGIN CODE
C     ----------
      DSIG=0D0

C     Make sure cuts are evaluated for first subprocess
      CUTSDONE=.FALSE.
      CUTSPASSED=.FALSE.

      IF(IMODE.EQ.1)THEN
C       Set up process information from file symfact
        LUN=NEXTUNOPEN()
        IPROC=1
        SYMCONF(IPROC)=ICONFIG
        OPEN(UNIT=LUN,FILE='../symfact.dat',STATUS='OLD',ERR=20)
        DO WHILE(.TRUE.)
          READ(LUN,*,ERR=10,END=10) XDUM, ICONF
          IF(ICONF.EQ.-MAPCONFIG(ICONFIG))THEN
            IPROC=IPROC+1
            SYMCONF(IPROC)=INT(XDUM)
          ENDIF
        ENDDO
 10     SYMCONF(0)=IPROC
        CLOSE(LUN)
        RETURN
 20     SYMCONF(0)=IPROC
        WRITE(*,*)'Error opening symfact.dat. No permutations used.'
        RETURN
      ELSE IF(IMODE.EQ.2)THEN
C       Output weights and number of events
        SUMPROB=0D0
        DO J=1,SYMCONF(0)
          DO I=1,MAXSPROC
            DO K=1,2
              SUMPROB=SUMPROB+SUMWGT(K,I,J)
            ENDDO
          ENDDO
        ENDDO
        WRITE(*,*)'Relative summed weights:'
        IF (SUMPROB.NE.0D0)THEN
          DO J=1,SYMCONF(0)
            WRITE(*,'(342E12.4)')((SUMWGT(K,I,J)/SUMPROB,K=1,2),I=1
     $       ,MAXSPROC)
          ENDDO
        ENDIF
        SUMPROB=0D0
        DO J=1,SYMCONF(0)
          DO I=1,MAXSPROC
            DO K=1,2
              SUMPROB=SUMPROB+NUMEVTS(K,I,J)
            ENDDO
          ENDDO
        ENDDO
        WRITE(*,*)'Relative number of events:'
        IF (SUMPROB.NE.0D0)THEN
          DO J=1,SYMCONF(0)
            WRITE(*,'(342E12.4)')((NUMEVTS(K,I,J)/SUMPROB,K=1,2),I=1
     $       ,MAXSPROC)
          ENDDO
        ENDIF
        WRITE(*,*)'Events:'
        DO J=1,SYMCONF(0)
          WRITE(*,'(342I12)')((NUMEVTS(K,I,J),K=1,2),I=1,MAXSPROC)
        ENDDO
C       Reset weights and number of events
        DO J=1,SYMCONF(0)
          DO I=1,MAXSPROC
            DO K=1,2
              NUMEVTS(K,I,J)=0
              SUMWGT(K,I,J)=0D0
            ENDDO
          ENDDO
        ENDDO
        RETURN
      ELSE IF(IMODE.EQ.3)THEN
C       No finalize needed
        RETURN
      ENDIF

C     IMODE.EQ.0, regular run mode
      IF(MC_GROUPED_SUBPROC.AND.DS_GET_DIM_STATUS('grouped_processes')
     $ .EQ.-1) THEN
        CALL DS_REGISTER_DIMENSION('grouped_processes', 0)
        CALL DS_SET_MIN_POINTS(10,'grouped_processes')
        DO J=1,SYMCONF(0)
          DO IPROC=1,MAXSPROC
            IF(INIT_MODE.OR.CONFSUB(IPROC,SYMCONF(J)).NE.0) THEN
              DO IMIRROR=1,2
                IF(IMIRROR.EQ.1.OR.MIRRORPROCS(IPROC))THEN
                  CALL MAP_3_TO_1(J,IPROC,IMIRROR,MAXSPROC,2,LMAPPED)
                  CALL DS_ADD_BIN('grouped_processes',LMAPPED)
                ENDIF
              ENDDO
            ENDIF
          ENDDO
        ENDDO
      ENDIF
      IF(MC_GROUPED_SUBPROC.AND.DS_DIM_INDEX(RUN_GRID,
     $  'PDF_convolution',.TRUE.).EQ.-1) THEN
        CALL DS_REGISTER_DIMENSION('PDF_convolution', 0,
     $    ALL_GRIDS=.FALSE.)
      ENDIF

C     Select among the subprocesses based on PDF weight
      SUMPROB=0D0
C     Turn caching on in dsigproc to avoid too many calls to switchmom
      LAST_ICONF=0
      DO J=1,SYMCONF(0)
        DO IPROC=1,MAXSPROC
          IF(INIT_MODE.OR.CONFSUB(IPROC,SYMCONF(J)).NE.0) THEN
            DO IMIRROR=1,2
              IF(IMIRROR.EQ.1.OR.MIRRORPROCS(IPROC))THEN
C               Calculate PDF weight for all subprocesses
                SELPROC(IMIRROR,IPROC,J)=DSIGPROC(PP,J,IPROC,IMIRROR
     $           ,SYMCONF,CONFSUB,1D0,4)
                IF(MC_GROUPED_SUBPROC) THEN
                  CALL MAP_3_TO_1(J,IPROC,IMIRROR,MAXSPROC,2,LMAPPED)
                  CALL DS_ADD_ENTRY('PDF_convolution',LMAPPED
     $             ,SELPROC(IMIRROR,IPROC,J),.TRUE.)
                ENDIF
                SUMPROB=SUMPROB+SELPROC(IMIRROR,IPROC,J)
                IF(IMIRROR.EQ.2)THEN
C                 Need to flip back x values
                  XDUM=XBK(1)
                  XBK(1)=XBK(2)
                  XBK(2)=XDUM
                  CM_RAP=-CM_RAP
                ENDIF
              ENDIF
            ENDDO
          ENDIF
        ENDDO
      ENDDO
C     Turn caching in dsigproc back off to avoid side effects.
      LAST_ICONF=-1

C     Cannot make a selection with all PDFs to zero, so we return now
      IF(SUMPROB.EQ.0.0D0) THEN
        RETURN
      ENDIF

C     Perform the selection
      CALL RANMAR(R)

C     It is important to cache the status before adding any entries to
C      this grid in this
C     routine since it might change it
      GROUPED_MC_GRID_STATUS = DS_GET_DIM_STATUS('grouped_processes')

      IF (MC_GROUPED_SUBPROC.AND.GROUPED_MC_GRID_STATUS.EQ.0) THEN
C       We must initialize the grid and probe all channels
        SUMPROB=0.0D0
C       Turn caching on in dsigproc to avoid too many calls to
C        switchmom
        LAST_ICONF=0
        DO J=1,SYMCONF(0)
          DO I=1,MAXSPROC
            IF(INIT_MODE.OR.CONFSUB(I,SYMCONF(J)).NE.0) THEN
              DO K=1,2
                IF(K.EQ.1.OR.MIRRORPROCS(I))THEN
                  IPROC=I
                  ICONF=J
                  IMIRROR=K
C                 The IMODE=5 computes the matrix_element only,
C                  without PDF convolution 
                  DSIG=DSIGPROC(PP,ICONF,IPROC,IMIRROR,SYMCONF,CONFSUB
     $             ,WGT,5)
                  CALL MAP_3_TO_1(J,I,K,MAXSPROC,2,LMAPPED)
                  IF (SELPROC(K,I,J).NE.0.0D0) THEN
                    CALL DS_ADD_ENTRY('grouped_processes',LMAPPED,DSIG)
                  ENDIF
                  IF(K.EQ.2)THEN
C                   Need to flip back x values
                    XDUM=XBK(1)
                    XBK(1)=XBK(2)
                    XBK(2)=XDUM
                    CM_RAP=-CM_RAP
                  ENDIF
                  IF(INIT_MODE) THEN
                    SELPROC(K,I,J) = 1D0
                  ELSE
                    SELPROC(K,I,J) = DABS(DSIG*SELPROC(K,I,J))
                  ENDIF
                  SUMPROB = SUMPROB + SELPROC(K,I,J)
                ENDIF
              ENDDO
            ENDIF
          ENDDO
        ENDDO
C       Turn caching in dsigproc back off to avoid side effects.
        LAST_ICONF=-1
C       If these additional entries were enough to initialize the
C        gird, then update it
C       To do this check we must *not* used the cached varianble
C        grouped_MC_grid_status
        IF(DS_GET_DIM_STATUS('grouped_processes').GE.1) THEN
          CALL DS_UPDATE_GRID('grouped_processes')
          CALL RESET_CUMULATIVE_VARIABLE()
        ENDIF
      ENDIF

C     If we are still initializing the grid or simply not using one at
C      all, then we pick a point based on PDF only.
      IF (.NOT.MC_GROUPED_SUBPROC.OR.GROUPED_MC_GRID_STATUS.EQ.0) THEN
        R=R*SUMPROB
        ICONF=0
        IPROC=0
        TOTWGT=0D0
        DO J=1,SYMCONF(0)
          DO I=1,MAXSPROC
            IF(INIT_MODE.OR.CONFSUB(I,SYMCONF(J)).NE.0) THEN
              DO K=1,2
                TOTWGT=TOTWGT+SELPROC(K,I,J)
                IF(R.LT.TOTWGT)THEN
                  IPROC=I
                  ICONF=J
                  IMIRROR=K
                  GOTO 50
                ENDIF
              ENDDO
            ENDIF
          ENDDO
        ENDDO
 50     CONTINUE

        IF(IPROC.EQ.0) RETURN

C       Update weigth w.r.t SELPROC normalized to selection probability

        WGT=WGT*(SUMPROB/SELPROC(IMIRROR,IPROC,ICONF))

      ELSE
C       We are using the grouped_processes grid and it is initialized.
        CALL DS_GET_POINT('grouped_processes',R,LMAPPED
     $   ,MC_GROUPED_PROC_JACOBIAN,'norm',(/'PDF_convolution'/))
        WGT=WGT*MC_GROUPED_PROC_JACOBIAN
        CALL MAP_1_TO_3(LMAPPED,MAXSPROC,2,ICONF,IPROC,IMIRROR)
      ENDIF

C     Redo clustering to ensure consistent with final IPROC
      CUTSDONE=.FALSE.

      IF(GROUPED_MC_GRID_STATUS.EQ.0) THEN
C       If we were in the initialization phase of the grid for MC over
C        grouped processes, we must instruct the matrix<i> subroutine
C        not to add again an entry in the grid for this PS point at
C        the call DSIGPROC just below.
        ALLOW_HELICITY_GRID_ENTRIES = .FALSE.
      ENDIF
C     Call DSIGPROC to calculate sigma for process
      DSIG=DSIGPROC(PP,ICONF,IPROC,IMIRROR,SYMCONF,CONFSUB,WGT,IMODE)
C     Reset ALLOW_HELICITY_GRID_ENTRIES
      ALLOW_HELICITY_GRID_ENTRIES = .TRUE.

C     Below is how one would go about adding each point to the
C      grouped_processes grid
C     However, keeping only the initialization grid is better because'
C     //' in that case all grouped ME's
C     were computed with the same kinematics. For this reason, the
C      code below remains commented.
C     IF(grouped_MC_grid_status.ge.1) then
C     call map_3_to_1(ICONF,IPROC,IMIRROR,MAXSPROC,2,Lmapped)
C     call DS_add_entry('grouped_processes',Lmapped,(DSIG/SELPROC(IMIRR
C     OR,IPROC,ICONF)))
C     ENDIF

      IF(DSIG.GT.0D0)THEN
C       Update summed weight and number of events
        SUMWGT(IMIRROR,IPROC,ICONF)=SUMWGT(IMIRROR,IPROC,ICONF)
     $   +DABS(DSIG*WGT)
        NUMEVTS(IMIRROR,IPROC,ICONF)=NUMEVTS(IMIRROR,IPROC,ICONF)+1
      ENDIF

      RETURN
      END

      FUNCTION DSIGPROC(PP,ICONF,IPROC,IMIRROR,SYMCONF,CONFSUB,WGT
     $ ,IMODE)
C     ****************************************************
C     RETURNS DIFFERENTIAL CROSS SECTION 
C     FOR A PROCESS
C     Input:
C     pp    4 momentum of external particles
C     wgt   weight from Monte Carlo
C     imode 0 run, 1 init, 2 reweight, 3 finalize
C     Output:
C     Amplitude squared and summed
C     ****************************************************

      IMPLICIT NONE

      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INCLUDE 'coupl.inc'
      INCLUDE 'run.inc'
C     
C     ARGUMENTS 
C     
      DOUBLE PRECISION DSIGPROC
      DOUBLE PRECISION PP(0:3,NEXTERNAL), WGT
      INTEGER ICONF,IPROC,IMIRROR,IMODE
      INTEGER SYMCONF(0:LMAXCONFIGS)
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
C     
C     GLOBAL VARIABLES
C     
C     SUBDIAG is vector of diagram numbers for this config
C     IB gives which beam is which (for mirror processes)
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
C     ICONFIG has this config number
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
C     CM_RAP has parton-parton system rapidity
      DOUBLE PRECISION CM_RAP
      LOGICAL SET_CM_RAP
      COMMON/TO_CM_RAP/SET_CM_RAP,CM_RAP
C     To limit the number of calls to switchmom, use in DSIGPROC the
C      cached variable last_iconfig. When set to -1, it ignores
C      caching (to prevent undesired effect if this subroutine is
C      called from elsewhere) and when set to 0, it resets the cache.
      INTEGER LAST_ICONF
      DATA LAST_ICONF/-1/
      COMMON/TO_LAST_ICONF/LAST_ICONF
C     
C     EXTERNAL FUNCTIONS
C     
      DOUBLE PRECISION DSIG1,DSIG2,DSIG3,DSIG4,DSIG5,DSIG6,DSIG7,DSIG8
     $ ,DSIG9,DSIG10,DSIG11,DSIG12,DSIG13,DSIG14,DSIG15,DSIG16,DSIG17
     $ ,DSIG18,DSIG19,DSIG20,DSIG21,DSIG22,DSIG23,DSIG24,DSIG25,DSIG26
     $ ,DSIG27,DSIG28,DSIG29,DSIG30,DSIG31,DSIG32,DSIG33,DSIG34,DSIG35
     $ ,DSIG36,DSIG37,DSIG38,DSIG39,DSIG40,DSIG41,DSIG42,DSIG43,DSIG44
     $ ,DSIG45,DSIG46,DSIG47,DSIG48,DSIG49,DSIG50,DSIG51,DSIG52,DSIG53
     $ ,DSIG54,DSIG55,DSIG56,DSIG57,DSIG58,DSIG59,DSIG60,DSIG61,DSIG62
     $ ,DSIG63,DSIG64,DSIG65,DSIG66,DSIG67,DSIG68,DSIG69,DSIG70,DSIG71
     $ ,DSIG72,DSIG73,DSIG74,DSIG75,DSIG76,DSIG77,DSIG78,DSIG79,DSIG80
     $ ,DSIG81,DSIG82,DSIG83,DSIG84,DSIG85,DSIG86,DSIG87,DSIG88,DSIG89
     $ ,DSIG90,DSIG91,DSIG92,DSIG93,DSIG94,DSIG95,DSIG96,DSIG97,DSIG98
     $ ,DSIG99,DSIG100,DSIG101,DSIG102,DSIG103,DSIG104,DSIG105,DSIG106
     $ ,DSIG107,DSIG108,DSIG109,DSIG110,DSIG111,DSIG112,DSIG113
     $ ,DSIG114,DSIG115,DSIG116,DSIG117,DSIG118,DSIG119,DSIG120
     $ ,DSIG121,DSIG122,DSIG123,DSIG124,DSIG125,DSIG126,DSIG127
     $ ,DSIG128,DSIG129,DSIG130,DSIG131,DSIG132,DSIG133,DSIG134
     $ ,DSIG135,DSIG136,DSIG137,DSIG138,DSIG139,DSIG140,DSIG141
     $ ,DSIG142,DSIG143,DSIG144,DSIG145,DSIG146,DSIG147,DSIG148
     $ ,DSIG149,DSIG150,DSIG151,DSIG152,DSIG153,DSIG154,DSIG155
     $ ,DSIG156,DSIG157,DSIG158,DSIG159,DSIG160,DSIG161,DSIG162
     $ ,DSIG163,DSIG164,DSIG165,DSIG166,DSIG167,DSIG168,DSIG169
     $ ,DSIG170,DSIG171
      LOGICAL PASSCUTS
C     
C     LOCAL VARIABLES 
C     
      DOUBLE PRECISION P1(0:3,NEXTERNAL),XDUM
      INTEGER I,J,K,JC(NEXTERNAL)
      INTEGER PERMS(NEXTERNAL,LMAXCONFIGS)
      INCLUDE 'symperms.inc'
      SAVE P1,JC

      IF (LAST_ICONF.EQ.-1.OR.LAST_ICONF.NE.ICONF) THEN

        ICONFIG=SYMCONF(ICONF)
        DO I=1,MAXSPROC
          SUBDIAG(I) = CONFSUB(I,SYMCONF(ICONF))
        ENDDO

C       Set momenta according to this permutation
        CALL SWITCHMOM(PP,P1,PERMS(1,MAPCONFIG(ICONFIG)),JC,NEXTERNAL)

        IF (LAST_ICONF.NE.-1) THEN
          LAST_ICONF = ICONF
        ENDIF
      ENDIF

      IB(1)=1
      IB(2)=2

      IF(IMIRROR.EQ.2)THEN
C       Flip momenta (rotate around x axis)
        DO I=1,NEXTERNAL
          P1(2,I)=-P1(2,I)
          P1(3,I)=-P1(3,I)
        ENDDO
C       Flip beam identity
        IB(1)=2
        IB(2)=1
C       Flip x values (to get boost right)
        XDUM=XBK(1)
        XBK(1)=XBK(2)
        XBK(2)=XDUM
C       Flip CM_RAP (to get rapidity right)
        CM_RAP=-CM_RAP
      ENDIF

      DSIGPROC=0D0

      IF (PASSCUTS(P1)) THEN
        IF (IMODE.EQ.0D0.AND.NB_PASS_CUTS.LT.2**12)THEN
          NB_PASS_CUTS = NB_PASS_CUTS + 1
        ENDIF
        IF(IPROC.EQ.1) DSIGPROC=DSIG1(P1,WGT,IMODE)  ! u u > e+ e- u u
        IF(IPROC.EQ.2) DSIGPROC=DSIG2(P1,WGT,IMODE)  ! u u~ > e+ e- u u~
        IF(IPROC.EQ.3) DSIGPROC=DSIG3(P1,WGT,IMODE)  ! d d > e+ e- d d
        IF(IPROC.EQ.4) DSIGPROC=DSIG4(P1,WGT,IMODE)  ! d d~ > e+ e- d d~
        IF(IPROC.EQ.5) DSIGPROC=DSIG5(P1,WGT,IMODE)  ! u~ u~ > e+ e- u~ u~
        IF(IPROC.EQ.6) DSIGPROC=DSIG6(P1,WGT,IMODE)  ! d~ d~ > e+ e- d~ d~
        IF(IPROC.EQ.7) DSIGPROC=DSIG7(P1,WGT,IMODE)  ! u d > e+ e- u d
        IF(IPROC.EQ.8) DSIGPROC=DSIG8(P1,WGT,IMODE)  ! u s > e+ e- u s
        IF(IPROC.EQ.9) DSIGPROC=DSIG9(P1,WGT,IMODE)  ! u u~ > e+ e- d d~
        IF(IPROC.EQ.10) DSIGPROC=DSIG10(P1,WGT,IMODE)  ! u u~ > e+ e- s s~
        IF(IPROC.EQ.11) DSIGPROC=DSIG11(P1,WGT,IMODE)  ! u u~ > e+ e- b b~
        IF(IPROC.EQ.12) DSIGPROC=DSIG12(P1,WGT,IMODE)  ! u d~ > e+ e- u d~
        IF(IPROC.EQ.13) DSIGPROC=DSIG13(P1,WGT,IMODE)  ! u s~ > e+ e- u s~
        IF(IPROC.EQ.14) DSIGPROC=DSIG14(P1,WGT,IMODE)  ! u b > e+ e- u b
        IF(IPROC.EQ.15) DSIGPROC=DSIG15(P1,WGT,IMODE)  ! u b~ > e+ e- u b~
        IF(IPROC.EQ.16) DSIGPROC=DSIG16(P1,WGT,IMODE)  ! c d > e+ e- c d
        IF(IPROC.EQ.17) DSIGPROC=DSIG17(P1,WGT,IMODE)  ! c c~ > e+ e- d d~
        IF(IPROC.EQ.18) DSIGPROC=DSIG18(P1,WGT,IMODE)  ! c c~ > e+ e- b b~
        IF(IPROC.EQ.19) DSIGPROC=DSIG19(P1,WGT,IMODE)  ! c d~ > e+ e- c d~
        IF(IPROC.EQ.20) DSIGPROC=DSIG20(P1,WGT,IMODE)  ! c b > e+ e- c b
        IF(IPROC.EQ.21) DSIGPROC=DSIG21(P1,WGT,IMODE)  ! c b~ > e+ e- c b~
        IF(IPROC.EQ.22) DSIGPROC=DSIG22(P1,WGT,IMODE)  ! d u~ > e+ e- d u~
        IF(IPROC.EQ.23) DSIGPROC=DSIG23(P1,WGT,IMODE)  ! d c~ > e+ e- d c~
        IF(IPROC.EQ.24) DSIGPROC=DSIG24(P1,WGT,IMODE)  ! d d~ > e+ e- u u~
        IF(IPROC.EQ.25) DSIGPROC=DSIG25(P1,WGT,IMODE)  ! d d~ > e+ e- c c~
        IF(IPROC.EQ.26) DSIGPROC=DSIG26(P1,WGT,IMODE)  ! s u~ > e+ e- s u~
        IF(IPROC.EQ.27) DSIGPROC=DSIG27(P1,WGT,IMODE)  ! s s~ > e+ e- u u~
        IF(IPROC.EQ.28) DSIGPROC=DSIG28(P1,WGT,IMODE)  ! u~ d~ > e+ e- u~ d~
        IF(IPROC.EQ.29) DSIGPROC=DSIG29(P1,WGT,IMODE)  ! u~ s~ > e+ e- u~ s~
        IF(IPROC.EQ.30) DSIGPROC=DSIG30(P1,WGT,IMODE)  ! u~ b > e+ e- b u~
        IF(IPROC.EQ.31) DSIGPROC=DSIG31(P1,WGT,IMODE)  ! u~ b~ > e+ e- u~ b~
        IF(IPROC.EQ.32) DSIGPROC=DSIG32(P1,WGT,IMODE)  ! c~ d~ > e+ e- c~ d~
        IF(IPROC.EQ.33) DSIGPROC=DSIG33(P1,WGT,IMODE)  ! c~ b > e+ e- b c~
        IF(IPROC.EQ.34) DSIGPROC=DSIG34(P1,WGT,IMODE)  ! c~ b~ > e+ e- c~ b~
        IF(IPROC.EQ.35) DSIGPROC=DSIG35(P1,WGT,IMODE)  ! b b~ > e+ e- u u~
        IF(IPROC.EQ.36) DSIGPROC=DSIG36(P1,WGT,IMODE)  ! b b~ > e+ e- c c~
        IF(IPROC.EQ.37) DSIGPROC=DSIG37(P1,WGT,IMODE)  ! u c > e+ e- u c
        IF(IPROC.EQ.38) DSIGPROC=DSIG38(P1,WGT,IMODE)  ! u u~ > e+ e- c c~
        IF(IPROC.EQ.39) DSIGPROC=DSIG39(P1,WGT,IMODE)  ! u c~ > e+ e- u c~
        IF(IPROC.EQ.40) DSIGPROC=DSIG40(P1,WGT,IMODE)  ! d s > e+ e- d s
        IF(IPROC.EQ.41) DSIGPROC=DSIG41(P1,WGT,IMODE)  ! d d~ > e+ e- s s~
        IF(IPROC.EQ.42) DSIGPROC=DSIG42(P1,WGT,IMODE)  ! d s~ > e+ e- d s~
        IF(IPROC.EQ.43) DSIGPROC=DSIG43(P1,WGT,IMODE)  ! u~ c~ > e+ e- u~ c~
        IF(IPROC.EQ.44) DSIGPROC=DSIG44(P1,WGT,IMODE)  ! d~ s~ > e+ e- d~ s~
        IF(IPROC.EQ.45) DSIGPROC=DSIG45(P1,WGT,IMODE)  ! d~ b > e+ e- b d~
        IF(IPROC.EQ.46) DSIGPROC=DSIG46(P1,WGT,IMODE)  ! u d > e+ e- u s
        IF(IPROC.EQ.47) DSIGPROC=DSIG47(P1,WGT,IMODE)  ! u d > e+ e- u b
        IF(IPROC.EQ.48) DSIGPROC=DSIG48(P1,WGT,IMODE)  ! u d > e+ e- c d
        IF(IPROC.EQ.49) DSIGPROC=DSIG49(P1,WGT,IMODE)  ! u d > e+ e- c s
        IF(IPROC.EQ.50) DSIGPROC=DSIG50(P1,WGT,IMODE)  ! u d > e+ e- c b
        IF(IPROC.EQ.51) DSIGPROC=DSIG51(P1,WGT,IMODE)  ! u s > e+ e- u d
        IF(IPROC.EQ.52) DSIGPROC=DSIG52(P1,WGT,IMODE)  ! u s > e+ e- u b
        IF(IPROC.EQ.53) DSIGPROC=DSIG53(P1,WGT,IMODE)  ! u s > e+ e- c d
        IF(IPROC.EQ.54) DSIGPROC=DSIG54(P1,WGT,IMODE)  ! u u~ > e+ e- d s~
        IF(IPROC.EQ.55) DSIGPROC=DSIG55(P1,WGT,IMODE)  ! u u~ > e+ e- d b~
        IF(IPROC.EQ.56) DSIGPROC=DSIG56(P1,WGT,IMODE)  ! u u~ > e+ e- s d~
        IF(IPROC.EQ.57) DSIGPROC=DSIG57(P1,WGT,IMODE)  ! u u~ > e+ e- s b~
        IF(IPROC.EQ.58) DSIGPROC=DSIG58(P1,WGT,IMODE)  ! u u~ > e+ e- b d~
        IF(IPROC.EQ.59) DSIGPROC=DSIG59(P1,WGT,IMODE)  ! u u~ > e+ e- b s~
        IF(IPROC.EQ.60) DSIGPROC=DSIG60(P1,WGT,IMODE)  ! u c~ > e+ e- d d~
        IF(IPROC.EQ.61) DSIGPROC=DSIG61(P1,WGT,IMODE)  ! u c~ > e+ e- d s~
        IF(IPROC.EQ.62) DSIGPROC=DSIG62(P1,WGT,IMODE)  ! u c~ > e+ e- d b~
        IF(IPROC.EQ.63) DSIGPROC=DSIG63(P1,WGT,IMODE)  ! u c~ > e+ e- s d~
        IF(IPROC.EQ.64) DSIGPROC=DSIG64(P1,WGT,IMODE)  ! u c~ > e+ e- s b~
        IF(IPROC.EQ.65) DSIGPROC=DSIG65(P1,WGT,IMODE)  ! u c~ > e+ e- b d~
        IF(IPROC.EQ.66) DSIGPROC=DSIG66(P1,WGT,IMODE)  ! u c~ > e+ e- b b~
        IF(IPROC.EQ.67) DSIGPROC=DSIG67(P1,WGT,IMODE)  ! u d~ > e+ e- u s~
        IF(IPROC.EQ.68) DSIGPROC=DSIG68(P1,WGT,IMODE)  ! u d~ > e+ e- u b~
        IF(IPROC.EQ.69) DSIGPROC=DSIG69(P1,WGT,IMODE)  ! u d~ > e+ e- c d~
        IF(IPROC.EQ.70) DSIGPROC=DSIG70(P1,WGT,IMODE)  ! u d~ > e+ e- c s~
        IF(IPROC.EQ.71) DSIGPROC=DSIG71(P1,WGT,IMODE)  ! u d~ > e+ e- c b~
        IF(IPROC.EQ.72) DSIGPROC=DSIG72(P1,WGT,IMODE)  ! u s~ > e+ e- u d~
        IF(IPROC.EQ.73) DSIGPROC=DSIG73(P1,WGT,IMODE)  ! u s~ > e+ e- u b~
        IF(IPROC.EQ.74) DSIGPROC=DSIG74(P1,WGT,IMODE)  ! u s~ > e+ e- c d~
        IF(IPROC.EQ.75) DSIGPROC=DSIG75(P1,WGT,IMODE)  ! u s~ > e+ e- c b~
        IF(IPROC.EQ.76) DSIGPROC=DSIG76(P1,WGT,IMODE)  ! u b > e+ e- u d
        IF(IPROC.EQ.77) DSIGPROC=DSIG77(P1,WGT,IMODE)  ! u b > e+ e- u s
        IF(IPROC.EQ.78) DSIGPROC=DSIG78(P1,WGT,IMODE)  ! u b > e+ e- c d
        IF(IPROC.EQ.79) DSIGPROC=DSIG79(P1,WGT,IMODE)  ! u b > e+ e- c s
        IF(IPROC.EQ.80) DSIGPROC=DSIG80(P1,WGT,IMODE)  ! u b > e+ e- c b
        IF(IPROC.EQ.81) DSIGPROC=DSIG81(P1,WGT,IMODE)  ! u b~ > e+ e- u d~
        IF(IPROC.EQ.82) DSIGPROC=DSIG82(P1,WGT,IMODE)  ! u b~ > e+ e- u s~
        IF(IPROC.EQ.83) DSIGPROC=DSIG83(P1,WGT,IMODE)  ! u b~ > e+ e- c d~
        IF(IPROC.EQ.84) DSIGPROC=DSIG84(P1,WGT,IMODE)  ! u b~ > e+ e- c b~
        IF(IPROC.EQ.85) DSIGPROC=DSIG85(P1,WGT,IMODE)  ! c d > e+ e- u d
        IF(IPROC.EQ.86) DSIGPROC=DSIG86(P1,WGT,IMODE)  ! c d > e+ e- u b
        IF(IPROC.EQ.87) DSIGPROC=DSIG87(P1,WGT,IMODE)  ! c d > e+ e- c b
        IF(IPROC.EQ.88) DSIGPROC=DSIG88(P1,WGT,IMODE)  ! c s > e+ e- u d
        IF(IPROC.EQ.89) DSIGPROC=DSIG89(P1,WGT,IMODE)  ! c s > e+ e- u b
        IF(IPROC.EQ.90) DSIGPROC=DSIG90(P1,WGT,IMODE)  ! c u~ > e+ e- d d~
        IF(IPROC.EQ.91) DSIGPROC=DSIG91(P1,WGT,IMODE)  ! c u~ > e+ e- d s~
        IF(IPROC.EQ.92) DSIGPROC=DSIG92(P1,WGT,IMODE)  ! c u~ > e+ e- d b~
        IF(IPROC.EQ.93) DSIGPROC=DSIG93(P1,WGT,IMODE)  ! c u~ > e+ e- b d~
        IF(IPROC.EQ.94) DSIGPROC=DSIG94(P1,WGT,IMODE)  ! c u~ > e+ e- b s~
        IF(IPROC.EQ.95) DSIGPROC=DSIG95(P1,WGT,IMODE)  ! c u~ > e+ e- b b~
        IF(IPROC.EQ.96) DSIGPROC=DSIG96(P1,WGT,IMODE)  ! c c~ > e+ e- d b~
        IF(IPROC.EQ.97) DSIGPROC=DSIG97(P1,WGT,IMODE)  ! c c~ > e+ e- b d~
        IF(IPROC.EQ.98) DSIGPROC=DSIG98(P1,WGT,IMODE)  ! c d~ > e+ e- u d~
        IF(IPROC.EQ.99) DSIGPROC=DSIG99(P1,WGT,IMODE)  ! c d~ > e+ e- u s~
        IF(IPROC.EQ.100) DSIGPROC=DSIG100(P1,WGT,IMODE)  ! c d~ > e+ e- u b~
        IF(IPROC.EQ.101) DSIGPROC=DSIG101(P1,WGT,IMODE)  ! c d~ > e+ e- c b~
        IF(IPROC.EQ.102) DSIGPROC=DSIG102(P1,WGT,IMODE)  ! c b > e+ e- u d
        IF(IPROC.EQ.103) DSIGPROC=DSIG103(P1,WGT,IMODE)  ! c b > e+ e- u b
        IF(IPROC.EQ.104) DSIGPROC=DSIG104(P1,WGT,IMODE)  ! c b > e+ e- c d
        IF(IPROC.EQ.105) DSIGPROC=DSIG105(P1,WGT,IMODE)  ! c b~ > e+ e- u d~
        IF(IPROC.EQ.106) DSIGPROC=DSIG106(P1,WGT,IMODE)  ! c b~ > e+ e- u s~
        IF(IPROC.EQ.107) DSIGPROC=DSIG107(P1,WGT,IMODE)  ! c b~ > e+ e- u b~
        IF(IPROC.EQ.108) DSIGPROC=DSIG108(P1,WGT,IMODE)  ! c b~ > e+ e- c d~
        IF(IPROC.EQ.109) DSIGPROC=DSIG109(P1,WGT,IMODE)  ! d u~ > e+ e- d c~
        IF(IPROC.EQ.110) DSIGPROC=DSIG110(P1,WGT,IMODE)  ! d u~ > e+ e- s u~
        IF(IPROC.EQ.111) DSIGPROC=DSIG111(P1,WGT,IMODE)  ! d u~ > e+ e- s c~
        IF(IPROC.EQ.112) DSIGPROC=DSIG112(P1,WGT,IMODE)  ! d u~ > e+ e- b u~
        IF(IPROC.EQ.113) DSIGPROC=DSIG113(P1,WGT,IMODE)  ! d u~ > e+ e- b c~
        IF(IPROC.EQ.114) DSIGPROC=DSIG114(P1,WGT,IMODE)  ! d c~ > e+ e- d u~
        IF(IPROC.EQ.115) DSIGPROC=DSIG115(P1,WGT,IMODE)  ! d c~ > e+ e- s u~
        IF(IPROC.EQ.116) DSIGPROC=DSIG116(P1,WGT,IMODE)  ! d c~ > e+ e- b u~
        IF(IPROC.EQ.117) DSIGPROC=DSIG117(P1,WGT,IMODE)  ! d c~ > e+ e- b c~
        IF(IPROC.EQ.118) DSIGPROC=DSIG118(P1,WGT,IMODE)  ! d d~ > e+ e- u c~
        IF(IPROC.EQ.119) DSIGPROC=DSIG119(P1,WGT,IMODE)  ! d d~ > e+ e- c u~
        IF(IPROC.EQ.120) DSIGPROC=DSIG120(P1,WGT,IMODE)  ! d s~ > e+ e- u u~
        IF(IPROC.EQ.121) DSIGPROC=DSIG121(P1,WGT,IMODE)  ! d s~ > e+ e- u c~
        IF(IPROC.EQ.122) DSIGPROC=DSIG122(P1,WGT,IMODE)  ! d s~ > e+ e- c u~
        IF(IPROC.EQ.123) DSIGPROC=DSIG123(P1,WGT,IMODE)  ! d b~ > e+ e- u u~
        IF(IPROC.EQ.124) DSIGPROC=DSIG124(P1,WGT,IMODE)  ! d b~ > e+ e- u c~
        IF(IPROC.EQ.125) DSIGPROC=DSIG125(P1,WGT,IMODE)  ! d b~ > e+ e- c u~
        IF(IPROC.EQ.126) DSIGPROC=DSIG126(P1,WGT,IMODE)  ! d b~ > e+ e- c c~
        IF(IPROC.EQ.127) DSIGPROC=DSIG127(P1,WGT,IMODE)  ! s u~ > e+ e- d u~
        IF(IPROC.EQ.128) DSIGPROC=DSIG128(P1,WGT,IMODE)  ! s u~ > e+ e- d c~
        IF(IPROC.EQ.129) DSIGPROC=DSIG129(P1,WGT,IMODE)  ! s u~ > e+ e- b u~
        IF(IPROC.EQ.130) DSIGPROC=DSIG130(P1,WGT,IMODE)  ! s u~ > e+ e- b c~
        IF(IPROC.EQ.131) DSIGPROC=DSIG131(P1,WGT,IMODE)  ! s d~ > e+ e- u u~
        IF(IPROC.EQ.132) DSIGPROC=DSIG132(P1,WGT,IMODE)  ! s d~ > e+ e- u c~
        IF(IPROC.EQ.133) DSIGPROC=DSIG133(P1,WGT,IMODE)  ! s b~ > e+ e- u u~
        IF(IPROC.EQ.134) DSIGPROC=DSIG134(P1,WGT,IMODE)  ! s b~ > e+ e- u c~
        IF(IPROC.EQ.135) DSIGPROC=DSIG135(P1,WGT,IMODE)  ! u~ d~ > e+ e- u~ s~
        IF(IPROC.EQ.136) DSIGPROC=DSIG136(P1,WGT,IMODE)  ! u~ d~ > e+ e- u~ b~
        IF(IPROC.EQ.137) DSIGPROC=DSIG137(P1,WGT,IMODE)  ! u~ d~ > e+ e- c~ d~
        IF(IPROC.EQ.138) DSIGPROC=DSIG138(P1,WGT,IMODE)  ! u~ d~ > e+ e- c~ s~
        IF(IPROC.EQ.139) DSIGPROC=DSIG139(P1,WGT,IMODE)  ! u~ d~ > e+ e- c~ b~
        IF(IPROC.EQ.140) DSIGPROC=DSIG140(P1,WGT,IMODE)  ! u~ s~ > e+ e- u~ d~
        IF(IPROC.EQ.141) DSIGPROC=DSIG141(P1,WGT,IMODE)  ! u~ s~ > e+ e- u~ b~
        IF(IPROC.EQ.142) DSIGPROC=DSIG142(P1,WGT,IMODE)  ! u~ s~ > e+ e- c~ d~
        IF(IPROC.EQ.143) DSIGPROC=DSIG143(P1,WGT,IMODE)  ! u~ b > e+ e- d u~
        IF(IPROC.EQ.144) DSIGPROC=DSIG144(P1,WGT,IMODE)  ! u~ b > e+ e- d c~
        IF(IPROC.EQ.145) DSIGPROC=DSIG145(P1,WGT,IMODE)  ! u~ b > e+ e- s u~
        IF(IPROC.EQ.146) DSIGPROC=DSIG146(P1,WGT,IMODE)  ! u~ b > e+ e- b c~
        IF(IPROC.EQ.147) DSIGPROC=DSIG147(P1,WGT,IMODE)  ! u~ b~ > e+ e- u~ d~
        IF(IPROC.EQ.148) DSIGPROC=DSIG148(P1,WGT,IMODE)  ! u~ b~ > e+ e- u~ s~
        IF(IPROC.EQ.149) DSIGPROC=DSIG149(P1,WGT,IMODE)  ! u~ b~ > e+ e- c~ d~
        IF(IPROC.EQ.150) DSIGPROC=DSIG150(P1,WGT,IMODE)  ! u~ b~ > e+ e- c~ s~
        IF(IPROC.EQ.151) DSIGPROC=DSIG151(P1,WGT,IMODE)  ! u~ b~ > e+ e- c~ b~
        IF(IPROC.EQ.152) DSIGPROC=DSIG152(P1,WGT,IMODE)  ! c~ d~ > e+ e- u~ d~
        IF(IPROC.EQ.153) DSIGPROC=DSIG153(P1,WGT,IMODE)  ! c~ d~ > e+ e- u~ b~
        IF(IPROC.EQ.154) DSIGPROC=DSIG154(P1,WGT,IMODE)  ! c~ d~ > e+ e- c~ b~
        IF(IPROC.EQ.155) DSIGPROC=DSIG155(P1,WGT,IMODE)  ! c~ s~ > e+ e- u~ d~
        IF(IPROC.EQ.156) DSIGPROC=DSIG156(P1,WGT,IMODE)  ! c~ s~ > e+ e- u~ b~
        IF(IPROC.EQ.157) DSIGPROC=DSIG157(P1,WGT,IMODE)  ! c~ b > e+ e- d u~
        IF(IPROC.EQ.158) DSIGPROC=DSIG158(P1,WGT,IMODE)  ! c~ b > e+ e- d c~
        IF(IPROC.EQ.159) DSIGPROC=DSIG159(P1,WGT,IMODE)  ! c~ b > e+ e- s u~
        IF(IPROC.EQ.160) DSIGPROC=DSIG160(P1,WGT,IMODE)  ! c~ b > e+ e- b u~
        IF(IPROC.EQ.161) DSIGPROC=DSIG161(P1,WGT,IMODE)  ! c~ b~ > e+ e- u~ d~
        IF(IPROC.EQ.162) DSIGPROC=DSIG162(P1,WGT,IMODE)  ! c~ b~ > e+ e- u~ b~
        IF(IPROC.EQ.163) DSIGPROC=DSIG163(P1,WGT,IMODE)  ! c~ b~ > e+ e- c~ d~
        IF(IPROC.EQ.164) DSIGPROC=DSIG164(P1,WGT,IMODE)  ! d~ b > e+ e- u u~
        IF(IPROC.EQ.165) DSIGPROC=DSIG165(P1,WGT,IMODE)  ! d~ b > e+ e- u c~
        IF(IPROC.EQ.166) DSIGPROC=DSIG166(P1,WGT,IMODE)  ! d~ b > e+ e- c u~
        IF(IPROC.EQ.167) DSIGPROC=DSIG167(P1,WGT,IMODE)  ! d~ b > e+ e- c c~
        IF(IPROC.EQ.168) DSIGPROC=DSIG168(P1,WGT,IMODE)  ! s~ b > e+ e- u u~
        IF(IPROC.EQ.169) DSIGPROC=DSIG169(P1,WGT,IMODE)  ! s~ b > e+ e- c u~
        IF(IPROC.EQ.170) DSIGPROC=DSIG170(P1,WGT,IMODE)  ! b b~ > e+ e- u c~
        IF(IPROC.EQ.171) DSIGPROC=DSIG171(P1,WGT,IMODE)  ! b b~ > e+ e- c u~
      ENDIF

      IF (LAST_ICONF.NE.-1.AND.IMIRROR.EQ.2) THEN
C       Flip back local momenta P1 if cached
        DO I=1,NEXTERNAL
          P1(2,I)=-P1(2,I)
          P1(3,I)=-P1(3,I)
        ENDDO
      ENDIF

      RETURN

      END

C     -----------------------------------------
C     Subroutine to map three positive integers
C     I, J and K with upper bounds J_bound and
C     K_bound to a one_dimensional
C     index L
C     -----------------------------------------

      SUBROUTINE MAP_3_TO_1(I,J,K,J_BOUND,K_BOUND,L)
      IMPLICIT NONE
      INTEGER, INTENT(IN)  :: I,J,K,J_BOUND,K_BOUND
      INTEGER, INTENT(OUT) :: L

      L = I*(J_BOUND*(K_BOUND+1)+K_BOUND+1)+J*(K_BOUND+1)+K

      END SUBROUTINE MAP_3_TO_1

C     -----------------------------------------
C     Subroutine to map back the positive 
C     integer L to the three integers 
C     I, J and K with upper bounds
C     J_bound and K_bound.
C     -----------------------------------------

      SUBROUTINE MAP_1_TO_3(L,J_BOUND,K_BOUND,I,J,K)
      IMPLICIT NONE
      INTEGER, INTENT(OUT)  :: I,J,K
      INTEGER, INTENT(IN)   :: L, J_BOUND, K_BOUND
      INTEGER               :: L_RUN

      L_RUN = L
      I = L_RUN/(J_BOUND*(K_BOUND+1)+K_BOUND+1)
      L_RUN = L_RUN - I*((J_BOUND*(K_BOUND+1)+K_BOUND+1))
      J = L_RUN/(K_BOUND+1)
      L_RUN = L_RUN - J*(K_BOUND+1)
      K  = L_RUN

      END SUBROUTINE MAP_1_TO_3


C     
C     Functionality to handling grid
C     

      SUBROUTINE WRITE_GOOD_HEL(STREAM_ID)
      IMPLICIT NONE
      INTEGER STREAM_ID
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=64)
      LOGICAL GOODHEL(NCOMB, 2)
      INTEGER NTRY(2)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL
      WRITE(STREAM_ID,*) GOODHEL
      RETURN
      END


      SUBROUTINE READ_GOOD_HEL(STREAM_ID)
      IMPLICIT NONE
      INCLUDE 'genps.inc'
      INTEGER STREAM_ID
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=64)
      LOGICAL GOODHEL(NCOMB, 2)
      INTEGER NTRY(2)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL
      READ(STREAM_ID,*) GOODHEL
      NTRY(1) = MAXTRIES + 1
      NTRY(2) = MAXTRIES + 1
      RETURN
      END

      SUBROUTINE INIT_GOOD_HEL()
      IMPLICIT NONE
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=64)
      LOGICAL GOODHEL(NCOMB, 2)
      INTEGER NTRY(2)
      INTEGER I

      DO I=1,NCOMB
        GOODHEL(I,1) = .FALSE.
        GOODHEL(I,2) = .FALSE.
      ENDDO
      NTRY(1) = 0
      NTRY(2) = 0
      END

      INTEGER FUNCTION GET_MAXSPROC()
      IMPLICIT NONE
      INCLUDE 'maxamps.inc'

      GET_MAXSPROC = MAXSPROC
      RETURN
      END




      SUBROUTINE PRINT_ZERO_AMP()

      CALL PRINT_ZERO_AMP_1()
      CALL PRINT_ZERO_AMP_2()
      CALL PRINT_ZERO_AMP_3()
      CALL PRINT_ZERO_AMP_4()
      CALL PRINT_ZERO_AMP_5()
      CALL PRINT_ZERO_AMP_6()
      CALL PRINT_ZERO_AMP_7()
      CALL PRINT_ZERO_AMP_8()
      CALL PRINT_ZERO_AMP_9()
      CALL PRINT_ZERO_AMP_10()
      CALL PRINT_ZERO_AMP_11()
      CALL PRINT_ZERO_AMP_12()
      CALL PRINT_ZERO_AMP_13()
      CALL PRINT_ZERO_AMP_14()
      CALL PRINT_ZERO_AMP_15()
      CALL PRINT_ZERO_AMP_16()
      CALL PRINT_ZERO_AMP_17()
      CALL PRINT_ZERO_AMP_18()
      CALL PRINT_ZERO_AMP_19()
      CALL PRINT_ZERO_AMP_20()
      CALL PRINT_ZERO_AMP_21()
      CALL PRINT_ZERO_AMP_22()
      CALL PRINT_ZERO_AMP_23()
      CALL PRINT_ZERO_AMP_24()
      CALL PRINT_ZERO_AMP_25()
      CALL PRINT_ZERO_AMP_26()
      CALL PRINT_ZERO_AMP_27()
      CALL PRINT_ZERO_AMP_28()
      CALL PRINT_ZERO_AMP_29()
      CALL PRINT_ZERO_AMP_30()
      CALL PRINT_ZERO_AMP_31()
      CALL PRINT_ZERO_AMP_32()
      CALL PRINT_ZERO_AMP_33()
      CALL PRINT_ZERO_AMP_34()
      CALL PRINT_ZERO_AMP_35()
      CALL PRINT_ZERO_AMP_36()
      CALL PRINT_ZERO_AMP_37()
      CALL PRINT_ZERO_AMP_38()
      CALL PRINT_ZERO_AMP_39()
      CALL PRINT_ZERO_AMP_40()
      CALL PRINT_ZERO_AMP_41()
      CALL PRINT_ZERO_AMP_42()
      CALL PRINT_ZERO_AMP_43()
      CALL PRINT_ZERO_AMP_44()
      CALL PRINT_ZERO_AMP_45()
      CALL PRINT_ZERO_AMP_46()
      CALL PRINT_ZERO_AMP_47()
      CALL PRINT_ZERO_AMP_48()
      CALL PRINT_ZERO_AMP_49()
      CALL PRINT_ZERO_AMP_50()
      CALL PRINT_ZERO_AMP_51()
      CALL PRINT_ZERO_AMP_52()
      CALL PRINT_ZERO_AMP_53()
      CALL PRINT_ZERO_AMP_54()
      CALL PRINT_ZERO_AMP_55()
      CALL PRINT_ZERO_AMP_56()
      CALL PRINT_ZERO_AMP_57()
      CALL PRINT_ZERO_AMP_58()
      CALL PRINT_ZERO_AMP_59()
      CALL PRINT_ZERO_AMP_60()
      CALL PRINT_ZERO_AMP_61()
      CALL PRINT_ZERO_AMP_62()
      CALL PRINT_ZERO_AMP_63()
      CALL PRINT_ZERO_AMP_64()
      CALL PRINT_ZERO_AMP_65()
      CALL PRINT_ZERO_AMP_66()
      CALL PRINT_ZERO_AMP_67()
      CALL PRINT_ZERO_AMP_68()
      CALL PRINT_ZERO_AMP_69()
      CALL PRINT_ZERO_AMP_70()
      CALL PRINT_ZERO_AMP_71()
      CALL PRINT_ZERO_AMP_72()
      CALL PRINT_ZERO_AMP_73()
      CALL PRINT_ZERO_AMP_74()
      CALL PRINT_ZERO_AMP_75()
      CALL PRINT_ZERO_AMP_76()
      CALL PRINT_ZERO_AMP_77()
      CALL PRINT_ZERO_AMP_78()
      CALL PRINT_ZERO_AMP_79()
      CALL PRINT_ZERO_AMP_80()
      CALL PRINT_ZERO_AMP_81()
      CALL PRINT_ZERO_AMP_82()
      CALL PRINT_ZERO_AMP_83()
      CALL PRINT_ZERO_AMP_84()
      CALL PRINT_ZERO_AMP_85()
      CALL PRINT_ZERO_AMP_86()
      CALL PRINT_ZERO_AMP_87()
      CALL PRINT_ZERO_AMP_88()
      CALL PRINT_ZERO_AMP_89()
      CALL PRINT_ZERO_AMP_90()
      CALL PRINT_ZERO_AMP_91()
      CALL PRINT_ZERO_AMP_92()
      CALL PRINT_ZERO_AMP_93()
      CALL PRINT_ZERO_AMP_94()
      CALL PRINT_ZERO_AMP_95()
      CALL PRINT_ZERO_AMP_96()
      CALL PRINT_ZERO_AMP_97()
      CALL PRINT_ZERO_AMP_98()
      CALL PRINT_ZERO_AMP_99()
      CALL PRINT_ZERO_AMP_100()
      CALL PRINT_ZERO_AMP_101()
      CALL PRINT_ZERO_AMP_102()
      CALL PRINT_ZERO_AMP_103()
      CALL PRINT_ZERO_AMP_104()
      CALL PRINT_ZERO_AMP_105()
      CALL PRINT_ZERO_AMP_106()
      CALL PRINT_ZERO_AMP_107()
      CALL PRINT_ZERO_AMP_108()
      CALL PRINT_ZERO_AMP_109()
      CALL PRINT_ZERO_AMP_110()
      CALL PRINT_ZERO_AMP_111()
      CALL PRINT_ZERO_AMP_112()
      CALL PRINT_ZERO_AMP_113()
      CALL PRINT_ZERO_AMP_114()
      CALL PRINT_ZERO_AMP_115()
      CALL PRINT_ZERO_AMP_116()
      CALL PRINT_ZERO_AMP_117()
      CALL PRINT_ZERO_AMP_118()
      CALL PRINT_ZERO_AMP_119()
      CALL PRINT_ZERO_AMP_120()
      CALL PRINT_ZERO_AMP_121()
      CALL PRINT_ZERO_AMP_122()
      CALL PRINT_ZERO_AMP_123()
      CALL PRINT_ZERO_AMP_124()
      CALL PRINT_ZERO_AMP_125()
      CALL PRINT_ZERO_AMP_126()
      CALL PRINT_ZERO_AMP_127()
      CALL PRINT_ZERO_AMP_128()
      CALL PRINT_ZERO_AMP_129()
      CALL PRINT_ZERO_AMP_130()
      CALL PRINT_ZERO_AMP_131()
      CALL PRINT_ZERO_AMP_132()
      CALL PRINT_ZERO_AMP_133()
      CALL PRINT_ZERO_AMP_134()
      CALL PRINT_ZERO_AMP_135()
      CALL PRINT_ZERO_AMP_136()
      CALL PRINT_ZERO_AMP_137()
      CALL PRINT_ZERO_AMP_138()
      CALL PRINT_ZERO_AMP_139()
      CALL PRINT_ZERO_AMP_140()
      CALL PRINT_ZERO_AMP_141()
      CALL PRINT_ZERO_AMP_142()
      CALL PRINT_ZERO_AMP_143()
      CALL PRINT_ZERO_AMP_144()
      CALL PRINT_ZERO_AMP_145()
      CALL PRINT_ZERO_AMP_146()
      CALL PRINT_ZERO_AMP_147()
      CALL PRINT_ZERO_AMP_148()
      CALL PRINT_ZERO_AMP_149()
      CALL PRINT_ZERO_AMP_150()
      CALL PRINT_ZERO_AMP_151()
      CALL PRINT_ZERO_AMP_152()
      CALL PRINT_ZERO_AMP_153()
      CALL PRINT_ZERO_AMP_154()
      CALL PRINT_ZERO_AMP_155()
      CALL PRINT_ZERO_AMP_156()
      CALL PRINT_ZERO_AMP_157()
      CALL PRINT_ZERO_AMP_158()
      CALL PRINT_ZERO_AMP_159()
      CALL PRINT_ZERO_AMP_160()
      CALL PRINT_ZERO_AMP_161()
      CALL PRINT_ZERO_AMP_162()
      CALL PRINT_ZERO_AMP_163()
      CALL PRINT_ZERO_AMP_164()
      CALL PRINT_ZERO_AMP_165()
      CALL PRINT_ZERO_AMP_166()
      CALL PRINT_ZERO_AMP_167()
      CALL PRINT_ZERO_AMP_168()
      CALL PRINT_ZERO_AMP_169()
      CALL PRINT_ZERO_AMP_170()
      CALL PRINT_ZERO_AMP_171()
      RETURN
      END

