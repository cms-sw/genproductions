-include $(TOOLS_MKDIR).mk
$(foreach f,LLVM_ANALYZER,$(eval $f:=$(self_EX_FLAGS_$f)))
SCRAM_TARGETS:=
ifneq ($(strip $(wildcard $(SCRAM_ADMIN_DIR)/multi-targets)),)
SCRAM_MULTI_TARGET:=1
SCRAM_TARGETS:=$(self_EX_FLAGS_SCRAM_TARGETS)
$(foreach v,$(SCRAM_TARGETS),$(eval u:=$(shell echo $v | tr '[a-z-]' '[A-Z_]' | tr '.' '_'))$(eval TARGETS_FLAGS_$v:=$u))
else
SCRAM_MULTI_TARGET:=0
endif
LIB_TYPES:=$(sort $(ALL_LIB_TYPES))
OVERRIDABLE_FLAGS:=$(strip $(sort $(TOOLS_OVERRIDABLE_FLAGS) $(foreach x,$(patsubst %_LIB,%,$(LIB_TYPES)),$x_LDFLAGS)))
ALL_COMPILER_FLAGS:=$(sort $(filter-out CXXFLAGS_TARGETS_%,$(ALL_COMPILER_FLAGS) $(OVERRIDABLE_FLAGS)))
##############################################################################
TARGETDIR:= $(subst /,_,$(THISDIR))
.DEFAULT_GOAL := all
.PHONY: FORCE_TARGET
##############################################################################
GetToolFlag=$($1_EX_FLAGS_$2)
GetVariable=$($(1))
multipletools := info
wrongtool := info
comma:= ,
empty:= 
colon:= :
path_seperator := :
space:= $(epmty) $(empty)
prebuild       := 
postbuild      :=
prelibdeps     :=
prebindeps     :=
ALL_EXTRA_PRODUCT_RULES:=
ALL_SCRAM_PROJECTS :=
ALL_SUBSYSTEMS     :=
ALL_PACKAGES       :=
ALL_PYTHON_DIRS    :=
ALL_EMPTY_PACKAGES :=
ALL_BUILDFILES     :=
ALL_PRODS          :=
ALL_MODULEMAPS     :=
#Default python to use, leave it empty for python 2
DEFAULT_PYTHON     := 3
PYTHON_COMPILE     := $(PYTHON$(DEFAULT_PYTHON)_COMPILE)
AUTO_GENERATED_SOURCES :=
UNIT_TEST_DEPS     :=
RESET_BUILD_LOGS:=yes
TOP_LEVEL_VARIABLES:= BIGOBJ BINARY LIBRARY TEST TEST_LIBRARY
SKIP_UNITTESTS     := $(patsubst skiptest_%,%,$(filter skiptest_%,$(MAKECMDGOALS)))
IGNORE_DELETED     := $(strip $(filter ignore-deleted,$(MAKECMDGOALS)))
FAST:=
XFAST:=
UFAST:=
ONLYECHOTARGETS:=
COMPILE_OPTIONS:=$(if $(strip $(SCRAM_COMPILE_OPTIONS)),$(SCRAM_COMPILE_OPTIONS),-c)
OBJEXT:=$(if $(strip $(SCRAM_OBJEXT)),$(SCRAM_OBJEXT),o)
AREXT:=a
MODULE_PREFIX:=lib
COMMON_WORKINGDIR := $(SCRAM_TMP)/common
WORKINGDIR := $(SCRAM_INTwork)
UNITTEST_DIR := unit_tests
PRECOMPILE_FLAGS_EXTENSION  := cxxflags
PRECOMPILE_EXTENSION        := gch
YACC                        := bison
LEX                         := flex
LATEX                       := latex
DVISUFFIX                   := dvi
PSSUFFIX                    := ps
PDFSUFFIX                   := pdf
PS2PDF                      := ps2pdf
DVIPS                       := dvips
BIGLIB_OBJEXT               := obj
OLD_TIMESTAMP               := 198001010100
NON_XML_BUILDFILE           := 
UPDATE_CLASSVERSION         :=
ALL_CLASS_VERSION_RULES     :=
HOOK_PROJECT                :=
HOOK_PACKAGE                :=
HOOK_PRODUCT                :=
DEPENDENCY_ORDER_VARIABLES  :=
EXTRA_TOP_LEVEL_BUILD_RULES :=
SET_PRODUCT_VARIABLES       := INCLUDE LIB LIBDIR $(LIB_TYPES)
DROP_EXTERNAL_HEADER_MMD_DEPS:= yes
ifeq ($(strip $(RELEASETOP)),)
IS_DEV_AREA:=0
IS_RELEASE_AREA:=1
else
IS_DEV_AREA:=1
IS_RELEASE_AREA:=0
ifneq ($(strip DISABLE_CMS_DEPRECATED),true)
self_EX_FLAGS_CXXFLAGS+=-DUSE_CMS_DEPRECATED
endif

endif
IS_MIC:=$(if $(strip $(filter mic,$(subst _, ,$(SCRAM_ARCH)))),yes,no)
IS_DARWIN:=no
IS_LINUX:=yes
ifeq ($(strip $(filter-out osx%,$(SCRAM_ARCH))),)
IS_DARWIN:=yes
IS_LINUX:=no
endif
ALL_BIGPRODS                :=
POISON_EDMPLUGIN_CACHE      :=
EDM_CHECKSUM_HELP_MSG       = Suggestion: You can run 'scram build updateclassversion' to generate $$x.generated with updated ClassVersion
CMDS_COMPILERS_MAP          := CXX:g++ CC:gcc FC:g77
ALL_CMDS                    := sh awk basename cat cd chmod cp dirname diff echo false find g77 g++ c++ gcc grep ln ls mkdir mv python python2 python3 rm sed sort touch tr true uname uniq xargs ld wc cut git gunzip tail head objcopy ar
SHELL                       := /bin/sh
BASECMD_which               := which
CMD_cd  := cd
ifdef CXX
CMD_g++ := $(CXX)
endif
ifdef CC
CMD_gcc := $(CC)
endif
ifdef FC
CMD_g77 := $(FC)
endif
LLVM_CCDB_EXT:=compile_commands.json
CODE_ANALYSIS_RULES:=NO
ifeq ($(strip $(SCRAM_GENERATE_LLVM_CCDB)),YES)
CODE_ANALYSIS_RULES:=YES
OBJEXT:=$(OBJEXT).$(LLVM_CCDB_EXT)
endif
ifeq ($(strip $(SCRAM_MULTIPLE_COMPILERS)-$(SCRAM_COMPILER)-$(RUN_LLVM_ANALYZER_ON_ALL)),yes-$(LLVM_ANALYZER)-no)  #If not llvm-analyzer else requested to run llvm-alayzer for gen code too
CODE_ANALYSIS_RULES:=YES
endif

SYNTAX_ONLY:=$(if $(strip $(SCRAM_SYNTAX_ONLY)),YES,)
ifneq ($(strip $(filter -fsyntax-only,$(USER_CXXFLAGS))),)
SYNTAX_ONLY:=YES
endif
SKIP_SCRIPTS_COPY:=
ifneq ($(strip $(filter skip-scripts-copy,$(MAKECMDGOALS))),)
  SKIP_SCRIPTS_COPY:=yes
endif
###################################
IS_AARCH64:=
IS_AMD64:=
ifneq ($(strip $(subst _aarch64_,,$(SCRAM_ARCH))),$(SCRAM_ARCH))
IS_AARCH64:=YES
endif
ifneq ($(strip $(subst _amd64_,,$(SCRAM_ARCH))),$(SCRAM_ARCH))
IS_AMD64:=YES
endif
###################################
SetLocalCMDs    = $(if $($1),$(eval CMD_$2:=$($1)),)
SetCompilerCMDs = $(if $($1),,$(eval $1:=$(CMD_$2)))
ShellCMDs       = $(if $(CMD_$1),,$(eval CMD_$1:=$(eval x:=$(strip $(firstword $(shell $(BASECMD_which) $1 2>&1))))$(if $(wildcard $x),$x,$1)))
###################################
$(eval $(call ShellCMDs,which))
BASECMD_which := $(CMD_which)
$(foreach c,$(CMDS_COMPILERS_MAP),$(eval $$(call SetLocalCMDs,$(subst :,$(comma),$c))))
$(foreach c,$(ALL_CMDS)         ,$(eval $(call ShellCMDs,$c)))
$(foreach c,$(CMDS_COMPILERS_MAP),$(eval $$(call SetCompilerCMDs,$(subst :,$(comma),$c))))
PYTHON_RELPATH := $(shell $(CMD_echo) $(SCRAMSTORENAME_PYTHON) | $(CMD_sed) 's|[a-zA-Z0-9_-]*|..|g')
CMD_python := $(CMD_python$(DEFAULT_PYTHON))
###################################
UNAME                       := $(CMD_uname)
ifndef CXX_MF
CXX_MF:=-MF
endif
ifndef C_MF
C_MF:=-MF
endif
ifndef F77_MF
F77_MF:=-MF
endif
ifndef CXX_MMD
CXX_MMD:=-MMD
endif
ifndef C_MMD
C_MMD:=-MMD
endif
ifndef F77_MMD
F77_MMD:=-MMD
endif
ifndef CXX_MM
CXX_MM:=$(patsubst %D,%,$(CXX_MMD))
endif
ifndef C_MM
C_MM:=$(patsubst %D,%,$(C_MMD))
endif
ifndef F77_MM
F77_MM:=$(patsubst %D,%,$(F77_MMD))
endif
###################################
SHAREDSUFFIX := so
ifeq ($(IS_DARWIN),yes)
SHAREDSUFFIX := dylib
endif
ifndef OS_RUNTIME_LIBRARY_PATH
OS_RUNTIME_LIBRARY_PATH := LD_LIBRARY_PATH
ifeq ($(IS_DARWIN),yes)
OS_RUNTIME_LIBRARY_PATH := DYLD_FALLBACK_LIBRARY_PATH
endif
endif
UC_PROJECTNAME:=$(SCRAM_PROJECTNAME)
LC_PROJECTNAME:=$(shell $(CMD_echo) $(UC_PROJECTNAME) | $(CMD_tr) '[A-Z]' '[a-z]')
SELF_LIBDIRS:=$(subst $(path_seperator),$(space),$($(OS_RUNTIME_LIBRARY_PATH)))
self_EX_LIBDIR:=$(foreach d,$(self_EX_LIBDIR),$(if $(strip $(filter $d,$(SELF_LIBDIRS))),$d))

#Check for private headers
CHECK_PRIVATE_HEADERS:=
ifeq ($(strip $(self_EX_FLAGS_CHECK_PRIVATE_HEADERS)),1)
CHECK_PRIVATE_HEADERS:=1
ifeq ($(strip $(IS_RELEASE_AREA)),1)
IGNORE_PRIVATE_HEADER_ERRORS:=$(CMD_true)
else
IGNORE_PRIVATE_HEADER_ERRORS:=$(CMD_false)
endif
endif
##############################################################################
ifndef RUN_LLVM_ANALYZER_ON_ALL
RUN_LLVM_ANALYZER_ON_ALL:=no
endif
ifndef SCRAMSTORENAME_LIB
SCRAMSTORENAME_LIB:=lib
endif
ifeq ($(strip $(SCRAM_SOURCEDIR)),)
SCRAM_SOURCEDIR:=src
endif

ifneq ($(wildcard $(WORKINGDIR)/cache/bf/$(SCRAM_CONFIGDIR)/$(SCRAM_BUILDFILE)),)
CONFIGDEPS += $(WORKINGDIR)/cache/bf/$(SCRAM_CONFIGDIR)/$(SCRAM_BUILDFILE)
endif
CONFIGDEPS += $(WORKINGDIR)/cache/xlibs

ifndef SCRAM_BUILDVERBOSE
VERB:=@
VERB_ECHO:=:
else
VERB:=
VERB_ECHO:=echo
endif

ifeq ($(strip $(BUILD_LOG)),yes)
DO_BUILD_LOG:=
else
DO_BUILD_LOG:=:
endif

KEEP_ON_BUILDING:=
ifneq ($(findstring k,$(firstword  $(MAKEFLAGS))),)
KEEP_ON_BUILDING:=yes
FORCE_BUILD_START = (
FORCE_BUILD_END = ) || ($(CMD_echo) gmake: \*\*\* [$@] Error $$?; $(CMD_touch) $(WORKINGDIR)/build_error || exit 0)
else
ifeq ($(strip $(BUILD_LOG)),yes)
FORCE_BUILD_START = (
FORCE_BUILD_END = ) || (exitcode=$$?; $(CMD_echo) gmake: \*\*\* [$@] Error $$exitcode; $(CMD_touch) $(WORKINGDIR)/build_error; exit $$exitcode)
else
FORCE_BUILD_START =
FORCE_BUILD_END =
endif
endif

$(SCRAM_SOURCEDIR) :=

##############################################################################
##############################################################################
define set_cached_var_func_arg_
cached_var_func_arg$(cached_var_func_arg_count_$(1))_$(1) := $(2)
cached_var_func_arg_count_$(1) := $(cached_var_func_arg_count_$(1))1
endef
define set_cached_var_
cached_var_func_arg_count_$(1) := 
$(foreach arg,$(subst $(comma),$(space),$(cached_var_function_$(1))),$(eval $(call set_cached_var_func_arg_,$(1),$(arg))))
cached_var_$(1) := $(call $(cached_var_func_arg_$(1)),$(cached_var_func_arg1_$(1)),$(cached_var_func_arg11_$(1)),$(cached_var_func_arg111_$(1)),$(cached_var_func_arg1111_$(1)),$(cached_var_func_arg11111_$(1)))
endef
define get_cached_var_
$(if $(subst undefined,,$(origin cached_var_$(1))),$(cached_var_$(1)),$(eval $(call set_cached_var_,$(1)))$(cached_var_$(1)))
endef
define get_uniq_cached_var_
$(if $(subst undefined,,$(origin cached_var_$(1))),$(cached_var_$(1)),$(eval $(call set_cached_var_,$(1)))$(eval cached_var_$(1):=$(call Uniq,$(cached_var_$(1))))$(cached_var_$(1)))
endef
##############################################################################
find_project_file=$(call find_release_file,$1,$(LOCALTOP))
find_release_file=$(strip $(eval scram_pfp:=)$(foreach d,$(strip $2 $(RELEASETOP) $(FULL_RELEASE_FOR_A_PATCH)),$(if $(strip $(scram_pfp)),,$(eval scram_pfp:=$(wildcard $(d)/$(1)))))$(scram_pfp))
do_rsort=$(if $(wordlist 2,2,$(1)),$(call do_rsort,$(wordlist 2,$(words $(1)),$(1))) $(firstword $(1)),$(1))
rsort=$(call do_rsort,$(sort $1))
define Uniq
$(eval uniq_string_:=)$(strip $(foreach v,$(1),$(if $(filter $(v),$(uniq_string_)),,$(eval uniq_string_+=$(v))))$(uniq_string_))
endef
define AddCachedVariable
cached_var_function_$(1)  := $(subst $(colon),$(comma),$(2))
ifeq ($$(strip $(3)),)
$(1) = $$(call get_cached_var_,$(1))
else
$(1) = $$(call get_uniq_cached_var_,$(1))
endif
endef

CFLAGS_COMPILER:=ccompiler
FFLAGS_COMPILER:=f77compiler
GetCompilerType=$(if $(strip $1),$1,$(if $(strip $($2_COMPILER)),$($2_COMPILER),cxxcompiler))
GetCompiler=$(if $(strip $2),$2,$(if $(strip $($1_LOC_FLAGS_COMPILER)),$($1_LOC_FLAGS_COMPILER),$(SCRAM_COMPILER)))
GetVectorFlag=$(strip $(if $($1_LOC_FLAGS_COMPILER),$($($1_LOC_FLAGS_COMPILER)-cxxcompiler_EX_FLAGS_$3_TARGETS_$2),$($(SCRAM_COMPILER)-cxxcompiler_EX_FLAGS_$3_TARGETS_$2)))

define SetCompilerTargetsFlag
  $(eval $(1)_SCRAM_TARGETS:=)
  $(foreach v,$(self_EX_FLAGS_SCRAM_TARGETS),\
      $(eval u:=$(TARGETS_FLAGS_$(v)))\
      $(if $(strip $($(1)-cxxcompiler_EX_FLAGS_CXXFLAGS_TARGETS_$(u))),\
          $(eval $(1)_SCRAM_TARGETS+=$v),\
          $(warning Targets flag '$v' is not supported as Compiler '$(1)' does not set 'CXXFLAGS_TARGETS_$u' flag.)))
endef

define SetCompilerTargets
ifeq ($(strip $($(1)_SCRAM_TARGETS_SET)),)
  $(1)_SCRAM_TARGETS_SET:=1
  $$(eval $$(call SetCompilerTargetsFlag,$1))
endif
endef

define CreateTargetSymlink
$(dir $2)$1/$(notdir $2): $2
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_ln) -sf ../$$(@F) $$@
endef
#type,flag
AdjustFlag=$(strip $(filter-out $(strip $(REM_$1_$2) $(REM_$2)),$($2)) $($1_$2))
#$1,  $2,   $3,   $4,     $5
#prod,types,flags,compiler,compiler_type,target
AdjustFlags=$(eval s:=$(patsubst %.o,%,$(@F)))$(strip $(foreach f,$3,$(call AdjustFlagsImp,$1,$2,$f,$(call GetCompiler,$1,$4),$s,$(subst $(space),_,$2),$(if $(subst undefinedXundefined,,$(origin $1_FILE$(s)_LOC_FLAGS_REM_$f)X$(origin $1_FILE$(s)_LOC_FLAGS_$f)),$s,),$(call GetCompilerType,$5,$f),$(TARGETS_FLAGS_$6))))
#$1,  $2,  $3,  $4,      $5,      $6,            $7,             $8,          $9
#prod,type,flag,compiler,filename,types_one_word,over_file_flags,compile_type,target
define AdjustFlagsImp
$(if $(subst undefined,,$(origin ADJUST_PROD$1_FILE$7_TYPE$6_COMP$4_$8_$9_$3)),$(ADJUST_PROD$1_FILE$7_TYPE$6_COMP$4_$8_$9_$3),\
  $(eval ADJUST_PROD$1_FILE$7_TYPE$6_COMP$4_$8_$9_$3:=\
    $(strip \
      $(USER_PRE_$3) \
      $(filter-out \
        $(strip $(USER_PRE_$3) $(USER_$3) $(USER_REM_$3) $($1_FILE$5_LOC_FLAGS_REM_$3) $($1_LOC_FLAGS_REM_$3) $($1_FILE$5_LOC_FLAGS_$3) $($1_LOC_FLAGS_$3)\
         $(if $(strip $9),$(call GetVectorFlag,$1,$9,REM_$3))\
         $($4-$8_EX_FLAGS_REM_$3_ALL) $(foreach t,$2 $($1_CLASS),$(REM_$t_$3) $($t_$3))),\
        $($4-$8_EX_FLAGS_$3_ALL) $(foreach t,$2 $($1_CLASS),$($t_$3)) $($1_$3))\
      $(strip $(foreach t,$2 $($1_CLASS),$($t_$3)) $(if $(strip $9),$(call GetVectorFlag,$1,$9,$3)) $($1_LOC_FLAGS_$3) $($(2)_LOC_FLAGS_$3) $($(1)_FILE$5_LOC_FLAGS_$3) $(USER_$3))\
    )\
  )\
  $(ADJUST_PROD$1_FILE$7_TYPE$6_COMP$4_$8_$9_$3)\
)
endef
TOOLS_FLAGS_FUNC=$(strip $($(2)_LOC_FLAGS_$(1)_ALL))
TOOLS_DIR_FUNC=$(strip $(foreach d,$(wildcard $(2) $(filter-out $(2),$($(1)_LOC_$(2)_ALL))),$(if $(strip $(SYSTEM_$2_$d)),$4,$3)$d))
TOOLS_LIB_FUNC=$(strip $(addprefix -l,$($2)) $(addprefix -l,$($(1)_LOC_$(2)_ALL)))
$(foreach f,$(OVERRIDABLE_FLAGS),$(eval PreTool_$f=$$(call TOOLS_FLAGS_FUNC,$f,$$1)))
$(foreach f,$(OVERRIDABLE_FLAGS),$(eval Tool_$f=$$(PreTool_$f)))
$(foreach x,$(strip $(patsubst %_LIB,%,$(LIB_TYPES))),$(eval Tool_$(x)_LDFLAGS=$$(strip $$(call PreTool_$(x)_LDFLAGS,$$1) $$(call TOOLS_DIR_FUNC,$$1,LIBDIR,-L) $$(call TOOLS_LIB_FUNC,$$1,$(x)_LIB))))
Tool_CPPFLAGS=$(strip $(call PreTool_CPPFLAGS,$1) $(call AdjustFlags,$1,,CPPDEFINES) $(call TOOLS_DIR_FUNC,$1,INCLUDE,-I,-isystem))
Tool_LDFLAGS=$(strip $(call PreTool_LDFLAGS,$1) $(call TOOLS_DIR_FUNC,$1,LIBDIR,-L) $(if $(filter TEST_LIBRARY LIBRARY,$($(1)_CLASS)$($(1)_plugintype)),$(DLINK_LIBDIR) $(call TOOLS_LIB_FUNC,$1,CUDA_DLINK_LIB)) $(call TOOLS_LIB_FUNC,$1,LIB))
Tool_DependencyPCMS=$(foreach l,$($(1)_LOC_LIB_ALL),$(if $(strip $(filter 0,$($(l)_CXXMODULES))),$(foreach p,$($(l)_LCGDICTS) $($(l)_ROOTDICTS),-m $(l)_$(p)r_rdict.pcm))) \
                      $(foreach u,$($(1)_LOC_USE_ALL),$(foreach p,$($(u)_EX_FLAGS_PCMS),-m lib$(p)_rdict.pcm))
CalculateToolOrder=$(if $(strip $($(1)_EX_USE)),$(shell $(CMD_python3) \-c 'print(sorted([$(2) $(foreach dep,$(foreach d,$($(1)_EX_USE),$($d)),$(comma)$($(dep)_ORDER))])[0]-1)'),$(2))
FindToolDependency=$(sort $(filter-out $(3),$(foreach dep,$(foreach d,$($(1)_$(2)_USE),$($d)),$(dep) $($(dep)_EX_USE_ALL))))
FindUOLibDependency=$(sort $(foreach d,$($(1)_EX_USE),$($($d)_EX_LIB) $($($d)_EX_UOLIB)))
FindToolDepVariable=$($(1)_$(3)_$(2)) $(foreach var,$(sort $(foreach dep,$($(1)_$(3)_USE_ALL),$($(dep)_ORDER)$(colon)$(dep))),\
                      $($(word 2,$(subst $(colon),$(space),$(var)))_EX_$(2)))
FindToolDepVariableR=$(foreach var,$(call rsort,$(foreach dep,$($(1)_$(3)_USE_ALL),$($(dep)_ORDER)$(colon)$(dep))),\
                      $($(word 2,$(subst $(colon),$(space),$(var)))_EX_$(2))) $($(1)_$(3)_$(2))

define ProductOrder
ifeq ($(strip $($(1)_ORDER)),)
$(call AddCachedVariable,$(1)_ORDER,CalculateToolOrder:$(1):$(if $(strip $(2)),$(strip $(2)),99999),)
endif
$(foreach err,$(foreach use,$(filter-out $(ALL_TOOLS),$(sort $($(1)_LOC_USE) $($(1)_EX_USE))),$(if $($($(use))_EX_USE),,$(use))),$(4)_USE_ERR+=$(err))
endef

define ProductCommonVarsTools
$(eval $(call ProductOrder,$1,$2,$3,$4))
$(foreach type,INCLUDE LIB $(LIB_TYPES) LIBDIR,$(eval $(call AddCachedVariable,$(1)_EX_$(type)_ALL,FindToolDepVariable:$(1):$(type):EX,1)))
$(foreach type,$(foreach f,$(ALL_COMPILER_FLAGS),FLAGS_$(f)),$(eval $(call AddCachedVariable,$(1)_EX_$(type)_ALL,FindToolDepVariableR:$(1):$(type):EX,)))
$(foreach type,$(foreach f,$(ALL_COMPILER_FLAGS),FLAGS_REM_$(f)),$(eval $(call AddCachedVariable,$(1)_EX_$(type)_ALL,FindToolDepVariable:$(1):$(type):EX,)))
$(call AddCachedVariable,$(1)_EX_USE_ALL,FindToolDependency:$(1):EX,)
ifeq ($(strip $($1_EX_FLAGS_SYSTEM_INCLUDE)),1)
$$(foreach i,$($1_EX_INCLUDE),$$(eval SYSTEM_INCLUDE_$$i:=1))
endif
endef

define SetProductCommonVars
$(foreach scope,$(if $(strip $($(1)_EX_LIB)$($(1)_EX_USE)),EX) LOC,$(foreach type,$(SET_PRODUCT_VARIABLES),$(eval $(call AddCachedVariable,$(1)_$(scope)_$(type)_ALL,FindToolDepVariable:$(1):$(type):$(scope),1))))
$(foreach scope,$(if $(strip $($(1)_EX_LIB)$($(1)_EX_USE)),EX) LOC,$(foreach type,$(foreach f,$(OVERRIDABLE_FLAGS),FLAGS_$(f)),$(eval $(call AddCachedVariable,$(1)_$(scope)_$(type)_ALL,FindToolDepVariableR:$(1):$(type):$(scope),))))
$(foreach scope,$(if $(strip $($(1)_EX_LIB)$($(1)_EX_USE)),EX) LOC,$(eval $(call AddCachedVariable,$(1)_$(scope)_USE_ALL,FindToolDependency:$(1):$(scope):$($(1)_DROP_DEP),)))
$(foreach f,$(OVERRIDABLE_FLAGS),$(eval $(call AddCachedVariable,$(1)_$f,Tool_$f:$(1),)))
endef

define ProductCommonVars
$(eval $(call ProductOrder,$1,$2,$3,$4))
$(eval $(call SetProductCommonVars,$1))
endef

define ProductCommonVarsExternal
ifneq ($(strip $($(1)_BuildFile)),)
$(eval $(call AddCachedVariable,$(1)_ORDER,CalculateToolOrder:$(1):99999,))
$(eval $(call AddCachedVariable,$(1)_EX_LIB_ALL,FindToolDepVariable:$(1):LIB:EX,1))
$(eval $(call AddCachedVariable,$(1)_EX_USE_ALL,FindToolDependency:$(1):EX,))
$(eval $(call AddCachedVariable,$(1)_EX_UOLIB,FindUOLibDependency:$(1),))
$(eval $(foreach r,$(ALL_EXTRA_PRODUCT_RULES),$(call $r_ExtraRules,$1)))
else
$(1)_ORDER:=99999
endif
endef

ifeq ($(strip $(BUILD_LOG)),yes)
define package_outputlog
  if [ -d $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1) ] ; then \
    for f in `$(CMD_find) $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1) -name "*" -type f | $(CMD_grep) -v  '/build\.log$$'` ; do \
      $(CMD_cat) $$f >> $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1)/build.log &&\
      $(CMD_rm) -f $$f && \
      $(CMD_touch) -t $(OLD_TIMESTAMP) $$f; \
    done ;\
    $(CMD_touch) -t $(OLD_TIMESTAMP) $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1)/build.log ;\
    $(CMD_cat) $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1)/build.log ;\
  fi
endef
else
package_outputlog:=true
endif

define checklibs
  $(eval xliberr:=)$(foreach x,$($(1)_LOC_LIB),$(if $(strip $(filter-out $($(1)_PACKAGE),$($(x)_PACKAGE))),$(eval xliberr+=$x:$($(x)_PACKAGE)),)) \
  if [ "X$(xliberr)" != "X" ] ; then \
    $(CMD_echo) "****ERROR: Skipping build of $1 generated from $($(1)_PACKAGE) as it is explicitly linking following library/libraries." ;\
    for x in $(xliberr) ; do $(CMD_echo) "    -> $$x" | $(CMD_sed) -e 's|:self/| from |';  done;\
    $(CMD_false);\
  fi
endef
define biglib_setup
  proj_tool=`$(CMD_echo) $(SCRAM_PROJECTNAME) | tr '[A-Z]' '[a-z]'` ; \
  tool_file=$(SCRAM_CONFIGDIR)/toolbox/$(SCRAM_ARCH)/tools/selected/$$proj_tool.xml ;\
  BIGLIB_RESET_ENV=NO ;\
  for tool in $(SCRAM_CONFIGDIR)/Self.xml $(SCRAM_CONFIGDIR)/toolbox/$(SCRAM_ARCH)/tools/selected/$$proj_tool.xml ; do \
    [ -f $$tool ] || continue ;\
    if [ $@ = "disable-biglib" ] ; then \
      [ `grep ':DISABLED_BIGLIB:' $$tool | $(CMD_wc) -l` -eq 0 ] || continue ;\
      $(CMD_sed) -i -e 's|^\( *<runtime .*/biglib/.*\)|<!--:DISABLED_BIGLIB: \1 :DISABLED_BIGLIB:-->|' $$tool ;\
    elif [ `grep ':DISABLED_BIGLIB:' $$tool | $(CMD_wc) -l` -gt 0 ] ; then \
      $(CMD_sed) -i -e 's|<!--:DISABLED_BIGLIB: ||;s| :DISABLED_BIGLIB:-->||' $$tool ;\
    else \
      continue ;\
    fi ;\
    if [ "$$tool" = "$(SCRAM_CONFIGDIR)/Self.xml" ] ; then \
      $(SCRAM) setup self ;\
    else \
      $(CMD_echo) Setting up $$proj_tool;\
      $(SCRAM) setup $$proj_tool;\
    fi;\
    BIGLIB_RESET_ENV=YES ;\
  done ;\
  if [ "X$$BIGLIB_RESET_ENV" = "XYES" ] ; then \
    $(CMD_echo) "*** Please re-run cmsenv command to get your runtime environment updated ****";\
  fi
endef
define UpdateXDEPS
ifneq ($$(strip $($(1)_DNN_NAME)),)
$$(eval $$(call DNNXDEPS,$1))
endif
endef
define FileSearchPath
$(eval file_search_path_tmp_:=)$(foreach d,$(subst $(path_seperator),$(space),$($(2))),$(if $(file_search_path_tmp_),,$(if $(strip $(wildcard $(d)/$(1))),$(eval file_search_path_tmp_:=$(d)/$(1)))))$(file_search_path_tmp_)
endef
define GetMissingSymbolFlags
  $(if $($(1)_libcheck),$(if $2,$(info @@@@ Checking for missing symbols was SKIPPED due to NO_LIB_CHECKING flag in BuildFile: $(@F)),),$(MISSING_SYMBOL_FLAGS))
endef
##############################################################################
define BuildClean
  if [ "X$(1)" != "X" ] ; then \
    if [ -d $(WORKINGDIR)/$(1) ] ; then \
      regexp=$2; \
      if [ "X$$regexp" == "X" ] ; then regexp='[0-9][0-9]'; fi ;\
      $(CMD_find) $(WORKINGDIR)/$(1) -name "AUTOCLEAN.*.clean" -type f | $(CMD_xargs) $(CMD_cat) | $(CMD_grep) "^$$regexp:" | $(CMD_sort) | $(CMD_uniq) | $(CMD_sed) -e "s|^$$regexp:||" > $(WORKINGDIR)/$(1)/.AUTOCLEAN ; \
      if [ "X$3" == "X" ] ; then $(CMD_cat) $(WORKINGDIR)/$(1)/.AUTOCLEAN; fi;\
      $(CMD_sh) $(WORKINGDIR)/$(1)/.AUTOCLEAN;\
      $(CMD_rm) -rf $(WORKINGDIR)/$(1); \
      $(CMD_rm) -rf $(WORKINGDIR)/classes/$(1); \
    fi;\
    if [ -d $(SCRAMSTORENAME_INCLUDE)/$(SCRAM_ARCH)/$(1) ] ; then \
      $(CMD_rm) -rf $(SCRAMSTORENAME_INCLUDE)/$(SCRAM_ARCH)/$(patsubst $(SCRAM_SOURCEDIR)/%,%,$(1)); \
      $(CMD_rm) -rf $(SCRAMSTORENAME_INCLUDE)/$(SCRAM_ARCH)/$(1); \
    fi;\
  fi
endef

define AutoCleanFile
$(dir $(1))/AUTOCLEAN.$(notdir $(1)).$(2).clean
endef
##############################################################################
# Macros for pre/post build steps:
define copy_build_product
  if [ ! -d $(LOCALTOP)/$(1) ]; then 	\
    $(CMD_mkdir) -p $(LOCALTOP)/$(1)	&&\
    $(CMD_echo) "Creating product storage directory: $(LOCALTOP)/$(1)"; \
  fi &&\
  $(CMD_echo) "Copying $@ to productstore area:" &&\
  $(CMD_echo) "01:$(CMD_rm) -f $(1)/$(@F)" > $(call AutoCleanFile,$@,prod) &&\
  $(CMD_rm) -f $(LOCALTOP)/$(1)/$(@F) &&\
  $(CMD_cp) $@ $(LOCALTOP)/$(1) || ($(CMD_rm) -f $@ && $(CMD_echo) ">> Deleted: $@" && exit 1)
endef

define copy_lib_to_main_productstore
  $(call install_name_tool, @rpath/$(@F),$@) && \
  $(call install_name_tool_rpath, $(LOCALTOP)/$(1),$@) && $(call copy_build_product,$(1))
endef

define copy_bin_to_main_productstore
   $(call install_name_tool_rpath, $(LOCALTOP)/$(patsubst bin%,lib%,$1)/,$@) && $(call copy_build_product,$(1))
endef

define copy_test_to_main_productstore
  $(call install_name_tool_rpath, ${LOCALTOP)/$(patsubst test%, lib%,$1),$@) && $(call copy_build_product,$(1))
endef

define copy_py_to_main_productstore
  $(call copy_build_product,$(1))
endef

define delete_build_prod
  if [ "$(KEEP_ON_BUILDING)" = "yes" ] ; then \
    [ -e $@ ] && $(CMD_touch) -t $(OLD_TIMESTAMP) $@ ; \
  else \
    $(CMD_rm) -f $@ ;\
  fi; \
  $(CMD_rm) -f $(LOCALTOP)/$(1)/$(@F)
endef

define delete_plugin_build_prod 
  $(call delete_build_prod,$(1)) &&\
  if [ "X$(2)" != X ] ; then \
    if [ -f $($(2)_pluginprod) ] ; then \
      $(CMD_touch) $(LOCALTOP)/$(SCRAM_INTwork)/cache/$($(2)_plugintype)_$($(2)_pluginrefresh) &&\
      $(CMD_rm) -f $(LOCALTOP)/$($(2)_pluginprod) ;\
    fi ;\
  fi
endef

define	clean_path
  @if [ -d $(LOCALTOP)/$(1) ] ; then \
    $(CMD_echo) "Cleaning local working directory:$(1)"; \
    $(CMD_rm) -rf $(LOCALTOP)/$(1) ; \
  fi
endef

define clean_prod
  @if [ -f $(LOCALTOP)/$(1) ] ; then \
    $(CMD_echo) "Cleaning product: $(1)" ; \
    $(CMD_rm) -f $(LOCALTOP)/$(1); \
  fi    
endef

define clean_src_scripts
  @$(call clean_files,$(1),$(2))
endef

define clean_files
  for f in $(1); do \
    $(CMD_rm) -rf $(LOCALTOP)/$(2)/$$f;	\
  done
endef

define do_plugin_refresh
endef
#############################################################################
##############################################################################
ifeq ($(filter-out osx%,$(SCRAM_ARCH)),)
  define install_name_tool
    $(CMD_echo) "calling install_name_tool -id $(1) $(2)" &&\
    install_name_tool -id $1 $2
  endef
  define install_name_tool_rpath
    $(CMD_echo) "calling install_name_tool -add_rpath $(1) $(2)" &&\
    install_name_tool -add_rpath $1 $2
  endef
else
  define install_name_tool
    $(CMD_true)
  endef
  define install_name_tool_rpath
    $(CMD_true)
  endef
endif

define run_plugin_refresh_cmd
  @if [ -f $< ] ; then \
    if [ -f $@ ] ; then \
      if [ -s $@ ] ; then \
        touch -t 198001010100 $@ ;\
      else \
        rm -f $@ ; \
      fi;\
    fi;\
    $(call do_$(1),$(@D)) &&\
    touch $@ ;\
  fi
endef
ifdef SCRAM_DUMP_PRODUCT_TO_SOURCE
define DumpProduct2SRC
endef
else
DumpProduct2SRC=
endif

##############################################################################
##############################################################################
#Compilation Rules
GetCompilerData=$(strip $(if $(strip $($1_LOC_FLAGS_COMPILER)),$($($1_LOC_FLAGS_COMPILER)_$2),$($(SCRAM_COMPILER)_$2)))
GetCXX=$(if $(strip $($1_LOC_FLAGS_COMPILER)),$($($1_LOC_FLAGS_COMPILER)_CXX),$(if $(strip $2),$($2_CXX),$(CXX)))
GetCC=$(if  $(strip $($1_LOC_FLAGS_COMPILER)),$($($1_LOC_FLAGS_COMPILER)_CC),$(if $(strip $2),$($2_CC),$(CC)))
GetFC=$(if  $(strip $($1_LOC_FLAGS_COMPILER)),$($($1_LOC_FLAGS_COMPILER)_FC),$(if $(strip $2),$($2_FC),$(FC)))
ifeq ($(strip $(SCRAM_GENERATE_LLVM_CCDB)),YES)
JsonStr = $(subst ",\\\",$(subst \,\\,$1))
define run_compile_command
  @[ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) ">> Generating LLVM Compile command for $(2) $< " &&\
  $(CMD_echo) "{\"directory\":\"$(call JsonStr,$(LOCALTOP))\",\
                \"file\":\"$(call JsonStr,$<)\",\
                \"command\":\"$(call JsonStr,$(notdir $(firstword $4)) $(wordlist 2,999999,$4) $< -o $(subst .$(LLVM_CCDB_EXT),,$@))\"}" > $@
endef
else
define run_compile_command
  @$(startlog_$(1)) [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) ">> Compiling $(2) $<" &&\
  $(VERB_ECHO) $(SCRAM_PREFIX_COMPILER_COMMAND) "$4 $5 $< -o $@" &&\
              ($(SCRAM_PREFIX_COMPILER_COMMAND) $4 $5 $< -o $@ || ($(if $(strip $6),$4 $6 $< -o $(basename $@).d && $(CMD_sed) -i -e 's|.*:|$@:|' $(basename $@).d && exit 1,exit 1))) $3 $(endlog_$(1))
endef
endif
define compile_cxx_common
  $(call run_compile_command,$2,$(strip $7 $4),$5,$(call GetCXX,$1) $(COMPILE_OPTIONS) $(3) $(CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS),$(if $(6),,$(CXX_MMD) $(CXX_MF) $(basename $@).d),$(if $(6),,$(CXX_MM)),$7)
endef
define compile_c_common
  $(call run_compile_command,$2,$(strip $7 $4),$5,$(call GetCC,$1) $(COMPILE_OPTIONS) $(3) $(COPTIMISEDFLAGS) $(CSHAREDOBJECTFLAGS),$(if $(6),,$(C_MMD) $(C_MF) $(basename $@).d),$(if $(6),,$(C_MM)),$7)
endef
ifneq ($(strip $(SCRAM_GENERATE_LLVM_CCDB)),YES)
ifeq ($(strip $(SCRAM_DEFAULT_COMPILER)),icc)
define compile_fortran_common
  $(call run_compile_command,$2,$(strip $7 $4),$5,$(call GetFC,$1)  $(COMPILE_OPTIONS) $(3) $(FOPTIMISEDFLAGS) $(FSHAREDOBJECTFLAGS),,,$7)
endef
else
define compile_fortran_common
  $(call run_compile_command,$2,$(strip $7 $4),$5,$(call GetFC,$1)  $(COMPILE_OPTIONS) $(3) $(FOPTIMISEDFLAGS) $(FSHAREDOBJECTFLAGS),$(if $(6),,$(F77_MMD) $(F77_MF) $(basename $@).d),$(if $(6),,$(F77_MM)),$7)
endef
endif
endif

#LLVM Analyzer Rules
define run_analyze_command
  @$(startlog_$(2)) [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) ">> Analyzing $(4) $< " &&\
  $(VERB_ECHO) $5 $< -o /dev/null &&\
               $5 $< -o /dev/null $(endlog_$(2))
endef
define analyze_cxx_common
  $(call run_analyze_command,$1,$2,$3,$4,$(if $(strip $(SCRAM_DXR_RUN)),$(DXR_CXX) -fsyntax-only -xc++,$(CXX) -c) $(3) $(CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS))
endef
define analyze_c_common
  $(call run_analyze_command,$1,$2,$3,$4,$(if $(strip $(SCRAM_DXR_RUN)),$(DXR_CC)  -fsyntax-only -xc,$(CC) -c)    $(3) $(COPTIMISEDFLAGS) $(CSHAREDOBJECTFLAGS))
endef

##############################################################################
define compile_cxx
  $(call compile_cxx_common,$1,$2,$(call AdjustFlags,$1,,CPPFLAGS CXXFLAGS,,,$3),,,,$3)
endef
define compile_cxx_edm
  $(call compile_cxx_common,$1,$2,$(call AdjustFlags,$1,EDM,CPPFLAGS CXXFLAGS,,,$3),edm plugin,,,$3)
endef
define compile_c
  $(call compile_c_common,$1,$2,$(call AdjustFlags,$1,,CPPFLAGS CFLAGS,,,$3),,,,$3)
endef
define compile_c_edm
  $(call compile_c_common,$1,$2,$(call AdjustFlags,$1,EDM,CPPFLAGS CFLAGS,,,$3),edm plugin,,,$3)
endef  
define compile_fortran
  $(call compile_fortran_common,$1,$2,$(call AdjustFlags,$1,,CPPFLAGS FFLAGS,,,$3),,,,$3)
endef  

define analyze_cxx
  $(call analyze_cxx_common,$1,$2,$(call AdjustFlags,$1,,CPPFLAGS CXXFLAGS))
endef
define analyze_c
  $(call analyze_c_common,$1,$2,$(call AdjustFlags,$1,,CPPFLAGS CFLAGS))
endef
##############################################################################
# Dictionary compilation
define processTmpMMDData
  [ -f $(basename $@).d ] && $(CMD_sed) -e 's# $1# $3#g;s#$2:#$<:#g;s#^  *\.\./\(\.\./\)*# #g' $(basename $@).d | $(CMD_grep) -v '^ *\\$$' > $<.dx; $(CMD_mv) $<.dx $(basename $@).d
endef
define compile_python
  $(CMD_echo) ">> Compiling python$(if $(strip $($2_LOC_FLAGS_PYTHON_VERSION)),$($2_LOC_FLAGS_PYTHON_VERSION),$(DEFAULT_PYTHON)) modules $1" &&\
  $(VERB_ECHO) "$(if $(strip $($2_LOC_FLAGS_PYTHON_VERSION)),$(CMD_python$($2_LOC_FLAGS_PYTHON_VERSION)),$(CMD_python)) -m compileall -q $1" &&\
  $(if $(strip $($2_LOC_FLAGS_PYTHON_VERSION)),$(CMD_python$($2_LOC_FLAGS_PYTHON_VERSION)),$(CMD_python)) -m compileall -q $1 || $(CMD_touch) $(COMMON_WORKINGDIR)/cache/python_error
endef

define run_postprocess
  $(if $(strip $($(1)_POSTPROCESSING)),($(FORCE_BUILD_START) $(foreach f,$(foreach x,$(sort $($(1)_POSTPROCESSING)),$(lastword $(subst :,$(space),$x))),$(call $(firstword $(subst @,$(space),$f)),$1,$(word 2,$(subst @,$(space),$f)));) $(FORCE_BUILD_END)) $2)
endef
define add_postprocessing
  $(eval f:=$(subst $(space),_,$2:$3@arg1=$4;arg2=$5;arg3=$6;arg4=$7;arg5=$8))$(if $(strip $(filter $(f),$($1_POSTPROCESSING))),,$1_POSTPROCESSING+=$(f))
endef
##############################################################################
define processMMDData
  $(startlog_$(2))$(CMD_rm) -f $3 && $(CMD_touch) $3 &&\
  for dep in $4 ; do \
    if [ -f $$dep ] ; then $(CMD_sed) -e 's|: *|: \\\'$$'\n|' $$dep |  $(CMD_sed) -e 's|.*$(LOCALTOP)/| |g$(if $(strip $(DROP_EXTERNAL_HEADER_MMD_DEPS)),;s|^  */.*||,)' | $(CMD_grep) -v '^ *\\$$' | $(CMD_grep) -v '^ *$$' >> $3 ; $(CMD_echo) "" >> $3; fi ; \
  done &&\
  $(if $(strip $(DROP_EXTERNAL_HEADER_MMD_DEPS)),$(CMD_true),$(call addMMDDepsRules,$3)) &&\
  $(if $(strip $(CHECK_PRIVATE_HEADERS)),($(CHECK_PRIVATE_HEADERS_SCRIPT) $3 || $(IGNORE_PRIVATE_HEADER_ERRORS)),$(CMD_true)) $(endlog_$(2))
endef
define addMMDDepsRules
  $(CMD_tr) ' ' '\012' <  $1 | $(CMD_sed) -e 's/^'\\\\'$$//;/^$$/ d;/:$$/ d;s/$$/ :/' > $1.new &&\
  $(CMD_sort) $1.new | $(CMD_uniq) >> $1 &&\
  $(CMD_rm) -f $1.new
endef
##############################################################################
# Library linking Rules
# Shared library linking
define link_lib_common
  @$(startlog_$(2))$(CMD_echo) ">> Building $(6) $(5) $@" &&\
  $(VERB_ECHO)                $(call GetCXX,$1) $(7) $(CXXSHAREDFLAGS) $(call GetMissingSymbolFlags,$1)     $(if $(strip $6),$($(1)_objs_$6),$($(1)_objs)) -o $@ $(8) &&\
  (($(call checklibs,$(1)) && $(call GetCXX,$1) $(7) $(CXXSHAREDFLAGS) $(call GetMissingSymbolFlags,$1,yes) $(if $(strip $6),$($(1)_objs_$6),$($(1)_objs)) -o $@ $(8)) || ($(call delete_plugin_build_prod,$(3),$(4)) && exit 1)) &&\
  if [ "X$($(1)_no_lib_copy)" = X ] ; then \
    $(call copy_lib_to_main_productstore,$(3)/$(6)) ;\
  fi &&\
  true $(if $(strip $6),&& $(CMD_echo) ">> Skipping EDM Checks for $1/$6",$(call run_edm_checks,$1,$2,$3,$4)) $(endlog_$(2))
  @($(call processMMDData,$1,$2,$@.dep,$(foreach d,$($(1)_objs:.$(OBJEXT)=.d),$d))) &&\
  ([ -d $(WORKINGDIR)/cache/prod/$(6) ] || $(CMD_mkdir) -p $(WORKINGDIR)/cache/prod/$(6) && $(CMD_touch) $(WORKINGDIR)/cache/prod/$(6)/lib$(1))
endef
define link_lib
  $(call link_lib_common,$1,$2,$3,$4,shared library,$5,$(call AdjustFlags,$1,,CXXFLAGS,,,$5) ,$(call AdjustFlags,$1,,LDFLAGS,,,$5))
endef  
define link_lib_edm
  $(call link_lib_common,$1,$2,$3,$4,edm plugin,$5,$(call AdjustFlags,$1,EDM,CXXFLAGS,,,$5),$(call AdjustFlags,$1,EDM,LDFLAGS,,,$5))
endef
##############################################################################
# Binary/test building Rules
# Binary building 
define build_bin
  @$(startlog_$(2))$(CMD_echo) ">> Building binary $(1)" &&\
  $(VERB_ECHO)                $(call GetCXX,$1) $(call AdjustFlags,$1,,CXXFLAGS) $(CXXSHAREDOBJECTFLAGS) $($(1)_objs) $(call AdjustFlags,$1,,LDFLAGS) -o $@ &&\
  (($(call checklibs,$(1)) && $(call GetCXX,$1) $(call AdjustFlags,$1,,CXXFLAGS) $(CXXSHAREDOBJECTFLAGS) $($(1)_objs) $(call AdjustFlags,$1,,LDFLAGS) -o $@) || ($(call delete_build_prod,$(3)) && exit 1)) &&\
  $(call copy_bin_to_main_productstore,$(3)) $(endlog_$(2))
  @$(call processMMDData,$1,$2,$@.dep,$(foreach d,$($(1)_objs:.$(OBJEXT)=.d),$d))
endef
# Test executable building
define build_test
  $(call build_bin,$(1),$(2),$(3))
endef  
##############################################################################
# Data download and Copy
define script_copy
  @$(startlog_$(2))[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
  $(CMD_rm) -rf $@ &&\
  $(CMD_cp) -rp $< $@	&&\
  $(CMD_echo) ">> Copied $(@F)" $(endlog_$(2))
endef
define copy_src_scripts
  @$(startlog_$(2))$(CMD_echo) "------- copying scripts from $(1) -------" &&\
  for f in $(3); do \
    [ -f $(LOCALTOP)/$(1)/$$f ] || continue ;\
    $(CMD_echo) ">> Copying $(LOCALTOP)/$(1)/$$f"	&&\
    $(CMD_cp) -p $(LOCALTOP)/$(1)/$$f  $(LOCALTOP)/$(4) || continue ;\
  done $(endlog_$(2))
endef
define src2store_copy
  @$(startlog_$(2)) $(CMD_echo) "------- copying files from $(1) -------" &&\
  [ -d $(LOCALTOP)/$(4) ] || $(CMD_mkdir) -p $(LOCALTOP)/$(4) &&\
  for f in $(5) ; do \
    $(CMD_cp) -urpT $(LOCALTOP)/$(1)/$$f $(LOCALTOP)/$(4)/$$f &&\
    $(CMD_echo) ">> copied $$f"; \
  done ;\
  for f in $(3) ; do \
    [ -d $(LOCALTOP)/$(1)/$$f ] && continue ;\
    [ ! -x $(LOCALTOP)/$(1)/$$f ] && continue ;\
    $(CMD_cp) -urpT $(LOCALTOP)/$(1)/$$f $(LOCALTOP)/$(4)/$$f &&\
    $(CMD_echo) ">> copied $$f"; \
  done $(endlog_$(2))
endef
define copy_python_products
  @$(startlog_$(2))[ -d $(4) ] || ($(CMD_mkdir) -p $(4) && $(CMD_echo) ">> $(4) created") &&\
  $(CMD_cp) $(3) $(4) $(endlog_$(2))
endef
#############################################################################
# Tesings test executable
define run_test
  @if [ "X$($(1)_NO_TESTRUN)" == "Xyes" ] ; then \
    $(CMD_echo) "Package "$(patsubst $(SCRAM_SOURCEDIR)/%/test,%,$(4))": Skipping test $(1)"; \
  else \
    $(CMD_echo) "Package "$(patsubst $(SCRAM_SOURCEDIR)/%/test,%,$(4))": Running test $(1)" &&\
    [ -d $($(1)_objdir) ] || $(CMD_mkdir) -p $($(1)_objdir) &&\
    $(CMD_rm) -f $($(1)_objdir)/testing.log; $(CMD_touch) $($(1)_objdir)/testing.log  &&\
    $(CMD_echo) " " >> $($(1)_objdir)/testing.log &&\
    $(CMD_echo) "===== Test \"$(1)\" ====" >> $($(1)_objdir)/testing.log &&\
    STIME=$$(date +%s) &&\
    export SCRAM_TEST_NAME="$1" && export SCRAM_TEST_PATH="$(LOCALTOP)/$4" && export SCRAM_TEST_PACKAGE="$($(1)_PROD_PACKAGE)" && export SCRAM_TEST_PRE_TESTS="$($(1)_PRE_TEST)" &&\
    export PATH=$(LOCALTOP)/$(2):$(LOCALTOP)/$(4):$(PATH) && $(strip $($(1)_TEST_ENV)) (($(if $(strip $(${1}_USE_UNITTEST_DIR)),$(CMD_rm) -rf $(UNITTEST_DIR)/$1 && $(CMD_mkdir) -p $(UNITTEST_DIR)/$1 && cd $(UNITTEST_DIR)/$1 &&,) $(if $(strip $(${1}_LOC_FLAGS_NO_TEST_PREFIX)),,$(EDM_TOOLS_PREFIX)) $(SCRAM_TEST_RUNNER_PREFIX) $($(1)_TEST_RUNNER_CMD) && $(CMD_echo) "" && $(CMD_echo) "---> test $(1) succeeded") >> $($(1)_objdir)/testing.log 2>&1 || ($(CMD_echo) "" && $(CMD_echo) "---> test $(1) had ERRORS") >> $($(1)_objdir)/testing.log) &&\
    let UT_TIME=$$(date +%s)-$${STIME} || true &&\
    $(CMD_echo) "TestTime:$${UT_TIME}" >> $($(1)_objdir)/testing.log &&\
    $(CMD_echo) "^^^^ End Test $(1) ^^^^" >> $($(1)_objdir)/testing.log &&\
    $(CMD_sed) -i -e 's# \(Entering\|Leaving\)  *Package # \1 Recursive Package #g' $($(1)_objdir)/testing.log &&\
    $(CMD_cat) $($(1)_objdir)/testing.log &&\
    $(CMD_cat) $($(1)_objdir)/testing.log >> $(LOCALTOP)/$(3)/testing.log; \
  fi
endef

##############################################################################
define config_update
  @[ -d  $(@D)] || $(CMD_mkdir) -p $(@D) ; $(CMD_touch) $@ ;\
  if [ "X$($(1)_BuildFile)" != X ] ; then \
    $(CMD_touch) -r $($(1)_BuildFile) $(WORKINGDIR)/cache/bf/$(1);\
  fi
endef
define libdeps
$(prelibdeps) $(addprefix $(WORKINGDIR)/cache/prod/lib,$(sort $($(1)_LOC_LIB) $(foreach u,$($(1)_LOC_USE) $($(1)_EX_USE),$($u) $($($u)_EX_LIB) $($($u)_EX_UOLIB))))
endef
##############################################################################
define create_subdir_init
  for d in `find $1 -mindepth 1 -name '*' -type d` ; do \
    [ -e $$d/__init__.py ] || $(CMD_echo) "#Automatically created by SCRAM" > $$d/__init__.py ;\
  done
endef
define create_package_init
  $(CMD_echo) "#Automatically created by SCRAM" > $@ &&\
  $(CMD_echo) "import os" >> $@ &&\
  $(CMD_echo) "__path__.append(os.path.dirname(os.path.abspath(__file__).rsplit('/$(1)/',1)[0])+'/$(SCRAMSTORENAME_CFIPYTHON)/$(1)')" >> $@
endef
define create_subsystem_init
  if [ "X${RELEASETOP}" = "X" ] ; then \
    $(CMD_echo) "import os" > $@ ;\
    $(CMD_echo) "localrt=os.getenv('LOCALRT', None)" >> $@ ;\
    $(CMD_echo) "if localrt != None:__path__.insert(0,localrt+'/$(@D)')" >> $@ ;\
  else \
    $(CMD_echo) "__path__.append('${RELEASETOP}/$(@D)')" > $@ ;\
  fi
endef
#############################################################################
define FinalizeSubSystem
  $(CMD_echo) ">> Subsystem $(1) built"
endef
define FinalizePackage
  $(DO_BUILD_LOG) $(CMD_echo) ">> Leaving Package $(1)" &&\
  $(DO_BUILD_LOG) $(CMD_echo) ">> Package $(1) built" $(if $(HOOK_PACKAGE), && $(HOOK_PACKAGE) -e -p $1 $(if $(KEEP_ON_BUILDING), || $(CMD_true)))
endef
define SubSystem
.PHONY: $(1) $(SCRAM_SOURCEDIR)/$(1) $(2) all_$(2) runtests_$(2) unittests_$(2) compile_$(2) precompile_$(2) edm_checks_$(2) scripts_$(2)
ifneq ($(strip $(SCRAM_IGNORE_PACKAGES)),)
subdirs_$(2) := $$(filter-out $$(addprefix $(SCRAM_SOURCEDIR)_,$$(subst /,_,$(SCRAM_IGNORE_PACKAGES))),$$(subdirs_$(2)))
endif
$(call add_postprocessing,$1,99,FinalizeSubSystem)
$(1) $(SCRAM_SOURCEDIR)/$(1) $(2) all_$(2): $$(subdirs_$(2))
	@$$(call run_postprocess,$1)
runtests_$(2): $$(addprefix runtests_,$$(subdirs_$(2)))
	@:
unittests_$(2): $$(addprefix unittests_,$$(subdirs_$(2)))
	@:
runpython_$(2): $$(addprefix runpython_,$$(subdirs_$(2)))
	@:
compile_$(2): $$(addprefix compile_,$$(subdirs_$(2)))
	@:
precompile_$(2): $$(addprefix precompile_,$$(subdirs_$(2)))
	@:
edm_checks_$(2): $$(addprefix edm_checks_,$$(subdirs_$(2)))
	@:
scripts_$(2): $$(addprefix scripts_,$$(subdirs_$(2)))
	@:
$(SCRAMSTORENAME_PYTHON)/$1/__init__.py: $(SCRAMSTORENAME_PYTHON)/__init__.py
	@[ -L $$(@D) ] || ([ -d $$(@D) ] || $(CMD_mkdir) $$(@D) && $$(call create_subsystem_init))
endef
define EmptyPackage
$(1)_libdeps      := $$(call libdeps,$1)
$(1)_CONFIGDEPS := $(CONFIGDEPS) $$(sort $$(foreach u,$$(sort $($(1)_LOC_USE) $($(1)_EX_USE)),$$($$($$(u))_XDEPS) $$(if $$($$($$(u))_BuildFile),$$($$($$(u))_BuildFile),$$(filter $(SCRAM_TOOLS_DIR)/$$(u),$(ToolTimeStamps)))))
ifneq ($$(strip $($(1)_BuildFile)),)
ALL_BUILDFILES += $($(1)_BuildFile)
$($(1)_BuildFile): $$($(1)_CONFIGDEPS)
	@$(CMD_touch) $($(1)_BuildFile)
endif
$(WORKINGDIR)/cache/prod/lib$(1): $($(1)_BuildFile) $$($(1)_libdeps)
	@$(CMD_touch) $$@
endef
define Package
.PHONY: $(1) $(SCRAM_SOURCEDIR)/$(1) $(2) all_$(2) runtests_$(2) unittests_$(2) compile_$(2) precompile_$(2) edm_checks_$(2) scripts_$(2)
$(call add_postprocessing,$1,99,FinalizePackage)
$(1)_SUBSYSTEM:=$(patsubst %/,%,$(dir $1))
ifeq ($(strip $(BUILD_LOG)),yes)
logfile_$(2) := $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1)/build.log
redirectlog_$(2) := >> $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR)/$(1)/build.log
else
logfile_$(2) := 
redirectlog_$(2) := 
endif
ifneq ($(strip $(SCRAM_IGNORE_SUBDIRS)),)
subdirs_$(2) := $$(filter-out $$(addprefix $(2)_,$(SCRAM_IGNORE_SUBDIRS)),$$(subdirs_$(2)))
endif
$(WORKINGDIR)/cache/msg/$(SCRAM_SOURCEDIR)/$(1).msg: $$(logfile_$(2)) FORCE_TARGET
ifeq ($(strip $(RESET_BUILD_LOGS)),yes)
	@$(DO_BUILD_LOG) $(CMD_echo) ">> Entering Package $(1)" $$(redirectlog_$(2)) &&\
	$(CMD_echo) ">> Entering Package $(1)" $(if $(HOOK_PACKAGE), && $(HOOK_PACKAGE) -s -p $1 $(if $(KEEP_ON_BUILDING), || $(CMD_true)))
endif
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) -t $(OLD_TIMESTAMP) $$@
$(1) $(SCRAM_SOURCEDIR)/$(1) $(2) all_$(2): $(if $(POISON_EDMPLUGIN_CACHE),$(WORKINGDIR)/$(SCRAM_SOURCEDIR)/$(1)/AUTOCLEAN.poison_edmplugin.clean) $(WORKINGDIR)/cache/msg/$(SCRAM_SOURCEDIR)/$(1).msg $$(addprefix all_,$$(subdirs_$(2))) $(SCRAMSTORENAME_PYTHON)/$(1)/__init__.py
	@$$(call run_postprocess,$1,$$(redirectlog_$(2)))
	@$$(call package_outputlog,$(1))
	@$(CMD_echo) ">> Leaving Package $(1)" &&\
	$(CMD_echo) ">> Package $(1) built" $(if $(HOOK_PACKAGE), && $(HOOK_PACKAGE) -e -p $1 $(if $(KEEP_ON_BUILDING), || $(CMD_true)))
$(SCRAMSTORENAME_CFIPYTHON)/$(1)/.scram: $(SCRAMSTORENAME_PYTHON)/$(1)/__init__.py
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
ifeq ($(strip $(origin $2_python_parent)),undefined)
$(SCRAMSTORENAME_PYTHON)/$(1)/__init__.py: $(SCRAMSTORENAME_PYTHON)/$(dir $1)__init__.py
	@[ -L $$(@D) ] && $(CMD_rm) -f $$(@D) || $(CMD_true)
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) &&\
	$$(call create_package_init,$1)
else
$(SCRAMSTORENAME_PYTHON)/$(1)/__init__.py: $(SCRAMSTORENAME_PYTHON)/$(dir $1)__init__.py $(SCRAM_SOURCEDIR)/$1/python/__init__.py
	@[ -d $$(@D) ] && $(CMD_rm) -rf $$(@D) || $(CMD_true)
	@[ -e $$(@D) ] || $(CMD_ln) -s  ../$(PYTHON_RELPATH)/$(SCRAM_SOURCEDIR)/$1/python $(SCRAMSTORENAME_PYTHON)/$1
	@$(CMD_touch) $$@
endif
$(SCRAM_SOURCEDIR)/$(1)/python/__init__.py:
	@$$(call create_package_init,$1) &&\
	[ -d $(WORKINGDIR)/$$(@D) ] || $(CMD_mkdir) -p $(WORKINGDIR)/$$(@D) &&\
	$(CMD_echo) "01:$(CMD_rm) -f $$(@D)/__init__.py $$(@D)/__init__.pyc" > $(call AutoCleanFile,$(WORKINGDIR)/$$(@D)/__init__.py,python)
ifeq ($$(filter $(2)_test,$$(subdirs_$(2))),$(2)_test)
runtests_$(2): $(2) runtests_$(2)_test
	@$(CMD_echo) ">> Tests for package $(1) ran."
unittests_$(2): unittests_$(2)_test
	@$(CMD_echo) ">> Tests for package $(1) ran."
endif
precompile_$(2): $$(addprefix precompile_,$$(subdirs_$(2)))
	@:
compile_$(2): $$(addprefix compile_,$$(subdirs_$(2)))
	@:
edm_checks_$(2): $$(addprefix edm_checks_,$$(subdirs_$(2)))
	@:
scripts_$(2): all_$(2)_scripts
	@:
ifeq ($$(filter $(2)_python,$$(subdirs_$(2))),$(2)_python)
runpython_$(2): runpython_$(2)_python
	@$(CMD_echo) ">> Python for package $(1) ran."
endif
endef

define TargetPlugin
all_$(2) += $(5)/$(10)/$(8)
$(5)/$(10)/$(8): $($(2)_objdir)/$(10)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $($(1)_extra_deps)
	$$(call $(3)_register_plugin,$(1),$(9),$(10))
endef
define addPlugin
$(2)_pluginname    := $(1)
ALL_$(3)_PLUGINS   += $(1)
$(1)_plugintype    := $(3)
$(1)_no_lib_copy   := $(4)
$(1)_plugindir     := $(5)
$(1)_pluginrefresh := $(6)
$(1)_plugincache   := $(7)
$(1)_pluginprod    := $(5)/$(8)
$(1)_pluginlib     := $($(2)_objdir)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX)
all_$(2)           += $(5)/$(8)
$(1)_extra_deps    += $(if $(strip $(6)),$(WORKINGDIR)/cache/prod/$(6),)
$($(1)_PROD_PACKAGE)_$(3)_plugins += $(1)
ifndef SCRAM_NOEDMWRITECONFIG
ifeq ($$(strip $(3)),edm)
$(1)_extra_deps    += $(WORKINGDIR)/cache/prod/$(EDM_WRITE_CONFIG) $(SCRAMSTORENAME_CFIPYTHON)/$($(1)_PROD_PACKAGE)/.scram
endif
endif
$(5)/$(8): $$($(1)_pluginlib) $$($(1)_extra_deps)
	$$(call $(3)_register_plugin,$(1),$(9))
$$(foreach v,$($(1)_LOC_FLAGS_TARGETS),$$(eval $$(call TargetPlugin,$1,$2,$3,$4,$5,$6,$7,$8,$9,$$v)))
endef

ifeq ($(strip $(SCRAM_MULTIPLE_COMPILERS)-$(SCRAM_COMPILER)),yes-$(LLVM_ANALYZER))
define CXXCompileRule
$($(1)_objdir)/%.$(2).$(OBJEXT): $($(1)_srcdir)/%.$(2) $($(1)_objdir)/precompile FORCE_LLVM_CHECK
	$$(call analyze_cxx,$(1),$(3))
endef
define CCompileRule
$($(1)_objdir)/%.$(2).$(OBJEXT): $($(1)_srcdir)/%.$(2) $($(1)_objdir)/precompile FORCE_LLVM_CHECK
	$$(call analyze_c,$(1),$(3))
endef
else
define CXXCompileRule
$($(1)_objdir)/$(5)%.$(2).$(OBJEXT): $($(1)_srcdir)/%.$(2) $($(1)_objdir)/precompile
	$$(call compile_cxx$(4),$(1),$3,$(subst /,,$(5)))
endef
define CCompileRule
$($(1)_objdir)/$(5)%.$(2).$(OBJEXT): $($(1)_srcdir)/%.$(2) $($(1)_objdir)/precompile
	$$(call compile_c$(4),$(1),$3,$(subst /,,$(5)))
endef
endif

define F77CompileRule
$($(1)_objdir)/$(5)%.$(2).$(OBJEXT): $($(1)_srcdir)/%.$(2) $$($(1)_objdir)/precompile
	$$(call compile_fortran$(4),$(1),$3,$(subst /,,$(5)))
endef

define EmptyProduct
.PHONY: $(1) all_$(1) $(2) all_$(2)
$(1) $(2): all_$(1)
	@:
endef

define LogFile
startlog_$(1) = $$(FORCE_BUILD_START)
endlog_$(1)   = $$(FORCE_BUILD_END)
ifeq ($$(strip $$(BUILD_LOG)),yes)
redirectlog_$(1) := >> $(WORKINGDIR)/cache/log/$(2)/$(1)
startlog_$(1) += (
endlog_$(1)   += ) $$(redirectlog_$(1)) 2>&1
logfile_$(1)  := $(WORKINGDIR)/cache/log/$(2)/$(1)
else
logfile_$(1)     := 
redirectlog_$(1) := 
endif
endef

define UnitTestBuildDirectory
${1}_USE_UNITTEST_DIR:=$(USE_UNITTEST_DIR)
ifneq ($(strip $(${1}_LOC_FLAGS_USE_UNITTEST_DIR)),)
ifneq ($(strip $(lastword $(${1}_LOC_FLAGS_USE_UNITTEST_DIR))),1)
${1}_USE_UNITTEST_DIR:=
else
${1}_USE_UNITTEST_DIR:=1
endif
endif
endef

#safename,path,safepath,scriptstore,scripts,plugintype
define CommonBinaryHead
$(1)_PROD_PACKAGE  := $(patsubst $(SCRAM_SOURCEDIR)/%/,%,$(dir $2))
$(1)_PROD_SUBSYSTEM:=$$(patsubst %/,%,$$(dir $$($(1)_PROD_PACKAGE)))
$(3)          += all_$(1)
$(eval $(call LogFile,$(1),$(2)))
.PHONY: $(1) all_$(1)
$(1)_objdir       := $(WORKINGDIR)/$(2)/$(1)
$(1)_srcdir       := $(LOCALTOP)/$(2)
$(1)_files        := $$(filter-out $($(1)_SKIP_FILES), $($(1)_files))
$(1)_prodsrc      := $$(addprefix $(patsubst $(SCRAM_SOURCEDIR)/%,%,$2/),$$($(1)_files))
$(1)_files_exts   := $$(sort $$(patsubst .%,%,$$(suffix $$($(1)_files))))
$(1)_LOC_USE      += $$(if $$(strip $$(filter $(FORTRANSRC_FILES_SUFFIXES),$$($(1)_files_exts))),$(F77_TYPE_COMPILER),)
$(1)_objs         := $$(addprefix $$($(1)_objdir)/, $$(addsuffix .$(OBJEXT),$$($(1)_files)))
$$(eval $$(call AddCudaRules,$1,$6))
$(1)_libdeps      := $$(call libdeps,$1)
ifeq ($(strip $(SKIP_SCRIPTS_COPY)),)
ifneq ($(strip $(5)),)
.PHONY: $(1)_install_scripts_rule
$(1)_install_scripts_rule: $(logfile_$(1))
	$$(call copy_src_scripts,$(2),$(1),$(5),$(4))
all_$(1) += $(1)_install_scripts_rule
endif
endif
$(1)_CONFIGDEPS := $(CONFIGDEPS) $$(sort $$(foreach u,$$(sort $$($(1)_LOC_USE) $($(1)_EX_USE)),$$($$($$(u))_XDEPS) $$(if $$($$($$(u))_BuildFile),$$($$($$(u))_BuildFile),$$(filter $(SCRAM_TOOLS_DIR)/$$(u),$(ToolTimeStamps)))))
ifneq ($$(strip $($(1)_BuildFile)),)
ifeq ($(filter $($(1)_BuildFile),$(ALL_BUILDFILES)),)
ALL_BUILDFILES += $($(1)_BuildFile)
$($(1)_BuildFile): $$($(1)_CONFIGDEPS) | $(WORKINGDIR)/$(2)/productautocleanup
	@$(CMD_touch) $($(1)_BuildFile)
endif
$$($(1)_objdir)/config: $($(1)_BuildFile)
	@$$(call BuildClean,$(2)/$(1),0[0-9],1); $(CMD_mkdir) -p $$(@D) ; $(CMD_touch) $$@
else
$$($(1)_objdir)/config: $$($(1)_CONFIGDEPS) | $(WORKINGDIR)/$(2)/productautocleanup
	@$$(call BuildClean,$(2)/$(1),0[0-9],1); $(CMD_mkdir) -p $$(@D) ; $(CMD_touch) $$@
endif
$(1)_config_msg += $(WORKINGDIR)/cache/msg/$(2)/$(1).msg $(if $(strip $(filter $($(3)_parent),$(ALL_PACKAGES))),$(WORKINGDIR)/cache/msg/$(SCRAM_SOURCEDIR)/$($(3)_parent).msg,)
$(1)_config += $$($(1)_objdir)/config
$(eval $(call UnitTestBuildDirectory,$1))
ifneq ($(strip $($(1)_DNN_NAME)),)
$$(eval $$(call AddDNNRules,$1,$2))
endif
endef

NonTargetExt:=$(addsuffix .$(OBJEXT),$(addprefix %.,$(CSRC_FILES_SUFFIXES) $(FORTRANSRC_FILES_SUFFIXES) $(CUDASRC_FILES_SUFFIXES)))
TargetObjs=$(filter-out $(NonTargetExt) $(addprefix $($(1)_objdir)/,$(AUTO_GENERATED_SOURCES)),$($(1)_objs))
NonTargetObjs=$(filter-out $(call TargetObjs,$1),$($(1)_objs))

define TargetLib
$1:: $($(1)_objdir)/$4/$($(1)_product)
all_$(1)+=$($(1)_objdir)/$4/$($(1)_product)
$(1)_objs_$4:=$(subst $($(1)_objdir)/,$($(1)_objdir)/$4/,$(call TargetObjs,$1)) $(call NonTargetObjs,$1)
$($(1)_objdir)/$4/compile: $($(1)_objdir)/precompile $$($(1)_objs_$4) $($(1)_compile)
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
$($(1)_objdir)/$4/$($(1)_product): $($(1)_objdir)/$4/compile $$($(1)_objs_$4) $($(1)_libdeps)
	$$(call link_lib$($(1)_BUILDRULES),$(1),$(1),$(3),$($(1)_pluginname),$4)
endef

#safename,path,productstore,type,logprodstore,safepath
define CommonBinaryTail
$(eval $($(1)_PRE_INIT_FUNC))
$(foreach f,$($(1)_OPENCL_DEVICE_FILES),$(eval $(call GenerateAOCX,$1,$(f))))
ifneq ($(strip $($(1)_objs)),)
$$(eval $$(call AddBigObjRule,$1,$2))
ALL_$(4)_PRODUCTS += $(1)
$(1)::  $($(1)_objdir)/$($(1)_product)
$($(1)_objdir)/$($(1)_product): $($(1)_objdir)/compile $($(1)_libdeps)
ifeq ($(strip $(4)),lib)
	$$(call link_lib$($(1)_BUILDRULES),$(1),$(1),$(3),$($(1)_pluginname))
	@$$(startlog_$(1)) $(if $(HOOK_PRODUCT),$(HOOK_PRODUCT) -e -p $1,$(CMD_true)) $$(endlog_$(1))
	@$$(startlog_$(1))$(CMD_echo) "Leaving library rule at $(patsubst $(SCRAM_SOURCEDIR)/%/src,%,$(2))" $$(endlog_$(1))
endif
ifeq ($(strip $(4)),bin)
	$$(call build_bin,$(1),$(1),$(3))
endif
ifeq ($(strip $(4)),test)
	$$(call build_test,$(1),$(1),$(3))
.PHONY: runtests_$(1) unittests_$(1)
ifeq ($(strip $(filter $(1),$(SKIP_UNITTESTS))),$(1))
$(1)_NO_TESTRUN := yes
endif
runtests_$(6) += runtests_$(1)
unittests_$(6) += unittests_$(1)
runtests_$(1): all_$(1) $(patsubst %,runtests_%,$($(1)_PRE_TEST)) unittests_$(1)
	@:
unittests_$(1): $(patsubst %,unittests_%,$($(1)_PRE_TEST)) $(LOCALTOP)/$(5)/testing.log $(UNIT_TEST_DEPS) | cleanup-runtest
	$$(call run_test,$(1),$(3),$(5),$(2))
endif
ifeq ($(strip $(4)),lib)
$$(foreach v,$($(1)_LOC_FLAGS_TARGETS),$$(eval $$(call TargetLib,$1,$2,$3,$$v)))
endif
.PHONY: precompile_$(6) compile_$(6)
ifneq ($(strip $(4)$($(1)_files)),test1)
ifneq ($(strip $($(1)_CLASSES_DEF_XML) $($(1)_CLASSES_DEF_XML)),)
edm_checks_$(6) += $(WORKINGDIR)/edm_checks/$($(1)_product)
$(WORKINGDIR)/edm_checks/$($(1)_product): $($(1)_objdir)/$($(1)_product)
	@$$(startlog_$(1)) [ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) $$(call run_edm_checks,$1,$1,$(3),$($(1)_pluginname)) && touch $$@ $$(endlog_$(1))
endif
$(WORKINGDIR)/cache/prod/$(1): $($(1)_objdir)/$($(1)_product)
	@if [ ! -f $$@ ] ; then $(CMD_touch) $$@; fi
ifneq ($(strip $($(1)_product)),)
ifneq ($(wildcard $($(1)_objdir)/$($(1)_product).dep),)
-include $($(1)_objdir)/$($(1)_product).dep
endif
endif
$(WORKINGDIR)/cache/msg/$(2)/$(1).msg: $(logfile_$(1)) FORCE_TARGET
	@$$(startlog_$(1))[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) -t $(OLD_TIMESTAMP) $$@ $(if $(HOOK_PRODUCT), && $(HOOK_PRODUCT) -s -p $1) $$(endlog_$(1))
precompile_$(6): $($(1)_objdir)/precompile $($(1)_extra_files)
compile_$(6): $($(1)_objdir)/compile
$($(1)_objdir)/precompile: $($(1)_config) $($(1)_precompile) $(logfile_$(1)) | $($(1)_config_msg)
	@$(CMD_touch) $$@
ifeq ($(strip $(4)),lib)
	@$(startlog_$(1))$(CMD_echo) "Entering library rule at $(patsubst $(SCRAM_SOURCEDIR)/%/src,%,$(2))" $(endlog_$(1))
endif
$($(1)_objdir)/compile: $($(1)_objdir)/precompile $($(1)_objs) $($(1)_compile)
	@$(CMD_touch) $$@
$($(1)_objdir)/link: $($(1)_objdir)/compile $($(1)_objdir)/$($(1)_product) $($(1)_link)
	@$(CMD_touch) $$@
	@$(CMD_echo) "$1 $$($(1)_prodsrc)" > $$(@D)/scram-prod2src.txt
all_$(1): $($(1)_objdir)/link $$(all_$(1))
	@:
else
precompile_$(6):
compile_$(6):
endif
endif
endef

define FindBuildFile
$(if $(wildcard $(1).xml),$(1).xml,$(1))
endef

define MultipleWarningMsg
ifeq ($(strip $(ONLYECHOTARGETS)),)
$$(call $$(multipletools),****WARNING: Multiple products with same name $(1))
$$(call $$(multipletools),             Previous defination: $($(1)))
$$(call $$(multipletools),             Current  defination: $(2))
endif
endef

define ProductWithNoFiles
ifeq ($(strip $(ONLYECHOTARGETS)),)
$$(info ****WARNING: Skipped building of $(1) from $$(call FindBuildFile,$(2)/$(SCRAM_BUILDFILE)) because)
ifeq ($(strip $(3)),)
$$(info $$(space)             there are no files mentioned in the this Buildfile)
else
$$(info $$(space)             \"$(3)\" does not match any file under $(2) directory)
endif
endif
endef

define UseError
ifeq ($(strip $(ONLYECHOTARGETS)),)
$$(call $$(wrongtool),****WARNING: Invalid tool $(1). Please fix $$(call FindBuildFile,$$(subst tmp/$(SCRAM_ARCH)/cache/bf/,,$2)) file.)
endif
endef

#safename
define CompileRules
$(foreach ext,$(filter $(CXXSRC_FILES_SUFFIXES),    $($(1)_files_exts)),$(eval $(call CXXCompileRule,$(1),$(ext),$(1),$($(1)_BUILDRULES))))
$(foreach ext,$(filter $(CSRC_FILES_SUFFIXES),      $($(1)_files_exts)),$(eval $(call CCompileRule,$(1),$(ext),$(1),$($(1)_BUILDRULES))))
$(foreach ext,$(filter $(FORTRANSRC_FILES_SUFFIXES),$($(1)_files_exts)),$(eval $(call F77CompileRule,$(1),$(ext),$(1))))
$(foreach v,$($(1)_LOC_FLAGS_TARGETS),
  $(foreach ext,$(filter $(CXXSRC_FILES_SUFFIXES),    $($(1)_files_exts)),$(eval $(call CXXCompileRule,$(1),$(ext),$(1),$($(1)_BUILDRULES),$v/)))
)
endef

#safename,path,safepath,scriptstore,scripts,productstore,type,logprodstore
define Binary
$$(eval $$(call CommonBinaryHead,$(1),$(2),$(3),$(4),$(5)))
ALL_BINARIES += $(1)
$(1)_product := $(1)
$$(eval $$(call CommonBinaryTail,$(1),$(2),$(6),$(7),$(8),$(3)))
$$(eval $$(call CompileRules,$(1)))
endef

#safename,path,safepath,scriptstore,scripts,libstore,logprodstore,plugintype
define Library
$(1)_plugintype:=$(8)
ifeq ($(SCRAM_MULTI_TARGET),1)
ifeq ($(strip $(USER_TARGETS_ALL)),1)
$(1)_LOC_FLAGS_TARGETS:=$(call GetCompilerData,$1,SCRAM_TARGETS)
else ifeq ($(strip $($(1)_LOC_FLAGS_TARGETS)),1)
$(1)_LOC_FLAGS_TARGETS:=$(call GetCompilerData,$1,SCRAM_TARGETS)
else ifneq ($(strip $($(1)_LOC_FLAGS_TARGETS)),)
$(1)_LOC_FLAGS_TARGETS:=$(filter $($(1)_LOC_FLAGS_TARGETS),$(call GetCompilerData,$1,SCRAM_TARGETS))
endif
else
$(1)_LOC_FLAGS_TARGETS:=
endif
$$(eval $$(call LibraryHead,$(1),$(2),$(3),$(4),$(5),$(8)))
$$(eval $$(call LibraryTail,$(1),$(2),$(6),$(7),$(3),$(8)))
endef

#safename,path,safepath,scriptstore,scripts,plugintype
define LibraryHead
$(eval $(call CommonBinaryHead,$(1),$(2),$(3),$(4),$(5),$(6)))
$(1)_product      := $(MODULE_PREFIX)$(1).$(SHAREDSUFFIX)
endef

#safename,path,libstore,logprodstore,safepath,plugintype
define LibraryTail
$(eval $(call CommonBinaryTail,$(1),$(2),$(3),lib,$(4),$(5)))
ifneq ($$(strip $$($(1)_objs)),)
ALL_LIBRARIES += $(1)
$(WORKINGDIR)/cache/prod/lib$(1): $($(1)_objdir)/$($(1)_product)
	@:
$$(eval $$(call CompileRules,$(1)))
$$(eval $$(call AddBigObjCompileRule,$1))
else
$(1) all_$(1): $$(all_$(1))
	@:
endif
endef

#safename,path,safepath
define PythonProduct
$(3) += all_$(1)
$(2)_PRODDUCT_NAME:=$(1)
.PHONY: $(1) all_$(1)
ifeq ($(strip $(PYTHON_PACKAGE_SYMLINK)),YES)
.PHONY: $(WORKINGDIR)/$2/init_links
$(WORKINGDIR)/$2/init_links:
	@$$(call create_subdir_init,$2)
all_$(1) += $(WORKINGDIR)/$2/init_links $(SCRAMSTORENAME_PYTHON)/$(dir $(subst $(SCRAM_SOURCEDIR)/,,$(2)))__init__.py
endif
runpython_$(3): $$(all_$(1))
	@:
$(1) all_$(1): runpython_$(3)
	@:
endef

ifeq ($(strip $(SKIP_SCRIPTS_COPY)),)
define Src2StoreCopy
.PHONY: $(1) all_$(1) $(1)_copy
$(1)_files := $(filter-out CVS $(SCRAM_BUILDFILE) $(SCRAM_BUILDFILE).xml $($(1)_SKIP_FILES), $($(1)_files))
$(1): all_$(1)
	@:
ifneq ($$(strip $$($(1)_files)),)
$(eval $(call LogFile,$(1),$(2)))
$(1)_installdir := $(3)
$(1)_copy: $(logfile_$(1))
	@$$(call clean_files,$($(1)_SKIP_FILES),$$($(1)_installdir))
	$$(call src2store_copy,$(2),$(1),$$($(1)_files),$$($(1)_installdir),$($(1)_INSTALL_SCRIPTS))
all_$(1): $(1)_copy
endif
endef
endif

define CommonDataRules
.PHONY: $(1) all_$(1)
$(1) all_$(1): $($(1)_data_copy_rule)
endef

define CommonProductRules
.PHONY: $(1) all_$(1) edm_checks_$(1)
ifeq ($(strip $(3)),TEST)
.PHONY: runtests_$(1) unittests_$(1) 
$(1) += $($(1)_data_copy_rule)
runtests_$(1): $(1) $(runtests_$(1))
	@:
unittests_$(1): $(unittests_$(1))
	@:
endif
edm_checks_$(1): $(edm_checks_$(1))
	@:
$(1) all_$(1): $($(1))
	@:
endef

ifneq ($(strip $(SCRAM_DXR_RUN)),yes)
ifeq ($(strip $(CODE_ANALYSIS_RULES)),NO)
ifneq ($(strip $(wildcard $(SCRAM_TOOLS_DIR)/cuda)),)
include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.cuda
endif
ifneq ($(strip $(ROOTRFLX_BASE)),)
include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.lcgdict
endif
include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.serialization
include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.pch
ifneq ($(strip $(TFCOMPILE)),)
include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.dnn
endif
ifneq ($(strip $(AOC)),)
include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.aocx
endif
AUTO_GENERATED_SOURCES:=$(addsuffix /%,$(sort $(AUTO_GENERATED_SOURCES)))
endif  #Finish CODE_ANALYSIS_RULES
endif
##############################################################################
define SetTargetType
ifneq ($(strip $(filter updateclassversion,$(MAKECMDGOALS))),)
  UPDATE_CLASSVERSION:=yes
endif
ifneq ($(strip $(filter use-ibeos,$(MAKECMDGOALS))),)
export CMS_PATH=/cvmfs/cms-ib.cern.ch
export PATH=$(LOCALTOP)/$(WORKINGDIR)/das_client:$(PATH)
UNIT_TEST_DEPS+=use-ibeos
endif
ifneq ($(strip $(filter PostBuild,$(MAKECMDGOALS))),)
RESET_BUILD_LOGS:=no
endif
ifeq ($(strip $(filter-out help enable-multi-targets disable-multi-targets check-multi-targets enable-biglib enable-biglib enable-biglib outputlog clean ProjectRename projectrename PROJECTRENAME ExternalLinks ToolUpdated ToolUpdated_%,$(MAKECMDGOALS))),)
  ONLYECHOTARGETS:=yes
  FAST :=yes
  XFAST:=yes
  UFAST:=yes
endif
ifeq ($(strip $(filter-out productmap gindices skiptest_% echo_% clean_% fast xfast ufast outputlog updateclassversion,$(MAKECMDGOALS))),)
  ONLYECHOTARGETS:=yes
  ifneq ($(strip $(filter ufast,$(MAKECMDGOALS))),)
    FAST :=yes
    XFAST:=yes
    UFAST:=yes
  else
    ifneq ($(strip $(filter xfast,$(MAKECMDGOALS))),)
      FAST :=yes
      XFAST:=yes
    else
      ifneq ($(strip $(filter fast,$(MAKECMDGOALS))),)
        FAST :=yes
      endif
    endif
  endif
endif
endef
define UpdateMakeGoalTypes
$(if $(strip $(MAKECMDGOALS)),$(eval $(call SetTargetType)),)
endef
define GetEchoVariable
$(if $(strip $(filter echo_%,$(1))),$(patsubst echo_%,%,$(1)),)
endef
$(eval $(call UpdateMakeGoalTypes))
##############################################################################
.PHONY: ToolUpdated_% ToolUpdated ExternalLinks Non-xml\ BuildFile\ check
Non-xml\ BuildFile\ check:
	@if [ "X$(NON_XML_BUILDFILE)" != "X" ] ; then \
	  $(CMD_echo) "****ERROR: Non-XML BuildFiles found. Please convert these to xml format using 'scram build -c'";\
          $(foreach bf,$(NON_XML_BUILDFILE),$(CMD_echo) "          => $(bf)";) \
	  [ "X$(RELEASETOP)" = "X" ] || exit 1 ;\
	fi
FORCE_TARGET:  Non-xml\ BuildFile\ check
	@:
$(WORKINGDIR)/cache/prod/%:
	@$(CMD_touch) $@
$(LOCALTOP)/$(SCRAMSTORENAME_LOGS)/testing.log: FORCE_TARGET
	@$(CMD_mkdir) -p $(@D) ;\
	$(CMD_rm) -rf $@; \
	$(CMD_echo) "Creating test log file $(SCRAMSTORENAME_LOGS)/testing.log" ;\
	$(CMD_touch) $@
ifeq ($(strip $(RESET_BUILD_LOGS)),yes)
$(WORKINGDIR)/cache/log/%: FORCE_TARGET
	@[ -f $@ ] && $(CMD_rm) -f $@ &&\
	[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
	$(CMD_touch) -t $(OLD_TIMESTAMP) $@
else
$(WORKINGDIR)/cache/log/%:
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
	$(CMD_touch) -t $(OLD_TIMESTAMP) $@
endif
ToolUpdated_%: ToolUpdated
ExternalLinks ToolUpdated:
	@$(EXTERNAL_LINK_SCRIPT) --arch $(SCRAM_ARCH)
$(WORKINGDIR)/cache/xlibs: | $(WORKINGDIR)/cache/xlibs.backup
	@$(CMD_touch) -t $(OLD_TIMESTAMP) $@
$(WORKINGDIR)/cache/xlibs.backup: $(LOCALTOP)/external/$(SCRAM_ARCH)/links.DB 
	@$(CMD_touch) $@
$(LOCALTOP)/external/$(SCRAM_ARCH)/links.DB: $(ToolTimeStamps)
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D)
	@$(EXTERNAL_LINK_SCRIPT) --arch $(SCRAM_ARCH)
######################################################################
$(eval curtop:=$(shell $(CMD_echo) $$LOCALTOP))
ifneq ($(curtop),$(SCRAM_INIT_LOCALTOP))
  PROJECT_RENAME_TARGET:=
  ifeq ($(strip $(MAKECMDGOALS)),ProjectRename)
    PROJECT_RENAME_TARGET:=yes
  else
    ifeq ($(strip $(MAKECMDGOALS)),projectrename)
      PROJECT_RENAME_TARGET:=yes
    else
      ifeq ($(strip $(MAKECMDGOALS)),PROJECTRENAME)
        PROJECT_RENAME_TARGET:=yes
      endif
    endif
  endif
  ifneq ($(PROJECT_RENAME_TARGET),yes)
    $(eval dummyfile:=localtopchecking.file.$(shell date +%s.%N 2>/dev/null))
    $(eval xxtmp:=$(shell $(CMD_touch) $(SCRAM_INIT_LOCALTOP)/$(dummyfile) 2> /dev/null))
    ifeq ($(strip $(wildcard $(curtop)/$(dummyfile))),)
      $(eval xxtmp:=$(shell $(CMD_rm) -f $(SCRAM_INIT_LOCALTOP)/$(dummyfile)))
      $(info **** ERROR: You have moved/renamed this project area "$(curtop)" from "$(SCRAM_INIT_LOCALTOP)")
      $(error Please first run \"scramv1 b ProjectRename\")
    endif
    $(eval xxtmp:=$(shell $(CMD_rm) -f $(SCRAM_INIT_LOCALTOP)/$(dummyfile)))
  endif
endif

.PHONY: projectrename ProjectRename PROJECTRENAME
ProjectRename projectrename PROJECTRENAME:
	@$(PROJECT_AREA_RENAME_SCRIPT) $(SCRAM_INIT_LOCALTOP) $(curtop) $(SCRAM_ARCH); $(CMD_echo) "Done: $@"
######################################################################
#Common Rules
.PHONY: all project project_all all_$(SCRAM_SOURCEDIR) ProjectPluginRefresh CompilePython PostBuild
all: all_$(TARGETDIR)
	@if [ "X$(TARGETDIR)" != "X$(SCRAM_SOURCEDIR)" ] ; then \
	  $(DO_BUILD_LOG) $(MAKE) -f $(SCRAM_MAKEFILE) ufast outputlog ;\
	  $(MAKE) -f $(SCRAM_MAKEFILE) PostBuild ;\
	fi
project project_all all_$(SCRAM_SOURCEDIR): $(SCRAM_SOURCEDIR)
	@:

.PHONY: python help compile precompile edm_checks runtests unittests clean distclean cache_clean project_clean project_help scripts
.PHONY: clean_$(SCRAM_SOURCEDIR) help_$(SCRAM_SOURCEDIR)
help: help_$(TARGETDIR)
clean: clean_$(TARGETDIR)
runtests: runtests_$(TARGETDIR)
unittests: unittests_$(TARGETDIR)
python: runpython_$(TARGETDIR)
compile: compile_$(TARGETDIR)
precompile: precompile_$(TARGETDIR)
edm_checks: edm_checks_$(TARGETDIR)
scripts: scripts_$(TARGETDIR)

project_clean clean_$(SCRAM_SOURCEDIR) vclean cache_clean distclean:
	@$(CMD_echo) "Cleaning ProductStore directories:"
	$(CMD_rm) -rf $(ALL_PRODUCT_STORES)
	@$(CMD_echo) "Resetting project cache:"; $(CMD_mkdir) -p $(SCRAM_ADMIN_DIR)
	@for db in ProjectCache DirCache RuntimeCache ObjectCache; do \
	  $(CMD_echo) $(CMD_rm) -f $(SCRAM_ADMIN_DIR)/$$db.* ; \
	  $(CMD_touch) $(SCRAM_ADMIN_DIR)/$$db.db.gz; \
	  $(CMD_rm) -f $(SCRAM_ADMIN_DIR)/$$db.* ;  \
	done
	$(CMD_rm) -rf $(SCRAM_ADMIN_DIR)/MakeData $(SCRAM_ADMIN_DIR)/BuildFiles
	$(CMD_rm) -f  $(LLVM_CCDB_EXT)
	@if [ "X$(COMPILE_PYTHON_SCRIPTS)" = "Xyes" ] ; then \
	  $(CMD_echo) "Cleaning up the compiled .pyc/__pycache__ and generated __init__.py files in the $(SCRAM_SOURCEDIR) directory." &&\
	  if [ -d $(SCRAM_SOURCEDIR) ] ;      then $(CMD_find) $(SCRAM_SOURCEDIR)       -name '__init__.py' -type f | $(CMD_xargs) $(CMD_grep) '^#Automatically created by SCRAM' | $(CMD_sed) -e 's|/__init__.py:.*|/__init__.py|' | $(CMD_uniq) | $(CMD_xargs) $(CMD_rm) -f ; fi &&\
	  if [ -d $(SCRAMSTORENAME_CFIPYTHON) ] ; then $(CMD_find) $(SCRAMSTORENAME_CFIPYTHON)  -name '*.pyc' -type f | $(CMD_xargs) $(CMD_rm) -f ; fi &&\
	  if [ -d $(SCRAMSTORENAME_CFIPYTHON) ] ; then $(CMD_find) $(SCRAMSTORENAME_CFIPYTHON)  -name '__pycache__' -type d | $(CMD_xargs) $(CMD_rm) -rf ; fi &&\
	  if [ -d $(SCRAM_SOURCEDIR) ] ;      then $(CMD_find) $(SCRAM_SOURCEDIR) -name '__pycache__' -type d | $(CMD_xargs) $(CMD_rm) -rf ; fi &&\
	  if [ -d $(SCRAM_SOURCEDIR) ] ;      then $(CMD_find) $(SCRAM_SOURCEDIR) -name '*.pyc' -type f       | $(CMD_xargs) $(CMD_rm) -f ; fi ;\
	fi
	$(CMD_rm) -rf $(SCRAM_INTwork) $(COMMON_WORKINGDIR)/cache/packs

project_help help_$(SCRAM_SOURCEDIR):
	@$(CMD_echo) "------------ Help for Project-level Builds rules/targets ------------"
	@$(CMD_echo) ""
	@$(CMD_echo) "help"
	@$(CMD_echo) "  Shows what SCRAM will build for your current working directory."
	@$(CMD_echo) ""
	@$(CMD_echo) "clean"
	@$(CMD_echo) "  Clean up all the products built/generated by SCRAM."
	@$(CMD_echo) ""
	@$(CMD_echo) "python"
	@$(CMD_echo) "  To just build python i.e. creating sym-links and compiling python modules."
	@$(CMD_echo) ""
	@$(CMD_echo) "scripts"
	@$(CMD_echo) "  To just build/copy scripts"
	@$(CMD_echo) ""
	@$(CMD_echo) "skip-scripts-copy"
	@$(CMD_echo) "  To skip copying of scripts during the normal build/link process"
	@$(CMD_echo) ""
	@$(CMD_echo) "runtests"
	@$(CMD_echo) "  Build and run all tests for the project, or package-level tests only"
	@$(CMD_echo) ""
	@$(CMD_echo) "unittests"
	@$(CMD_echo) "  Same as runtests but does not try to build the test first."
	@$(CMD_echo) ""
	@$(CMD_echo) "use-ibeos runtests"
	@$(CMD_echo) "  Same as runtests but uses IBEOS area for DAS queries and root files."
	@$(CMD_echo) ""
	@$(CMD_echo) "skiptest_<testname>"
	@$(CMD_echo) "  To skip running <testname> unit test during the unittests or runtests"
	@$(CMD_echo) ""
	@$(CMD_echo) "ignore-deleted"
	@$(CMD_echo) "  Skip checking for deleted packages."
	@$(CMD_echo) ""
	@$(CMD_echo) "checker"
	@$(CMD_echo) "  Run LLVM static checkers"
	@$(CMD_echo) ""
	@$(CMD_echo) "edm_checks"
	@$(CMD_echo) "  To run only the EDM Checks"
	@$(CMD_echo) ""
	@$(CMD_echo) "compile precomple"
	@$(CMD_echo) "  To run only the compile or precompile part"
	@$(CMD_echo) ""
	@$(CMD_echo) "code-checks-all(combination of code-checks-run and code-checks-apply)"
	@$(CMD_echo) "  Run clang-tidy. Following extra env can use set"
	@$(CMD_echo) "    USER_CODE_CHECKS: checks to apply"
	@$(CMD_echo) "    USER_CODE_CHECKS_FILES:  Files within $(SCRAM_SOURCEDIR) to apply the checks"
	@$(CMD_echo) "    USER_CODE_CHECKS_FILE: File containing list of files to apply the checks"
	@$(CMD_echo) "    USER_CODE_CHECKS_ARGS: Extra arguments to pass to clang-tidy"
	@$(CMD_echo) "    USER_CODE_CHECKS_APPLY_ARGS: Extra arguments to pass to clang-apply-replacements"
	@$(CMD_echo) ""
	@$(CMD_echo) "code-checks"
	@$(CMD_echo) "  Run clang-tidy (via code-checks-all build rule) on changed files w.r.t release"
	@$(CMD_echo) "    By default it uses 'git diff --name-only TAG' to find the changed files."
	@$(CMD_echo) "    One can set USER_CODE_CHECKS_FILE to provide list of change files."
	@$(CMD_echo) ""
	@$(CMD_echo) "code-checks-dump-config"
	@$(CMD_echo) "  Dump the clang-tidy config"
	@$(CMD_echo) ""
	@$(CMD_echo) "code-format"
	@$(CMD_echo) "  Run clang-format. Following extra env can use set"
	@$(CMD_echo) "    USER_CODE_FORMAT: Format style to apply"
	@$(CMD_echo) "    USER_CODE_FORMAT_FILES:  Files within $(SCRAM_SOURCEDIR) to apply the format"
	@$(CMD_echo) "    USER_CODE_FORMAT_FILE: File containing list of files to apply the format"
	@$(CMD_echo) "    USER_CODE_FORMAT_ARGS: Extra arguments to pass to clang-format"
	@$(CMD_echo) "    USER_CODE_FORMAT_IGNORE_FILTER: Files for which code-format should not run."
	@$(CMD_echo) "  By default it uses 'git diff --name-only TAG' to find the changed files."
	@$(CMD_echo) "  One can set USER_CODE_FORMAT_FILE to provide list of change files."
	@$(CMD_echo) ""
	@$(CMD_echo) "code-format-all"
	@$(CMD_echo) "  Run clang-format for all source files under $(SCRAM_SOURCEDIR) directory."
	@$(CMD_echo) ""
	@$(CMD_echo) "code-format-dump-config"
	@$(CMD_echo) "  Dump the clang-format config"
	@$(CMD_echo) ""
	@$(CMD_echo) "check-headers"
	@$(CMD_echo) "  To run header consistency checks"
	@$(CMD_echo) ""
	@$(CMD_echo) "dxr"
	@$(CMD_echo) "  Generate DXR indexes for the release."
	@$(CMD_echo) ""
	@$(CMD_echo) "gindices"
	@$(CMD_echo) "  Generate glimpse indexes for the release."
	@$(CMD_echo) ""
	@$(CMD_echo) "enable-biglib disable-biglib check-biglib"
	@$(CMD_echo) "  Disable/enable/check big EDM plugins"
	@$(CMD_echo) ""
	@$(CMD_echo) "enable-multi-targets disable-multi-targets check-multi-targets"
	@$(CMD_echo) "  Disable/enable/check multiple targets build support"
	@$(CMD_echo) ""
	@$(CMD_echo) "deps-tree <package1> <package2>"
	@$(CMD_echo) "  To find the dependencies paths from <package1> to <package2>"
	@$(CMD_echo) ""
	@$(CMD_echo) "productmap"
	@$(CMD_echo) "  To dump the product package map information."
	@$(CMD_echo) ""
	@$(CMD_echo) "checkdeps"
	@$(CMD_echo) "  To run git-cms-checkdeps based on changes CMSSW and externals"
	@$(CMD_echo) ""
	@$(CMD_echo) "updateclassversion"
	@$(CMD_echo) "  Run the edmCheckClassVersion and generate new $(SCRAM_SOURCEDIR)/<package>/classes_def.xml.generated file."
	@$(CMD_echo) ""
	@$(CMD_echo) "prebuild postbuild"
	@$(CMD_echo) "  Execute any pre/post-build target for the project e.g. generating various source file for root/lcg dictionaries etc."
	@$(CMD_echo) ""
	@$(CMD_echo) "$(SCRAM_SOURCEDIR) release release-build all all_$(SCRAM_SOURCEDIR) project project_all"
	@$(CMD_echo) "  Build  all  products  (shared  libs,  plugins,  binaries) for the project"
	@$(CMD_echo) ""
	@$(CMD_echo) "<subsystem> <subsystem>/<Package>"
	@$(CMD_echo) "  Build all products (shared libs, plugins, binaries) and their dependencies for $(SCRAM_SOURCEDIR)/<path>"
	@$(CMD_echo) ""
	@$(CMD_echo) "runtime"
	@$(CMD_echo) "  Dump the runtime environment used at build time."
	@$(CMD_echo) ""
	@$(CMD_echo) "ProjectRename projectrename PROJECTRENAME"
	@$(CMD_echo) "  Fix the project area which was move/renamed after its creation."
	@$(CMD_echo) ""
	@$(CMD_echo) "ExternalLinks ToolUpdated"
	@$(CMD_echo) "  Re-create symblinks for externals tools."
	@$(CMD_echo) ""
	@$(CMD_echo) "echo_<tool|package>_USED_BY"
	@$(CMD_echo) "  Shows what depends on <tool> or <package> e.g."
	@$(CMD_echo) "    scram build echo_boost_USED_BY"
	@$(CMD_echo) "    scram build echo_FWCore/Framework_USED_BY"
	@$(CMD_echo) "  should show what depend on boost and FWCore/Framework"
	@$(CMD_echo) ""
	@$(CMD_echo) "echo_<tool|package>_USES"
	@$(CMD_echo) "  Shows what is the dependency of <tool> or <package>"
	@$(CMD_echo) ""
	@$(CMD_echo) "echo_<productname>_ORIGIN"
	@$(CMD_echo) "  Shows from which package <productname> was built."
	@$(CMD_echo) ""
	@$(CMD_echo) "echo_<variable>"
	@$(CMD_echo) "  Shows the value of a variable used by the game e.g."
	@$(CMD_echo) "    scram build echo_CXXFLAGS"
	@$(CMD_echo) ""

.PHONY: release release-build release-reset release-doc release-docs release-freeze

release: release-reset release-build postbuild

release-build: project_all
	@$(if $(HOOK_PROJECT),$(HOOK_PROJECT) -e $(if $(KEEP_ON_BUILDING), || $(CMD_true)),$(CMD_echo) ">> Project Build done")
	@for target in $(sort $(post_release_build)) ; do\
	  $(MAKE) -f $(SCRAM_MAKEFILE) $$target ;\
	done

release-reset: distclean

release-docs release-doc: doc

release-freeze: release-check
	@$(CMD_echo) "Cleaning up and protecting directories:"
	@$(CMD_cd) $(LOCALTOP); \
	$(CMD_rm) -fr $(SCRAM_INTwork)/$(SCRAM_SOURCEDIR) ; \
	$(CMD_rm) -fr $(SCRAM_INTwork)/cache ; \
	$(CMD_find) . -type f -print | $(CMD_xargs) $(CMD_chmod) a-w; \
	$(CMD_find) . -type d -print | $(CMD_xargs) $(CMD_chmod) 555

###############################################################################
PLUGIN_REFRESH_CMDS :=
CHECK_DELETED_PACKS:=
ifeq ($(strip $(IGNORE_DELETED)),)
ifneq ($(strip $(CMSSW_GIT_HASH)),)
ifneq ($(strip $(wildcard $(SCRAM_SOURCEDIR)/.git/info/sparse-checkout)),)
ALL_DELETED_PACKAGES:=$(strip $(shell $(CMD_cd) $(SCRAM_SOURCEDIR) && $(LOCALTOP)/$(SCRAM_CONFIGDIR)/SCRAM/find_deleted_packages.py $(CMSSW_GIT_HASH) .git/info/sparse-checkout))
CHECK_DELETED_PACKS:=$(if $(strip $(ALL_DELETED_PACKAGES)),YES)
endif
endif
endif
###############################################################################
-include $(TOOLS_MKDIR)/SCRAMBased/self_libs_def.mk
$(foreach x,$(ALL_TOOLS),$(eval $x := $x))
$(foreach x,$(ALL_TOOLS),$(eval $(call ProductCommonVarsTools,$x,,,$x)))
-include $(PUB_DIRCACHE_MKDIR)/$(SCRAM_SOURCEDIR).mk
$(foreach f,MISSING_SYMBOL_FLAGS,$(eval $f:=$(self_EX_FLAGS_$f)))
-include $(PUB_DIRCACHE_MKDIR)/DirCache.mk
-include $(DIRCACHE_MKDIR)/ExtraBuilsRules/*.mk
-include $(DIRCACHE_MKDIR)/DirCache.mk
$(foreach f,CXXFLAGS CPPFLAGS,$(foreach t,$(TOP_LEVEL_VARIABLES),$(eval $t_$f:=$(self_EX_FLAGS_$t_$f))$(eval REM_$t_$f:=$(self_EX_FLAGS_REM_$t_$f))))
$(foreach p,$(ALL_PACKAGES) $(ALL_DELETED_PACKAGES),$(if $(strip $($p)),,$(eval $p:=$(subst /,,$p))))
-include $(TOOLS_MKDIR)/SCRAMBased/all.mk
-include $(DIRCACHE_MKDIR)/RmvDirCache.mk
ifeq ($(strip $(CODE_ANALYSIS_RULES)),YES)
CONFIGDEPS:=
endif
ifneq ($(strip $(filter deps-tree,$(MAKECMDGOALS))),)
    UFAST:=yes
    ALL_SUBSYSTEMS:=
    DEPS_TREE_PACKAGE:=$(wordlist 1,1,$(filter-out deps-tree,$(MAKECMDGOALS)))
    DEPS_TREE_DEPENDENCY:=$(wordlist 2,2,$(filter-out deps-tree,$(MAKECMDGOALS)))
$(MAKECMDGOALS)::
	@:
endif
HOOK_PROJECT := $(if $(strip $(USER_HOOK_PROJECT)),$(USER_HOOK_PROJECT),$(HOOK_PROJECT))
HOOK_PACKAGE := $(if $(strip $(USER_HOOK_PACKAGE)),$(USER_HOOK_PACKAGE),$(HOOK_PACKAGE))
HOOK_PRODUCT := $(if $(strip $(USER_HOOK_PRODUCT)),$(USER_HOOK_PRODUCT),$(HOOK_PRODUCT))
FULL_RELEASE_FOR_A_PATCH    := $(strip $($(SCRAM_PROJECTNAME)_BASE_FULL_RELEASE))
ifeq ($(IS_LINUX),yes)
ifeq ($(strip $(CXXSHAREDFLAGS)),)
CXXSHAREDFLAGS := -shared
endif
endif
APPLY_BIGLIB_RULES:=$(if $(strip $(SCRAM_APPLY_BIGLIB_RULES)),$(SCRAM_APPLY_BIGLIB_RULES),yes)
ifeq ($(strip $(SCRAM_DEFAULT_COMPILER)),llvm)
APPLY_BIGLIB_RULES:=no
endif
ifneq ($(strip $(wildcard $(SCRAM_ADMIN_DIR)/no-bigproduct)),)
APPLY_BIGLIB_RULES:=no
endif
ifeq ($(strip $(APPLY_BIGLIB_RULES)),no)
ALL_BIGPRODS:=
subdirs_$(SCRAM_SOURCEDIR):=$(filter-out $(SCRAM_SOURCEDIR)_BigProducts,$(subdirs_$(SCRAM_SOURCEDIR)))
ALL_SUBSYSTEMS:=$(filter-out BigProducts,$(ALL_SUBSYSTEMS))
endif
ifeq ($(strip $(CODE_ANALYSIS_RULES)),NO)
ifneq ($(strip $(ALL_BIGPRODS)),)
-include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.bigedm.rules
endif
endif
ifeq ($(IS_MIC),yes)
ROOTCLING:=LD_LIBRARY_PATH=$(ROOT_INTERFACE_BASE)/rootcling/lib:$$LD_LIBRARY_PATH $(ROOT_INTERFACE_BASE)/rootcling/bin/rootcling
endif
ifneq ($(strip $(COND_SERIALIZATION)),)
COND_SERIALIZATION_SCRIPT:=$(call find_project_file,$(COND_SERIALIZATION))
endif
##############################################################################
self_EX_INCLUDE := $(subst $(LOCALTOP)/$(SCRAM_SOURCEDIR),$(LOCALTOP)/$(SCRAM_SOURCEDIR) $(LOCALTOP)/poison ,$(self_EX_INCLUDE))
$(foreach f,$(OVERRIDABLE_FLAGS),$(eval $f:=$(if $(strip $(RELEASETOP)),$(call AdjustFlag,DEV,$f),$(call AdjustFlag,RELEASE,$f))))
####### Clean up the directories which were already build but now have been removed from src area ######
ifneq ($(strip $(REMOVED_DIRS)),)
$(shell $(CMD_echo) "" > $(WORKINGDIR)/.AUTOCLEAN)
$(foreach d,$(sort $(REMOVED_DIRS)),$(if $(wildcard $(WORKINGDIR)/$(d)),$(eval xx:=$(shell $(CMD_find) $(WORKINGDIR)/$(d) -name "AUTOCLEAN.*.clean" -type f | $(CMD_xargs) $(CMD_cat) | $(CMD_grep) "^[0-9][0-9]:" | $(CMD_sed) -e "s|^[0-9][0-9]:||" |$(CMD_sort) | $(CMD_uniq) >> $(WORKINGDIR)/.AUTOCLEAN)$(info Cleaning up removed directory:$(d))$(shell $(CMD_rm) -rf $(WORKINGDIR)/classes/$(d) $(WORKINGDIR)/$(d))),))
$(foreach d,$(REMOVED_DIRS),$(if $(wildcard $(WORKINGDIR)/cache/bf/$(d)/$(SCRAM_BUILDFILE)),$(shell $(CMD_touch) $(SCRAM_INTwork)/cache/bf/$(d)/$(SCRAM_BUILDFILE)),))
xx:=$(shell $(CMD_sh) $(WORKINGDIR)/.AUTOCLEAN; $(CMD_rm) -rf $(DIRCACHE_MKDIR)/RmvDirCache.mk $(DIRCACHE_MKDIR)/RmvDirCache; $(CMD_mkdir) -p $(DIRCACHE_MKDIR)/RmvDirCache; $(CMD_touch) $(DIRCACHE_MKDIR)/RmvDirCache.mk)
endif
####### Update Tools and Prods rules ##############
ifeq ($(strip $(filter check-headers,$(MAKECMDGOALS))),check-headers)
-include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.chk_headers
endif
ifeq ($(strip $(UFAST)),)
ifeq ($(SCRAM_MULTI_TARGET),1)
$(foreach c,$(sort $(SCRAM_COMPILER) $(foreach x,$(ALL_PRODS),$($(x)_LOC_FLAGS_COMPILER))),\
            $(eval $(call SetCompilerTargets,$(c))))
endif
$(foreach x,$(ALL_TOOLS),$(foreach err,$($(x)_USE_ERR),$(eval $(call UseError,$(err),$(x)))))
ifeq ($(strip $(XFAST)),)
$(foreach x,$(ALL_EXTERNAL_PRODS),$(eval $(call ProductCommonVarsExternal,$(x)))$(eval $($(x)_INIT_FUNC)))
$(foreach x,$(ALL_BIGPRODS),$(eval $(call BigProductVars,$x)))
$(foreach x,$(ALL_PRODS),$(eval $(call UpdateXDEPS,$(x))))
$(foreach x,$(ALL_PRODS),$(eval $(call ProductCommonVars,$(x),,,$($(x)_BuildFile))))
$(foreach x,$(ALL_BIGPRODS),$(eval $(call ProductCommonVars,$(x),,,$($(x)_BuildFile))))
ifeq ($(strip $(FAST)),)
$(info >> Local Products Rules ..... started)
$(foreach x,$(ALL_PRODS),$(eval $($(x)_INIT_FUNC)))
$(foreach x,$(ALL_BIGPRODS),$(eval $($(x)_INIT_FUNC)))
$(foreach v,$(sort $(DEPENDENCY_ORDER_VARIABLES)),$(foreach x,$(ALL_PRODS),$(if $(strip $($(x)_$(v))),,$(eval $(call $(DEPENDENCY_ORDER_FUNCTION_$(v)),$x)))))
$(info >> Local Products Rules ..... done)
endif
$(foreach bf,$(ALL_BUILDFILES),$(foreach err,$(sort $($(bf)_USE_ERR)),$(eval $(call UseError,$(err),$(bf)))))
$(foreach x,$(ALL_COMMONRULES),$(eval $($(x)_INIT_FUNC)))
endif
ifeq ($(strip $(CHECK_HEADERS_FILES)),yes)
$(foreach x,$(ALL_PRODS),$(eval $(call HeaderChecks,$x)))
endif
####### Update Subsystems and Packages rules ##############
$(foreach dir,$(ALL_SUBSYSTEMS),$(eval $(call SubSystem,$(dir),$(SCRAM_SOURCEDIR)_$(subst /,_,$(dir)))))
$(foreach dir,$(ALL_PACKAGES),$(eval $(call Package,$(dir),$(SCRAM_SOURCEDIR)_$(subst /,_,$(dir)))))
endif
###########################################################
$(foreach r,$(strip $(sort $(EXTRA_TOP_LEVEL_BUILD_RULES))),$(eval $(call $r)))
LIBDIR := $(wildcard $(LIBDIR))
self_EX_LIBDIR := $(wildcard $(self_EX_LIBDIR))
PHONY: $(SCRAM_SOURCEDIR) prebuild postbuild runtests_$(SCRAM_SOURCEDIR) unittests_$(SCRAM_SOURCEDIR) runpython_$(SCRAM_SOURCEDIR) compile_$(SCRAM_SOURCEDIR) precompile_$(SCRAM_SOURCEDIR) edm_checks_$(SCRAM_SOURCEDIR) scripts_$(SCRAM_SOURCEDIR)
$(SCRAM_SOURCEDIR): $($(SCRAM_SOURCEDIR)) $(subdirs_$(SCRAM_SOURCEDIR)) | prebuild
	@$(DO_BUILD_LOG) $(MAKE) -f $(SCRAM_MAKEFILE) ufast outputlog
	@$(MAKE) -f $(SCRAM_MAKEFILE) PostBuild
prebuild: $(prebuild)
	@$(CMD_echo) ">> Building $(SCRAM_PROJECTNAME) version $(SCRAM_PROJECTVERSION) ----" $(if $(HOOK_PROJECT), && $(HOOK_PROJECT) -s $(if $(KEEP_ON_BUILDING), || $(CMD_true)))
	@[ -d $(LOCALTOP)/logs/$(SCRAM_ARCH) ] || $(CMD_mkdir) -p $(LOCALTOP)/logs/$(SCRAM_ARCH)
postbuild: $(postbuild)
	@$(MAKE) -f $(SCRAM_MAKEFILE) PostBuild
	@$(CMD_echo) "Release $(SCRAM_PROJECTNAME) version $(SCRAM_PROJECTVERSION) build finished at `date`"
runpython_$(SCRAM_SOURCEDIR): $(addprefix runpython_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> Python completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
runtests_$(SCRAM_SOURCEDIR): $(addprefix runtests_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> Test sequence completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
unittests_$(SCRAM_SOURCEDIR): $(addprefix unittests_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> Test sequence completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
compile_$(SCRAM_SOURCEDIR): $(addprefix compile_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> Compile sequence completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
precompile_$(SCRAM_SOURCEDIR): $(addprefix precompile_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> Pre-compile sequence completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
edm_checks_$(SCRAM_SOURCEDIR): $(addprefix edm_checks_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> EDM Checks sequence completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
scripts_$(SCRAM_SOURCEDIR): $(addprefix scripts_, $(subdirs_$(SCRAM_SOURCEDIR)))
	@$(CMD_echo) ">> Scripts copy completed for $(SCRAM_PROJECTNAME) $(SCRAM_PROJECTVERSION)"
###########################################################
.PHONY: all_% clean_% help_% runtests_% unittests_% runpython_% compile_% precompile_% edm_checks_% ufast xfast fast %_USED_BY %_USES echo_% outputlog buildlog
.PHONY: help_%_python help_%_src help_%_plugins help_%_bin help_%_test help_$(SCRAM_SOURCEDIR)_%
.PHONY: skiptest_% deps-tree
help_%_python:
	@$(CMD_echo) "Running \"scram build\" here will run rules for pythin i.e. creates sym-links and compiles python modules"
help_%_src:
	@$(CMD_echo) "Running \"scram build\" here normally build a shared library."
help_%_plugins:
	@$(CMD_echo) "Running \"scram build\" here normally build EDM-plugins."
help_%_bin:
	@$(CMD_echo) "Running \"scram build\" here normally build public executables and shared libs (if any)."
help_%_test:
	@$(CMD_echo) "Running \"scram build\" here normally build test executables and shared libs (if any)."
help_$(SCRAM_SOURCEDIR)_%:
	@$(CMD_echo) "Doing \"scram build\" here will build every thing exist under this directory."
all_% runtests_% unittests_% help_% runpython_% compile_% precompile_% edm_checks_%:
	@if [ "X$(TARGETDIR)" = "X$*" ] ; then \
	  $(CMD_echo) ">> Nothing to be done for $(THISDIR)";\
	fi
clean_%:
	@if [ "X$($*_objdir)" != "X" ] ; then \
	  dir=`$(CMD_echo) $($*_objdir) | $(CMD_grep) '^$(WORKINGDIR)/' | $(CMD_sed) -e 's|^$(WORKINGDIR)/||'`;\
	  if [ "X$$dir" != "X" ] ; then \
	    if [ -d $(WORKINGDIR)/$$dir ] ; then \
	      $(CMD_echo) "Cleaning up $$dir"; $(call BuildClean,$$dir) ; exit 0;\
	    fi;\
	  fi;\
	elif [ "$(TARGETDIR)" == "$*" ] ; then \
	  $(CMD_echo) "Cleaning up $(THISDIR)"; $(call BuildClean,$(THISDIR));\
	else \
	  $(CMD_echo) "***WARNING: Unknown product $*. Failed to cleanup.";\
	fi
	$(if $(strip $(edmPluginRefresh_cache)),$(MAKE) -f $(SCRAM_MAKEFILE) poisoned_edmplugins)
ufast xfast fast:
	@:
%_USED_BY:
	@var=$(call GetEchoVariable,$@);\
	if [ "X$$var" != "X" ] ; then \
	  $(PROJECT_INFO_SCRIPT) $(LOCALTOP) USED_BY $(patsubst %_USED_BY,%,$(call GetEchoVariable,$@)) $(SCRAM_ARCH);\
	fi
%_USES:
	@var=$(call GetEchoVariable,$@);\
	if [ "X$$var" != "X" ] ; then \
	  $(PROJECT_INFO_SCRIPT) $(LOCALTOP) USES $(patsubst %_USES,%,$(call GetEchoVariable,$@)) $(SCRAM_ARCH);\
	fi
%_ORIGIN:
	@var=$(call GetEchoVariable,$@);\
	if [ "X$$var" != "X" ] ; then \
	  $(PROJECT_INFO_SCRIPT) $(LOCALTOP) ORIGIN $(patsubst %_ORIGIN,%,$(call GetEchoVariable,$@)) $(SCRAM_ARCH);\
	fi
echo_%:
	@$(CMD_echo) "$* = $(subst ",\",$($*))"
$(SCRAMSTORENAME_PYTHON)/__init__.py:
	@$(CMD_touch) $@
$(COMMON_WORKINGDIR)/cache/python_symlinks: $(addsuffix __init__.py,$(addprefix python/,$(dir $(ALL_PYTHON_DIRS)))) | $(COMMON_WORKINGDIR)/cache/project_links
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_touch) $@
$(WORKINGDIR)/%/productautocleanup: FORCE_TARGET
	@for dir in $(foreach x,$(patsubst productautocleanup,,$(notdir $(patsubst %/,%,$(dir $(wildcard $(@D)/*/AUTOCLEAN.*.clean))))),$(if $(findstring all_$x,$($(subst /,_,$*))),,$x)) ; do \
	  $(call BuildClean,$*/$$dir,0[0-9]);\
	done
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
	$(CMD_touch) -t $(OLD_TIMESTAMP) $@
outputlog: buildlog
	@:
buildlog:
	@for f in `$(CMD_find) $(WORKINGDIR)/cache/log/$(SCRAM_SOURCEDIR) -name "build.log" -type f` ; do \
	  pack=`$(CMD_dirname) $$f` &&\
	  for l in `$(CMD_find) $$pack -name "*" -type f | grep -v "/build.log$$"` ; do \
	    $(CMD_cat) $$l >> $$f &&\
            $(CMD_rm) -f $$l &&\
            $(CMD_touch) -t $(OLD_TIMESTAMP) $$l ;\
	  done;\
	  $(CMD_cat) $$f ;\
	  $(CMD_touch) -t $(OLD_TIMESTAMP) $$f;\
	done
runtime:
	@$(CMD_echo) ">> Runtime environment:"; env
$(WORKINGDIR)/errors: FORCE_TARGET
	@for err in $(foreach p,$(BUILDFILE_ERRORS),$($(p)_ERROR)); do \
	  echo "$$err" ;\
	done; $(CMD_touch) -t $(OLD_TIMESTAMP) $@
skiptest_%:
	@:
updateclassversion: $(filter $(WORKINGDIR)/$(THISDIR)/%,$(ALL_CLASS_VERSION_RULES))
	@:
PostBuild: CompilePython ProjectPluginRefresh $(WORKINGDIR)/errors $(if $(strip $(edmPluginRefresh_cache)),poisoned_edmplugins)
	@:
ifeq ($(strip $(COMPILE_PYTHON_SCRIPTS)),yes)
.PHONY: do_python_symlink PyCompile_%
CompilePython: $(addprefix PyCompile_,$(wildcard $(SCRAMSTORENAME_CFIPYTHON)$(patsubst $(SCRAM_SOURCEDIR)%,%,$(THISDIR)) $(SCRAMSTORENAME_PYTHON)) $(filter $(THISDIR)%,$(addprefix $(SCRAM_SOURCEDIR)/,$(ALL_PYTHON_DIRS))))
	@[ ! -f $(COMMON_WORKINGDIR)/cache/python_error ] || exit 1
	@$(CMD_echo) ">> All python modules compiled"
PyCompile_$(SCRAM_SOURCEDIR)/% PyCompile_cfipython/% PyCompile_%: do_python_symlink
	@$(call compile_python,$(patsubst PyCompile_%,%,$@),$($(SCRAM_SOURCEDIR)/$*_PRODDUCT_NAME))
do_python_symlink: $(COMMON_WORKINGDIR)/cache/python_symlinks
	@$(CMD_rm) -f $(COMMON_WORKINGDIR)/cache/python_error
	@$(CMD_echo) ">> Done python_symlink"
else
CompilePython:
	@$(CMD_echo) ">> Skipped python compilation"
endif
ProjectPluginRefresh: FORCE_TARGET $(foreach file,$(addsuffix _cache,$(PLUGIN_REFRESH_CMDS)),$($(file)))
	@$(CMD_echo) ">> Plugins of all types refreshed."
.PHONY: dxr checker FORCE_LLVM_CHECK llvm-ccdb
FORCE_LLVM_CHECK:
	@:
ifeq ($(strip $(SCRAM_MULTIPLE_COMPILERS)),)
checker:
	@$(CMD_echo) "**** ERROR: Can not run llvm analyzer as this project does not support multiple compilers" && exit 1
else
ifeq ($(strip $(filter $(LLVM_ANALYZER)-$(CXX_TYPE_COMPILER),$(ALL_TOOLS))),)
checker:
	@$(CMD_echo) "**** ERROR: Can not run llvm analyzer as $(LLVM_ANALYZER)-$(CXX_TYPE_COMPILER) tool does not exist" && exit 1
else
ifeq ($(strip $(LLVM_PLUGIN)),)
checker:
	@(CMD_echo) "**** ERROR: LLVM static plugin is not set for this project" && exit 1
else
checker: $(WORKINGDIR)/cache/prod/lib$(LLVM_PLUGIN)
	@+$(CMD_echo) Starting LLVM static checkers $(THISDIR) &&\
	plugin=$(call find_project_file,lib/$(SCRAM_ARCH)/$(MODULE_PREFIX)$(LLVM_PLUGIN).$(SHAREDSUFFIX)) &&\
	if [ "X$$plugin" == "X" ] ; then $(CMD_echo) "**** ERROR: Unable to find $(MODULE_PREFIX)$(LLVM_PLUGIN).$(SHAREDSUFFIX)" ; exit 1; fi ;\
	LLVM_BASE=$($(shell $(CMD_echo) $(LLVM_ANALYZER)-$(CXX_TYPE_COMPILER)_BASE | $(CMD_tr) 'a-z-' 'A-Z_')) &&\
	$(CMD_cd) $(THISDIR) && $(CMD_rm) -rf $(LOCALTOP)/llvm-analysis && $(CMD_mkdir) -p $(LOCALTOP)/llvm-analysis &&\
	$(VERB_ECHO) $$LLVM_BASE/bin/scan-build -o $(LOCALTOP)/llvm-analysis -load-plugin $$plugin $(LLVM_CHECKERS) $(USER_LLVM_CHECKERS) \
	  $(SCRAM) build -f $(if $(strip $(SCRAM_BUILDVERBOSE)),-v,) compile COMPILER=$(LLVM_ANALYZER) SCRAM_IGNORE_MISSING_COMPILERS=yes &&\
	$$LLVM_BASE/bin/scan-build              -o $(LOCALTOP)/llvm-analysis -load-plugin $$plugin $(LLVM_CHECKERS) $(USER_LLVM_CHECKERS) \
	  $(SCRAM) build -f $(if $(strip $(SCRAM_BUILDVERBOSE)),-v,) compile COMPILER=$(LLVM_ANALYZER) SCRAM_IGNORE_MISSING_COMPILERS=yes && $(DO_BUILD_LOG) $(SCRAM) build buildlog &&\
	  $(CMD_rm) -rf $(LOCALTOP)/llvm-analysis/*/failures
endif
endif
endif
ifneq ($(strip $(PY3_DXR_BASE)),)
dxr:    $(SCRAM_SOURCEDIR)/dxr.config
	@$(CMD_mkdir) -p dxr && SCRAM_DXR_RUN=yes $(PY3_DXR_BASE)/bin/dxr-build.py -v -f $(SCRAM_SOURCEDIR)/dxr.config
$(SCRAM_SOURCEDIR)/dxr.config: $(SCRAM_CONFIGDIR)/dxr.config FORCE_TARGET
	@MKJOBS=$$(echo $(MAKEFLAGS) | sed 's|.* -j||;s| .*||') &&\
	if [ "$$MKJOBS" = "" ] ; then MKJOBS=1; fi ;\
	$(CMD_sed) -e "s|@LOCALTOP@|$$LOCALTOP|g;s|@JOBS@|$$MKJOBS|g" $< > $@ && $(CMD_echo) ">> Regenerated $@"
else
dxr:
	@$(CMD_echo) "**** ERROR: py2-dxr tool not available."
endif
disable-multi-targets:
	@$(CMD_rm) -f $(SCRAM_ADMIN_DIR)/multi-targets && $(CMD_echo) "Building with multi-targets is disabled."
enable-multi-targets:
	@$(CMD_touch) $(SCRAM_ADMIN_DIR)/multi-targets && $(CMD_echo) "Building with multi-targets is enabled."
check-multi-targets:
	@if [ -f $(SCRAM_ADMIN_DIR)/multi-targets ] ; then \
	  $(CMD_echo) Building with multi-targets is enabled ;\
	else \
	  $(CMD_echo) Building with multi-targets is disabled ;\
	fi
enable-biglib:
	@$(CMD_rm) -f $(SCRAM_ADMIN_DIR)/no-bigproduct && $(CMD_echo) "Building big products is activated."
	@$(call biglib_setup)
disable-biglib:
	@$(CMD_touch) $(SCRAM_ADMIN_DIR)/no-bigproduct && $(CMD_echo) "Building big products is deactivated."
	@$(call biglib_setup)
check-biglib:
	@if [ -f $(SCRAM_ADMIN_DIR)/no-bigproduct ] ; then \
	  $(CMD_echo) Big products build is disabled ;\
	else \
	  $(CMD_echo) Big products build is enabled ;\
	fi
deps-tree::
	@$(CMD_echo) "Finding all dependencies paths from package/tool '$(wordlist 1,1,$(filter-out deps-tree,$(MAKECMDGOALS)))' to package/tool '$(wordlist 2,2,$(filter-out deps-tree,$(MAKECMDGOALS)))'"
	@$(FIND_DEPS_TREE_SCRIPT) $(DEPS_TREE_PACKAGE) $(DEPS_TREE_DEPENDENCY) $(LOCALTOP) $(RELEASETOP) $(FULL_RELEASE_FOR_A_PATCH)
$(LLVM_CCDB_EXT): FORCE_TARGET
	@$(CMD_cd) $(LOCALTOP) && $(MAKE) -f $(SCRAM_MAKEFILE) compile COMPILER=llvm SCRAM_GENERATE_LLVM_CCDB=YES &&\
	[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
	$(SCRAM_CONFIGDIR)/SCRAM/llvm-ccdb.py $(LLVM_CCDB_EXT)
llvm-ccdb: $(LLVM_CCDB_EXT)
	@:
ifneq ($(strip $(filter code-checks code-checks-% code-format code-format-%,$(MAKECMDGOALS))),)
-include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.coderules
endif
ifneq ($(strip $(RELEASETOP)),)
ifeq ($(strip $(filter checkdeps,$(MAKECMDGOALS))),checkdeps)
-include $(SCRAM_CONFIGDIR)/SCRAM/GMake/Makefile.checkdeps
endif
endif
.PHONY: skip-scripts-copy ignore-deleted emit-llvm use-ibeos cleanup-runtest
use-ibeos: $(WORKINGDIR)/das_client/dasgoclient
$(WORKINGDIR)/das_client/dasgoclient: $(WORKINGDIR)/das_client/das_client
	@ln -sf das_client $@
	@$(CMD_echo) ">> Created $@"
$(WORKINGDIR)/das_client/das_client:
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
	curl -L -s --connect-timeout 10 https://raw.githubusercontent.com/cms-sw/cms-bot/master/das-utils/das_client  > $@ &&\
        chmod +x $@
emit-llvm:
	SCRAM_APPLY_BIGLIB_RULES=no \
        SCRAM_SYNTAX_ONLY=yes \
        SCRAM_OBJEXT=ll \
        SCRAM_COMPILE_OPTIONS="-S -emit-llvm" \
        COMPILER=llvm \
        $(MAKE) -f $(SCRAM_MAKEFILE) compile
ignore-deleted:
	@:
scripts_%:
	@:
skip-scripts-copy: all
	@:
cleanup-runtest:
	@[ ! -d "$(LOCALTOP)/$(UNITTEST_DIR)" ] || $(CMD_rm) -rf $(LOCALTOP)/$(UNITTEST_DIR)
check-headers: $(filter $(WORKINGDIR)/$(THISDIR)/%,$(CHECK_HEADERS_ALL))
        @:
%:
	@$(if $(strip $(wildcard $@ $(RELEASETOP)/$@)),true,$(CMD_echo) $(if $(subst undefined,,$(origin $@)),$@ = $($@),Unknow target $@))
