--- a/madgraph/interface/amcatnlo_run_interface.py	2019-02-04 12:19:42.000000000 +0100
+++ b/madgraph/interface/amcatnlo_run_interface.py	2019-10-16 13:39:36.000000000 +0200
@@ -1,4 +1,4 @@
- ################################################################################
+################################################################################
 #
 # Copyright (c) 2011 The MadGraph5_aMC@NLO Development team and Contributors
 #
@@ -921,8 +921,8 @@
     def __init__(self, question, line_args=[], mode=None, force=False,
                                                                   *args, **opt):
         
-        self.check_available_module(opt['mother_interface'].options)
         self.me_dir = opt['mother_interface'].me_dir
+        self.check_available_module(opt['mother_interface'].options)
         self.last_mode = opt['mother_interface'].last_mode
         self.proc_characteristics = opt['mother_interface'].proc_characteristics
         self.run_card = banner_mod.RunCard(pjoin(self.me_dir,'Cards', 'run_card.dat'))
@@ -957,6 +957,10 @@
             self.available_module.add('PY8')
         if options['hwpp_path'] and options['thepeg_path'] and options['hepmc_path']:
             self.available_module.add('HW7')
+            
+        MCatNLO_libdir = pjoin(self.me_dir, 'MCatNLO', 'lib')
+        if os.path.exists(os.path.realpath(pjoin(MCatNLO_libdir, 'libstdhep.a'))):
+            self.available_module.add('StdHEP')
 #
 #   shorcut
 #
@@ -1127,12 +1131,16 @@
             self.allowed_shower = ['OFF']
             return ['OFF']
         else:
-            allowed = ['HERWIG6','OFF', 'PYTHIA6Q', 'PYTHIA6PT', ]
+            if 'StdHEP' in self.available_module:
+                allowed = ['HERWIG6','OFF', 'PYTHIA6Q', 'PYTHIA6PT', ]
+            else:
+                allowed = ['OFF']
             if 'PY8' in self.available_module:
                 allowed.append('PYTHIA8')
             if 'HW7' in self.available_module:
                 allowed.append('HERWIGPP')
             
+            
             self.allowed_shower = allowed
             
             return allowed
@@ -4315,7 +4323,34 @@
                                              self.shower_card['nsplit_jobs'])
         content += 'MCMODE=%s\n' % shower
         content += 'PDLABEL=%s\n' % pdlabel
-        content += 'ALPHAEW=%s\n' % self.banner.get_detail('param_card', 'sminputs', 1).value
+
+        try:
+            aewm1 = self.banner.get_detail('param_card', 'sminputs', 1).value
+            raise KeyError
+        except KeyError:
+            mod = self.get_model()
+            if not hasattr(mod, 'parameter_dict'):
+                from models import model_reader
+                mod = model_reader.ModelReader(mod)
+                mod.set_parameters_and_couplings(self.banner.param_card)
+            aewm1 = 0
+            for key in ['aEWM1', 'AEWM1', 'aEWm1', 'aewm1']:
+                if key in mod['parameter_dict']:
+                    aewm1 = mod['parameter_dict'][key]
+                    break
+                elif 'mdl_%s' % key in mod['parameter_dict']:
+                    aewm1 = mod['parameter_dict']['mod_%s' % key]
+                    break
+            else:
+                for key in ['aEW', 'AEW', 'aEw', 'aew']:
+                    if key in mod['parameter_dict']:
+                        aewm1 = 1./mod['parameter_dict'][key]
+                        break
+                    elif 'mdl_%s' % key in mod['parameter_dict']:
+                        aewm1 = 1./mod['parameter_dict']['mod_%s' % key]
+                        break 
+           
+        content += 'ALPHAEW=%s\n' % aewm1
         #content += 'PDFSET=%s\n' % self.banner.get_detail('run_card', 'lhaid')
         #content += 'PDFSET=%s\n' % max([init_dict['pdfsup1'],init_dict['pdfsup2']])
         content += 'TMASS=%s\n' % self.banner.get_detail('param_card', 'mass', 6).value
@@ -5069,12 +5104,20 @@
             not os.path.exists(os.path.realpath(pjoin(MCatNLO_libdir, 'libFmcfio.a'))):  
             if  os.path.exists(pjoin(sourcedir,'StdHEP')):
                 logger.info('Compiling StdHEP (can take a couple of minutes) ...')
-                misc.compile(['StdHEP'], cwd = sourcedir)
-                logger.info('          ...done.')      
+                try:
+                    misc.compile(['StdHEP'], cwd = sourcedir)
+                except Exception as error:
+                    logger.debug(str(error))
+                    logger.warning("StdHep failed to compiled. This forbids to run NLO+PS with PY6 and Herwig6")
+                    logger.info("details on the compilation error are available if the code is run with --debug flag")
+                else:
+                    logger.info('          ...done.')      
             else:
-                raise aMCatNLOError('Could not compile StdHEP because its'+\
+                logger.warning('Could not compile StdHEP because its'+\
                    ' source directory could not be found in the SOURCE folder.\n'+\
-                             " Check the MG5_aMC option 'output_dependencies.'")
+                             " Check the MG5_aMC option 'output_dependencies'.\n"+\
+                   " This will prevent the use of HERWIG6/Pythia6 shower.")
+
 
         # make CutTools (only necessary with MG option output_dependencies='internal')
         if not os.path.exists(os.path.realpath(pjoin(libdir, 'libcts.a'))) or \
@@ -5396,11 +5439,11 @@
     read http://amcatnlo.cern.ch/FxFx_merging.htm for more details.""")
                 if self.run_card['parton_shower'].upper() == 'PYTHIA6Q':
                     raise self.InvalidCmd("""FxFx merging does not work with Q-squared ordered showers.""")
-                elif self.run_card['parton_shower'].upper() != 'HERWIG6' and self.run_card['parton_shower'].upper() != 'PYTHIA8':
+                elif self.run_card['parton_shower'].upper() != 'HERWIG6' and self.run_card['parton_shower'].upper() != 'PYTHIA8' and self.run_card['parton_shower'].upper() != 'HERWIGPP':
                     question="FxFx merging not tested for %s shower. Do you want to continue?\n"  % self.run_card['parton_shower'] + \
                         "Type \'n\' to stop or \'y\' to continue"
                     answers = ['n','y']
-                    answer = self.ask(question, 'n', answers, alias=alias)
+                    answer = self.ask(question, 'n', answers)
                     if answer == 'n':
                         error = '''Stop opertation'''
                         self.ask_run_configuration(mode, options)
