Index: PhysPars.h
===================================================================
--- PhysPars.h	(revision 3720)
+++ PhysPars.h	(working copy)
@@ -1,12 +1,12 @@
 c -*- Fortran -*-
-      real * 8 ph_alphaem,ph_Zmass,ph_Zwidth,ph_Wmass,ph_Wwidth,ph_cthw,
+      real * 8 ph_alphaem,ph_Zmass,ph_Zwidth,osZwidth,ph_Wmass,ph_Wwidth,ph_cthw,
      $     ph_sthw,ph_sthw2,ph_Zmass2,ph_Zmass2low,ph_Zmass2high,
      $     ph_Wmass2,ph_Wmass2low,ph_Wmass2high ,ph_ZmZw,ph_WmWw,
-     $     ph_unit_e, ph_CKM(3,3)
-      common/ph_common/ph_alphaem,ph_Zmass,ph_Zwidth,ph_Wmass,ph_Wwidth,
+     $     ph_unit_e, ph_gmu, ph_CKM(3,3)
+      common/ph_common/ph_alphaem,ph_Zmass,ph_Zwidth,osZwidth,ph_Wmass,ph_Wwidth,
      $     ph_cthw,ph_sthw,ph_sthw2,ph_Zmass2,ph_Zmass2low,
      $     ph_Zmass2high,ph_Wmass2,ph_Wmass2low,ph_Wmass2high ,ph_ZmZw,
-     $     ph_WmWw,ph_unit_e,ph_CKM
+     $     ph_WmWw,ph_unit_e,ph_gmu,ph_CKM
 
 ccccccccccccccccccccccccccccccc
 c     to include Z->bb
Index: ZjMiNNLO/init_couplings.f
===================================================================
--- ZjMiNNLO/init_couplings.f	(revision 3720)
+++ ZjMiNNLO/init_couplings.f	(working copy)
@@ -14,60 +14,81 @@
       real * 8 masswindow_low,masswindow_high,zmasslow,zmasshigh
       real *8 powheginput,pwhg_alphas
       external powheginput,pwhg_alphas
+      real*8 osZmass
       logical verbose
       parameter(verbose=.true.)
-
+      
       flg_minnlo=powheginput('#minnlo').eq.1
       flg_uubornonly=powheginput('#uubornonly').eq.1
       if (flg_uubornonly) then
-         flg_bornonly = .true.
+            flg_bornonly = .true.
       endif
 c     If minlo is not present in the input card, but minnlo is,
 c     then set also flg_minlo to true, so that we are sure all is done
 c     properly in setlocalscales and for all other occurencies of
 c     flg_minlo.
       if(flg_minnlo) flg_minlo=.true.
-
-
+      
+      
       if(powheginput("#par_isrtinycsi").gt.0) 
      $     par_isrtinycsi = powheginput("#par_isrtinycsi")
-
+      
       if(powheginput("#par_fsrtinycsi").gt.0) 
      $     par_fsrtinycsi = powheginput("#par_fsrtinycsi")
-
+      
       if(powheginput("#par_isrtinyy").gt.0) 
      $     par_isrtinyy = powheginput("#par_isrtinyy")
-
+      
       if(powheginput("#par_fsrtinyy").gt.0) 
      $     par_fsrtinyy = powheginput("#par_fsrtinyy")
-
-
+      
+      
       flg_withdamp=.true.
       flg_bornzerodamp=.true.
       if(powheginput('#withdamp').eq.0) then
-         flg_withdamp=.false.
-         flg_bornzerodamp=.false.
+            flg_withdamp=.false.
+            flg_bornzerodamp=.false.
       endif
-
-
-
-
+      
+      
+      
+      
 cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
 cccccc   INDEPENDENT QUANTITIES       
 cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
-      ph_Wmass = powheginput("#Wmass")
-      if (ph_Wmass.le.0d0) ph_Wmass  = 80.398d0     
+      ! ph_Wmass = powheginput("#Wmass")
+      ! if (ph_Wmass.le.0d0) ph_Wmass  = 80.379d0     
       ph_Wwidth = powheginput("#Wwidth")
-      if (ph_Wwidth.le.0d0) ph_Wwidth =  2.141d0
-      ph_alphaem = powheginput("#alphaem")
-      if (ph_alphaem.le.0d0) ph_alphaem = 1d0/128.89d0
+      if (ph_Wwidth.le.0d0) ph_Wwidth =  2.085d0
+      ! ph_alphaem = powheginput("#alphaem")
+      ! if (ph_alphaem.le.0d0) ph_alphaem = 1d0/128.89d0
       ph_Zmass = powheginput("#Zmass")
       if (ph_Zmass.le.0d0) ph_Zmass  = 91.1876d0     
       ph_Zwidth = powheginput("#Zwidth")
       if (ph_Zwidth.le.0d0) ph_Zwidth =  2.4952d0
       ph_sthw2 = powheginput("#sthw2")
-      if (ph_sthw2.le.0d0) ph_sthw2 = abs(1d0-(ph_Wmass/ph_Zmass)**2)
+      if (ph_sthw2.le.0d0) ph_sthw2 = 0.23154
+      ph_gmu = powheginput("#gmu")
+      if (ph_gmu.le.0) ph_gmu = 1.1663787d-5
+      
+      if(verbose) then
+            write(*,*) '*************************************'
+            write(*,*) 'Using GF,mZ,sthw2 input scheme'
+            write(*,*) 'input Z mass = ',ph_Zmass
+            write(*,*) 'input Z width = ',ph_Zwidth
+            write(*,*) 'input W width = ',ph_Wwidth
+            write(*,*) 'input sthw2 = ',ph_sthw2
+            write(*,*) 'input gmu = ',ph_gmu
+            write(*,*) '*************************************'
+      endif
+      
+      ! correct masses fixed-width -> width-dependent scheme
+      osZmass= ph_Zmass
+      osZwidth= ph_Zwidth
+      ph_Zmass= osZmass/sqrt(1.d0+(osZwidth/osZmass)**2)
+      ph_Zwidth= osZwidth/sqrt(1.d0+(osZwidth/osZmass)**2)
 
+
 c     number of light flavors
       st_nlight = 5
 c Masses of light leptons for Z decays:
@@ -138,15 +159,17 @@
       endif
 
       ph_ZmZw = ph_Zmass * ph_Zwidth
+      
+      ph_Wmass = sqrt(ph_Zmass**2*(1d0-ph_sthw2))
+      ph_unit_e = sqrt(ph_gmu * 8d0/sqrt(2d0) * ph_Wmass**2 * ph_sthw2)
+      ph_alphaem = ph_unit_e*ph_unit_e/4d0/pi
 
-      ph_unit_e = sqrt(4*pi*ph_alphaem)
-
       if(verbose) then
       write(*,*) '*************************************'
       write(*,*) 'Z mass = ',ph_Zmass
       write(*,*) 'Z width = ',ph_Zwidth
-c      write(*,*) 'W mass = ',ph_Wmass
-c      write(*,*) 'W width = ',ph_Wwidth
+      write(*,*) 'W mass = ',ph_Wmass
+      write(*,*) 'W width = ',ph_Wwidth
       write(*,*) '1/alphaem = ',1d0/ph_alphaem
       write(*,*) 'alphaem = ',ph_alphaem
       write(*,*) 'sthw2 = ',ph_sthw2
Index: ZjMiNNLO/rwl_setup_param_weights.f
===================================================================
--- ZjMiNNLO/rwl_setup_param_weights.f	(revision 3720)
+++ ZjMiNNLO/rwl_setup_param_weights.f	(working copy)
@@ -3,9 +3,12 @@
       integer count
       integer, save :: old_pdf1,old_pdf2
       real * 8, save :: old_facfact,old_renfact
+      real * 8, save :: old_sthw2,old_Zmass,old_Zwidth
       include 'pwhg_rwl.h'
       include 'pwhg_pdf.h'
       include 'pwhg_st.h'
+      include 'pwhg_math.h'
+      include 'PhysPars.h'
       logical rwl_keypresent
       real * 8 val
       character * 5 scheme
@@ -17,11 +20,26 @@
          old_pdf2=pdf_ndns2
          old_facfact = st_facfact
          old_renfact = st_renfact
+         old_sthw2 = ph_sthw2
+         old_Zmass = ph_Zmass
       elseif(count == -1) then
          pdf_ndns1 = old_pdf1
          pdf_ndns2 = old_pdf2
          st_facfact = old_facfact
          st_renfact = old_renfact
+         
+         ph_sthw2 = old_sthw2
+         ph_sthw = sqrt(ph_sthw2)
+         ph_cthw = sqrt(1-ph_sthw2)
+         
+         ph_Zmass = old_Zmass
+         ph_Zmass2 = ph_Zmass**2
+         ph_ZmZw = ph_Zmass * ph_Zwidth
+         
+         ph_Wmass = sqrt(ph_Zmass**2*(1d0-ph_sthw2))
+         ph_unit_e = sqrt(ph_gmu * 8d0/sqrt(2d0) * ph_Wmass**2 * ph_sthw2)
+         ph_alphaem = ph_unit_e*ph_unit_e/4d0/pi
+         
          call genericpdfpar(pdf_ndns1,pdf_ih1,st_lambda5MSB,
      1        scheme,iorder,iret)
       else
@@ -43,5 +61,20 @@
          if(rwl_keypresent(count,'renscfact',val)) then
             st_renfact = val
          endif
+         if(rwl_keypresent(count,'sthw2',val)) then
+            ph_sthw2 = val
+            ph_sthw = sqrt(ph_sthw2)
+            ph_cthw = sqrt(1-ph_sthw2)
+         endif
+         if(rwl_keypresent(count,'zmass',val)) then
+            ph_Zmass = val
+            ph_Zmass = ph_Zmass/sqrt(1.d0+(osZwidth/ph_Zmass)**2)
+            
+            ph_Zmass2 = ph_Zmass**2
+            ph_ZmZw = ph_Zmass * ph_Zwidth
+         endif
+         ph_Wmass = sqrt(ph_Zmass**2*(1d0-ph_sthw2))
+         ph_unit_e = sqrt(ph_gmu * 8d0/sqrt(2d0) * ph_Wmass**2 * ph_sthw2)
+         ph_alphaem = ph_unit_e*ph_unit_e/4d0/pi
       endif
       end
